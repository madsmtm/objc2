name: CI

on:
  push:
    branches: [master]
  pull_request:
  schedule:
    - cron: '0 9 * * MON'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Faster compilation and error on warnings
  RUSTFLAGS: "-C debuginfo=0 -D warnings"
  RUSTDOCFLAGS: "-D warnings"
  CARGO_TERM_VERBOSE: true
  MACOSX_DEPLOYMENT_TARGET: 10.7
  IPHONEOS_DEPLOYMENT_TARGET: 7.0
  # We only support compiling Objective-C code with clang
  CC: clang
  CXX: clang++

jobs:
  fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

  test:
    name: ${{ matrix.name }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Test macOS 10.15
            os: macos-10.15
            target: x86_64-apple-darwin
          - name: Test macOS 11
            os: macos-11
            target: x86_64-apple-darwin
          - name: Build macOS AArch64
            os: macos-11
            target: aarch64-apple-darwin
            test-args: --no-run
          - name: Test macOS old SDK
            os: macos-11
            target: x86_64-apple-darwin
            # Oldest macOS version we support
            sdk: "10.7"
          - name: Test macOS nightly w. ui tests
            os: macos-latest
            target: x86_64-apple-darwin
            rust:
              toolchain: nightly
            # Run on nightly to help find regressions
            test-args: --features tests/ui
          - name: Build macOS 32bit
            os: macos-10.15
            target: i686-apple-darwin
            rust:
              toolchain: nightly
              target: x86_64-apple-darwin
              components: clippy, rust-src
            args: -Zbuild-std -Zdoctest-xcompile
            # 32-bit support was removed in 10.15, so we can't test the
            # binary, only build it
            test-args: --no-run
            # Newest SDK that supports 32-bit
            sdk: "10.13"
          - name: Test GNUStep with libobjc2 v1.9
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            runtime: gnustep-1-9
            libobjc2: "1.9"
          - name: Test GNUStep with libobjc2 v2.0
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            runtime: gnustep-2-0
            libobjc2: "2.0"
          - name: Test GNUStep with libobjc2 v2.1
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            runtime: gnustep-2-1
            libobjc2: "2.1"
          - name: Test GNUStep 32bit
            os: ubuntu-latest
            target: i686-unknown-linux-gnu
            cflags: -m32
            configureflags: --target=x86-pc-linux-gnu
            runtime: gnustep-1-9
            libobjc2: "1.9"
          - name: Test iOS simulator x86 64bit
            os: macos-11
            target: x86_64-apple-ios
            dinghy: true
          - name: Build iOS simulator ARM64
            os: macos-latest
            target: aarch64-apple-ios-sim
            test-args: --no-run
          - name: Build iOS ARM64
            os: macos-latest
            target: aarch64-apple-ios
            test-args: --no-run
          - name: Build iOS ARMv7
            os: macos-latest
            target: armv7-apple-ios
            rust:
              toolchain: nightly
              target: x86_64-apple-darwin
              components: clippy, rust-src
            args: -Zbuild-std -Zdoctest-xcompile
            test-args: --no-run
          - name: Build iOS ARMv7s
            os: macos-latest
            target: armv7s-apple-ios
            rust:
              toolchain: nightly
              target: x86_64-apple-darwin
              components: clippy, rust-src
            args: -Zbuild-std -Zdoctest-xcompile
            test-args: --no-run
          - name: Build iOS 32bit x86
            os: macos-latest
            target: i386-apple-ios
            rust:
              toolchain: nightly
              target: x86_64-apple-darwin
              components: clippy, rust-src
            args: -Zbuild-std -Zdoctest-xcompile
            test-args: --no-run
          - name: Test Compiler-RT
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            runtime: compiler-rt
            args: -p block-sys -p block2
            features: ' '
            unstable-features: ' '

    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
      CFLAGS: ${{ matrix.cflags }}
      CXXFLAGS: ${{ matrix.cflags }}
      ASMFLAGS: ${{ matrix.cflags }}
      LDFLAGS: ${{ matrix.cflags }}
      HOSTARGS: --no-default-features --features ${{ matrix.runtime || 'apple' }}
      ARGS: --no-default-features --features ${{ matrix.runtime || 'apple' }} ${{ matrix.args }}
      # Use --no-fail-fast, except with dinghy
      TESTARGS: ${{ matrix.dinghy && ' ' || '--no-fail-fast' }} ${{ matrix.test-args }}
      FEATURES: ${{ matrix.features || 'malloc,block,exception,catch_all,verify_message,derive' }}
      UNSTABLE_FEATURES: ${{ matrix.unstable-features || 'unstable-autoreleasesafe' }}

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Cache external dependencies
      id: extern-cache
      uses: actions/cache@v2
      with:
        # We could have just cached build-files, and then rerun the build tool
        # every time, letting it figure out what's changed. However, this has
        # several problems:
        #
        # - GNUStep-Base ./configure invalidates the cache, which makes it
        #   very hard to know when to rebuild and when not to.
        # - We don't want to rebuild cargo-dinghy every time the ~/.cargo
        #   folder is invalidated.
        #
        # So instead we just place the final outputs in ~/extern, and cache
        # them there:
        # - bin/cargo-dinghy
        # - lib/libobjc.so
        # - lib/libgnustep-base.so
        # - include/Foundation/*
        # - include/objc/*
        # - sdk/...
        path: |
          ~/extern/bin
          ~/extern/lib
          ~/extern/include
          ~/extern/sdk
        # Change this key if we start caching more things
        key: ${{ matrix.name }}-extern-v2

    - name: Setup environment
      # These add to PATH-like variables, so they can always be set
      run: |
        mkdir -p $HOME/extern/bin
        mkdir -p $HOME/extern/lib
        mkdir -p $HOME/extern/include
        echo "PATH=$HOME/extern/bin:$PATH" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$HOME/extern/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/extern/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "CPATH=$HOME/extern/include:$CPATH" >> $GITHUB_ENV
        # Debug print these
        ls -al $HOME/extern/*

    - name: Setup SDK environment
      if: matrix.sdk
      # This changes a variable, so is only set when a custom SDK is used
      run: echo "SDKROOT=$HOME/extern/sdk" >> $GITHUB_ENV

    - name: Install Clang & Valgrind
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get -y install clang valgrind

    - name: Install libBlocksRuntime
      if: contains(matrix.runtime, 'compiler-rt')
      run: sudo apt-get -y install libblocksruntime-dev

    - name: Install cross compilation tools
      if: matrix.target == 'i686-unknown-linux-gnu'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get -y install gcc-multilib libgcc-10-dev:i386 \
          libc6-dev:i386 libstdc++-10-dev:i386 libffi-dev:i386 \
          libxml2-dev:i386 libicu-dev:i386

    - name: Download different macOS SDK
      if: matrix.sdk && steps.extern-cache.outputs.cache-hit != 'true'
      # macOS SDKs:
      # - https://github.com/alexey-lysiuk/macos-sdk
      # - https://github.com/phracker/MacOSX-SDKs
      # - https://github.com/hexops/sdk-macos-12.0
      #
      # iOS SDKs:
      # - https://github.com/xybp888/iOS-SDKs
      # - https://github.com/theos/sdks
      run: |
        wget https://github.com/alexey-lysiuk/macos-sdk/releases/download/${{ matrix.sdk }}/MacOSX${{ matrix.sdk }}.tar.bz2
        tar -xyf MacOSX${{ matrix.sdk }}.tar.bz2
        mv MacOSX${{ matrix.sdk }}.sdk $HOME/extern/sdk

    - name: Install Make and Cmake
      if: contains(matrix.runtime, 'gnustep') && steps.extern-cache.outputs.cache-hit != 'true'
      run: sudo apt-get -y install make cmake

    - name: Install GNUStep libobjc2
      if: matrix.libobjc2 && steps.extern-cache.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/libobjc2/archive/refs/tags/v${{ matrix.libobjc2 }}.tar.gz
        tar -xzf v${{ matrix.libobjc2 }}.tar.gz

        # Install robin-map on v2.1
        if test -d libobjc2-2.1; then
          cd libobjc2-2.1/third_party
          # Remove possibly existing `robin-map` folder
          rm -rf robin-map
          wget https://github.com/Tessil/robin-map/archive/757de829927489bee55ab02147484850c687b620.tar.gz
          tar -xzf 757de829927489bee55ab02147484850c687b620.tar.gz
          mv robin-map-757de829927489bee55ab02147484850c687b620 robin-map
          cd ../..
        fi

        mkdir -p libobjc2-${{ matrix.libobjc2 }}/build
        cd libobjc2-${{ matrix.libobjc2 }}/build
        cmake -Wno-dev -DCMAKE_INSTALL_PREFIX=$HOME/extern -DTESTS=OFF ..
        make install

    - name: Install GNUStep make
      if: contains(matrix.runtime, 'gnustep') && steps.extern-cache.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/tools-make/archive/refs/tags/make-2_9_0.tar.gz
        tar -xzf make-2_9_0.tar.gz
        mkdir -p tools-make-make-2_9_0/build
        cd tools-make-make-2_9_0/build
        ../configure --prefix=$HOME/extern --with-library-combo=ng-gnu-gnu
        make install

    - name: Install GNUStep-Base
      if: contains(matrix.runtime, 'gnustep') && steps.extern-cache.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/libs-base/archive/refs/tags/base-1_28_0.tar.gz
        tar -xzf base-1_28_0.tar.gz
        cd libs-base-base-1_28_0
        ./configure --prefix=$HOME/extern --disable-tls --disable-xslt ${{ matrix.platform.configureflags }}
        make install
        ls -al $HOME/extern/*

    - name: Cache Rust
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/
          target/
        key: cargo-${{ matrix.name }}-${{ hashFiles('**/Cargo.toml') }}

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust.toolchain || 'stable' }}
        profile: minimal
        override: true
        components: ${{ matrix.rust.components || 'clippy' }}
        # Allows installing for a different base target
        target: ${{ matrix.rust.target || matrix.target }}

    - name: Install Cargo Dinghy
      if: matrix.dinghy && steps.extern-cache.outputs.cache-hit != 'true'
      # TODO: Replace once cargo dinghy gets updated
      # cargo install cargo-dinghy --version=^0.4 --root=$HOME/extern --target=x86_64-apple-darwin
      run: cargo install --git https://github.com/madsmtm/dinghy.git --branch update-cargo --bin cargo-dinghy --root=$HOME/extern --target=x86_64-apple-darwin

    - name: Lint
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        # Temporarily allow `clippy::let_unit_value`
        args: ${{ env.ARGS }} --all-targets -- --deny warnings --allow clippy::let_unit_value

    - name: Build
      if: ${{ !matrix.dinghy }}
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: ${{ env.ARGS }}

    - name: Check documentation
      if: ${{ !matrix.dinghy }}
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: ${{ env.ARGS }} --no-deps --document-private-items

    - name: Test without features
      if: ${{ !matrix.dinghy }}
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: ${{ env.ARGS }} ${{ env.TESTARGS }}

    - name: Test with features
      if: ${{ !matrix.dinghy }}
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: ${{ env.ARGS }} ${{ env.TESTARGS }} --features ${{ env.FEATURES }}

    - name: Test in release mode without features
      if: ${{ !matrix.dinghy }}
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: ${{ env.ARGS }} ${{ env.TESTARGS }} --release

    - name: Test in release mode with features
      if: ${{ !matrix.dinghy }}
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: ${{ env.ARGS }} ${{ env.TESTARGS }} --features ${{ env.FEATURES }} --release

    - name: Run benchmarks
      # Difficult to install Valgrind on macOS
      # See https://github.com/LouisBrunner/valgrind-macos
      if: contains(matrix.os, 'ubuntu')
      uses: actions-rs/cargo@v1
      with:
        command: bench
        args: ${{ env.ARGS }} ${{ env.TESTARGS }}

    - name: Test with unstable features
      if: ${{ !matrix.dinghy && matrix.rust.toolchain == 'nightly' }}
      uses: actions-rs/cargo@v1
      with:
        command: test
        # Not using --all-features because that would enable e.g. gnustep
        args: ${{ env.ARGS }} ${{ env.TESTARGS }} --features ${{ env.FEATURES }},${{ env.UNSTABLE_FEATURES }}

    - name: Run assembly tests
      # Not run on GNUStep yet since a lot of function labels are mangled and
      # not inlined (and hence quite hard to match on, at some point we'll
      # need to find a solution to that).
      if: ${{ !contains(matrix.os, 'ubuntu') }}
      shell: bash
      run:
        export HOST_TARGET=$(rustc -vV | grep host | cut -f2 -d' ')

        cargo run ${{ env.HOSTARGS }} --features assembly --target=$HOST_TARGET test_assembly ${{ env.ARGS }}

    - name: Launch XCode Simulator
      if: matrix.dinghy
      run: |
        # Get system info
        xcrun simctl list runtimes

        # Launch the simulator
        RUNTIME_ID=$(xcrun simctl list runtimes | grep iOS | cut -d ' ' -f 7 | tail -1)
        export SIM_ID=$(xcrun simctl create My-iphone7 com.apple.CoreSimulator.SimDeviceType.iPhone-7 $RUNTIME_ID)
        xcrun simctl boot $SIM_ID

    - name: Build w. Cargo Dinghy
      if: matrix.dinghy
      run: cargo dinghy --device=$SIM_ID build ${{ matrix.args }}

    - name: Test w. Cargo Dinghy
      if: matrix.dinghy
      # Note that we're not testing more complex configurations, since that
      # takes a very long time to run in CI, and that impedes general
      # development work.
      run: cargo dinghy --device=$SIM_ID test ${{ matrix.args }}
