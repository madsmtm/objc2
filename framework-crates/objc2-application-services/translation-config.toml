framework = "ApplicationServices"
crate = "objc2-application-services"
required-crates = ["objc2-core-foundation"]
custom-lib-rs = true
macos = "10.0"
maccatalyst = "13.0"

# Headers say that these are "private".
module.ATS.skipped = true
module.QD.skipped = true
# Maybe private?
module.ATSUI.skipped = true
# Replaced by AVFoundation
module.SpeechSynthesis.skipped = true

# Uses `ppd_file_s` from cups/pdd.h
protocol.PDEPlugInCallbackProtocol.methods.ppdFile.skipped = true

# Uses NSView, which requires NSResponder, which this `extern` declaration can't represent yet.
external.NSView.module = "AppKit.NSView"
protocol.PDEPanel.methods.panelView.skipped = true

# Mapped as `false`, would need a cast to int to work.
const.kPMUnlocked.use-value = true

# Needs AliasRecord/FSSpec/FSRef from CoreServices.CarbonCore.Files
struct.ICFileSpec.skipped = true
typedef.ICFileSpecPtr.skipped = true
typedef.ICFileSpecHandle.skipped = true
fn.GetProcessBundleLocation.skipped = true
fn.TranslationPerformForFile.skipped = true
struct.LaunchParamBlockRec.skipped = true
typedef.LaunchPBPtr.skipped = true
fn.LaunchApplication.skipped = true
struct.ProcessInfoRec.skipped = true
typedef.ProcessInfoRecPtr.skipped = true
fn.GetProcessInformation.skipped = true
struct.ProcessInfoExtendedRec.skipped = true
typedef.ProcessInfoExtendedRecPtr.skipped = true

# Needs VersRec from MacTypes.h
fn.PMPrinterGetDriverReleaseInfo.skipped = true

# Uses constants from CoreServices.CarbonCore.MacErrors
const.kPMNoError.use-value = true
const.kPMInvalidParameter.use-value = true
const.kPMAllocationFailure.use-value = true

# Overflows
const.kProcessDictionaryIncludeAllInformationMask.skipped = true

# Uses `sizeof`
const.kICFileSpecHeaderSize.skipped = true
const.extendedBlockLen.skipped = true

# Needs ApplicationServices.QD
fn.HIShapeCreateWithQDRgn.skipped = true
fn.HIShapeGetAsQDRgn.skipped = true
fn.PlotIconRefInContext.skipped = true

# Deprecated and only defined on 32-bit architectures
fn.HIShapeSetQDClip.skipped = true
typedef.IconGetter.skipped = true
typedef.IconAction.skipped = true
struct.CIcon.skipped = true
typedef.CIcon.skipped = true
typedef.CIconPtr.skipped = true
typedef.CIconHandle.skipped = true
typedef.IconSuiteRef.skipped = true
typedef.IconCacheRef.skipped = true
fn.GetCIcon.skipped = true
fn.PlotCIcon.skipped = true
fn.DisposeCIcon.skipped = true
fn.GetIcon.skipped = true
fn.PlotIcon.skipped = true
fn.PlotIconID.skipped = true
fn.NewIconSuite.skipped = true
fn.AddIconToSuite.skipped = true
fn.GetIconFromSuite.skipped = true
fn.ForEachIconDo.skipped = true
fn.GetIconSuite.skipped = true
fn.DisposeIconSuite.skipped = true
fn.PlotIconSuite.skipped = true
fn.MakeIconCache.skipped = true
fn.LoadIconCache.skipped = true
fn.PlotIconMethod.skipped = true
fn.GetLabel.skipped = true
fn.PtInIconID.skipped = true
fn.PtInIconSuite.skipped = true
fn.PtInIconMethod.skipped = true
fn.RectInIconID.skipped = true
fn.RectInIconSuite.skipped = true
fn.RectInIconMethod.skipped = true
fn.IconIDToRgn.skipped = true
fn.IconSuiteToRgn.skipped = true
fn.IconMethodToRgn.skipped = true
fn.SetSuiteLabel.skipped = true
fn.GetSuiteLabel.skipped = true
fn.GetIconCacheData.skipped = true
fn.SetIconCacheData.skipped = true
fn.GetIconCacheProc.skipped = true
fn.SetIconCacheProc.skipped = true
fn.PlotIconHandle.skipped = true
fn.PlotSICNHandle.skipped = true
fn.PlotCIconHandle.skipped = true
fn.IconFamilyToIconSuite.skipped = true
fn.IconSuiteToIconFamily.skipped = true
fn.PlotIconRef.skipped = true
fn.PtInIconRef.skipped = true
fn.RectInIconRef.skipped = true
fn.IconRefToRgn.skipped = true
fn.GetIconSizesFromIconRef.skipped = true
struct.ICDirSpec.skipped = true
typedef.ICDirSpecArray.skipped = true
typedef.ICDirSpecArrayPtr.skipped = true

# Conflicting names non-"Create" variants.
fn.HIShapeCreateDifference.renamed = "create_difference"
fn.HIShapeCreateUnion.renamed = "create_union"
fn.HIShapeCreateXor.renamed = "create_xor"

##
## Safety
##

# TODO: Unsure if the run loop source must be sendable?
# https://github.com/madsmtm/objc2/issues/696
fn.AXObserverGetRunLoopSource.unsafe = true
