framework = "Network"
crate = "objc2-network"
required-crates = ["objc2", "objc2-foundation"]
custom-lib-rs = true
flags = [
    # Generate nw_release/nw_retain
    "-DOS_OBJECT_USE_OBJC_RETAIN_RELEASE=1",
]

macos = "10.14"
maccatalyst = "13.0"
ios = "12.0"
tvos = "12.0"
watchos = "6.0"
visionos = "1.0"

# Enum generated with integer identifiers
const.nw_ip_version_any.renamed = "any"
const.nw_ip_version_4.renamed = "v4"
const.nw_ip_version_6.renamed = "v6"

# Enum generated with integer identifiers
const.nw_multipath_version_unspecified.renamed = "unspecified"
const.nw_multipath_version_0.renamed = "v0"
const.nw_multipath_version_1.renamed = "v1"

# Enum generated with integer identifiers
const.nw_ws_version_invalid.renamed = "invalid"
const.nw_ws_version_13.renamed = "v13"

# We custom-define these instead.
typedef.nw_object_t.skipped = true
protocol.OS_nw_object.skipped = true

typedef.nw_advertise_descriptor_t.skipped = true
protocol.OS_nw_advertise_descriptor.skipped = true

# browse_descriptor.h
typedef.nw_browse_descriptor_t.skipped = true
protocol.OS_nw_browse_descriptor.skipped = true

# browse_result.h
typedef.nw_browse_result_t.skipped = true
protocol.OS_nw_browse_result.skipped = true

# browser.h
typedef.nw_browser_t.skipped = true
protocol.OS_nw_browser.skipped = true

# content_context.h
typedef.nw_content_context_t.skipped = true
protocol.OS_nw_content_context.skipped = true

# endpoint.h
typedef.nw_endpoint_t.skipped = true
protocol.OS_nw_endpoint.skipped = true

# error.h
typedef.nw_error_t.skipped = true
protocol.OS_nw_error.skipped = true

# ethernet_channel.h
typedef.nw_ethernet_channel_t.skipped = true
protocol.OS_nw_ethernet_channel.skipped = true

# framer_options.h
typedef.nw_framer_t.skipped = true
protocol.OS_nw_framer.skipped = true

# group_descriptor.h
typedef.nw_group_descriptor_t.skipped = true
protocol.OS_nw_group_descriptor.skipped = true

# connection_group.h
typedef.nw_connection_group_t.skipped = true
protocol.OS_nw_connection_group.skipped = true

# interface.h
typedef.nw_interface_t.skipped = true
protocol.OS_nw_interface.skipped = true

# listener.h
typedef.nw_listener_t.skipped = true
protocol.OS_nw_listener.skipped = true

# parameters.h
typedef.nw_parameters_t.skipped = true
protocol.OS_nw_parameters.skipped = true
typedef.nw_protocol_stack_t.skipped = true
protocol.OS_nw_protocol_stack.skipped = true

# path_monitor.h
typedef.nw_path_monitor_t.skipped = true
protocol.OS_nw_path_monitor.skipped = true

# path.h
typedef.nw_path_t.skipped = true
protocol.OS_nw_path.skipped = true

# privacy_context.h
typedef.nw_privacy_context_t.skipped = true
protocol.OS_nw_privacy_context.skipped = true

# protocol_options.h
typedef.nw_protocol_definition_t.skipped = true
protocol.OS_nw_protocol_definition.skipped = true
typedef.nw_protocol_options_t.skipped = true
protocol.OS_nw_protocol_options.skipped = true
typedef.nw_protocol_metadata_t.skipped = true
protocol.OS_nw_protocol_metadata.skipped = true

# connection_report.h
typedef.nw_establishment_report_t.skipped = true
protocol.OS_nw_establishment_report.skipped = true
typedef.nw_resolution_report_t.skipped = true
protocol.OS_nw_resolution_report.skipped = true
typedef.nw_data_transfer_report_t.skipped = true
protocol.OS_nw_data_transfer_report.skipped = true

# proxy_config.h
typedef.nw_proxy_config_t.skipped = true
protocol.OS_nw_proxy_config.skipped = true
typedef.nw_relay_hop_t.skipped = true
protocol.OS_nw_relay_hop.skipped = true

# resolver_config.h
typedef.nw_resolver_config_t.skipped = true
protocol.OS_nw_resolver_config.skipped = true

# txt_record.h
typedef.nw_txt_record_t.skipped = true
protocol.OS_nw_txt_record.skipped = true

# connection.h
typedef.nw_connection_t.skipped = true
protocol.OS_nw_connection.skipped = true

# ws_options.h
typedef.nw_ws_request_t.skipped = true
protocol.OS_nw_ws_request.skipped = true
typedef.nw_ws_response_t.skipped = true
protocol.OS_nw_ws_response.skipped = true
