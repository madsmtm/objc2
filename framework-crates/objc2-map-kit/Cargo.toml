# This file has been automatically generated by `objc2`'s `header-translator`.
# DO NOT EDIT

[package]
name = "objc2-map-kit"
version.workspace = true
description = "Bindings to the MapKit framework"
edition.workspace = true
rust-version.workspace = true
keywords = ["cocoa", "apple", "framework", "macos", "ios"]
categories.workspace = true
repository.workspace = true
license.workspace = true

[lints]
workspace = true

[dependencies]
bitflags = { workspace = true, optional = true, features = ["std"] }
block2 = { workspace = true, optional = true, features = ["alloc"] }
dispatch2 = { workspace = true, optional = true, features = [
    "alloc",
    "objc2",
] }
objc2 = { workspace = true, features = ["std"] }
objc2-core-foundation = { workspace = true, optional = true, features = [
    "CFCGTypes",
    "objc2",
] }
objc2-core-graphics = { workspace = true, optional = true, features = [
    "CGContext",
    "CGPath",
    "objc2",
] }
objc2-core-location = { workspace = true, optional = true, features = [
    "CLHeading",
    "CLLocation",
    "CLPlacemark",
] }
objc2-foundation = { workspace = true, features = ["alloc"] }

[target.'cfg(target_os = "macos")'.dependencies]
objc2-app-kit = { workspace = true, optional = true, features = [
    "NSAccessibilityProtocols",
    "NSAnimation",
    "NSAppearance",
    "NSColor",
    "NSDragging",
    "NSImage",
    "NSKeyValueBinding",
    "NSNib",
    "NSResponder",
    "NSStoryboardSegue",
    "NSUserInterfaceItemIdentification",
    "NSView",
    "NSViewController",
] }

[target.'cfg(not(target_os = "tvos"))'.dependencies]
objc2-contacts = { workspace = true, optional = true, features = ["CNPostalAddress"] }

[package.metadata.docs.rs]
default-target = "aarch64-apple-darwin"
rustc-args = ["--cfg", "docsrs"] # Fix cross-crate link to objc2::topics
targets = [
    "aarch64-apple-darwin",
    "x86_64-apple-darwin",
    "aarch64-apple-ios",
    "aarch64-apple-tvos",
    "aarch64-apple-watchos",
    "aarch64-apple-ios-macabi",
    "aarch64-apple-visionos",
]

[features]
default = [
    "std",
    "MKAddress",
    "MKAddressFilter",
    "MKAddressRepresentations",
    "MKAnnotation",
    "MKAnnotationView",
    "MKCircle",
    "MKCircleRenderer",
    "MKClusterAnnotation",
    "MKCompassButton",
    "MKDirections",
    "MKDirectionsRequest",
    "MKDirectionsResponse",
    "MKDirectionsTypes",
    "MKDistanceFormatter",
    "MKFoundation",
    "MKGeoJSONSerialization",
    "MKGeocodingRequest",
    "MKGeodesicPolyline",
    "MKGeometry",
    "MKGradientPolylineRenderer",
    "MKHybridMapConfiguration",
    "MKImageryMapConfiguration",
    "MKLocalPointsOfInterestRequest",
    "MKLocalSearch",
    "MKLocalSearchCompleter",
    "MKLocalSearchRequest",
    "MKLocalSearchResponse",
    "MKLookAroundScene",
    "MKLookAroundSceneRequest",
    "MKLookAroundSnapshot",
    "MKLookAroundSnapshotOptions",
    "MKLookAroundSnapshotter",
    "MKLookAroundViewController",
    "MKMapCamera",
    "MKMapCameraBoundary",
    "MKMapCameraZoomRange",
    "MKMapConfiguration",
    "MKMapItem",
    "MKMapItemAnnotation",
    "MKMapItemDetailViewController",
    "MKMapItemIdentifier",
    "MKMapItemRequest",
    "MKMapSnapshot",
    "MKMapSnapshotOptions",
    "MKMapSnapshotter",
    "MKMapView",
    "MKMarkerAnnotationView",
    "MKMultiPoint",
    "MKMultiPolygon",
    "MKMultiPolygonRenderer",
    "MKMultiPolyline",
    "MKMultiPolylineRenderer",
    "MKOverlay",
    "MKOverlayPathRenderer",
    "MKOverlayRenderer",
    "MKPinAnnotationView",
    "MKPitchControl",
    "MKPlacemark",
    "MKPointAnnotation",
    "MKPointOfInterestCategory",
    "MKPointOfInterestFilter",
    "MKPolygon",
    "MKPolygonRenderer",
    "MKPolyline",
    "MKPolylineRenderer",
    "MKReverseGeocodingRequest",
    "MKSelectionAccessory",
    "MKShape",
    "MKStandardMapConfiguration",
    "MKTileOverlay",
    "MKTileOverlayRenderer",
    "MKTypes",
    "MKUserLocation",
    "MKUserLocationView",
    "MKZoomControl",
    "NSUserActivity_MKMapItem",
    "bitflags",
    "block2",
    "dispatch2",
    "objc2-app-kit",
    "objc2-contacts",
    "objc2-core-foundation",
    "objc2-core-graphics",
    "objc2-core-location",
]
std = ["alloc"]
alloc = []
bitflags = ["dep:bitflags"]
block2 = ["dep:block2"]
dispatch2 = ["dep:dispatch2"]
objc2-app-kit = ["dep:objc2-app-kit"]
objc2-contacts = ["dep:objc2-contacts"]
objc2-core-foundation = ["dep:objc2-core-foundation"]
objc2-core-graphics = ["dep:objc2-core-graphics"]
objc2-core-location = ["dep:objc2-core-location"]

MKAddress = ["objc2-foundation/NSString"]
MKAddressFilter = [
    "bitflags",
    "objc2-foundation/NSObject",
]
MKAddressRepresentations = ["objc2-foundation/NSString"]
MKAnnotation = ["objc2-foundation/NSString"]
MKAnnotationView = [
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSGeometry",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
    "objc2-foundation/objc2-core-foundation",
]
MKCircle = []
MKCircleRenderer = []
MKClusterAnnotation = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSString",
]
MKCompassButton = [
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSGeometry",
    "objc2-foundation/NSObject",
    "objc2-foundation/objc2-core-foundation",
]
MKDirections = ["objc2-foundation/NSError"]
MKDirectionsRequest = [
    "objc2-foundation/NSDate",
    "objc2-foundation/NSURL",
]
MKDirectionsResponse = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSDate",
    "objc2-foundation/NSString",
]
MKDirectionsTypes = ["bitflags"]
MKDistanceFormatter = [
    "objc2-foundation/NSFormatter",
    "objc2-foundation/NSLocale",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
]
MKFoundation = []
MKGeoJSONSerialization = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSData",
    "objc2-foundation/NSError",
    "objc2-foundation/NSString",
]
MKGeocodingRequest = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSError",
    "objc2-foundation/NSLocale",
    "objc2-foundation/NSString",
]
MKGeodesicPolyline = []
MKGeometry = ["objc2-foundation/NSValue"]
MKGradientPolylineRenderer = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSValue",
]
MKHybridMapConfiguration = ["objc2-foundation/NSObject"]
MKImageryMapConfiguration = ["objc2-foundation/NSObject"]
MKLocalPointsOfInterestRequest = ["objc2-foundation/NSObject"]
MKLocalSearch = ["objc2-foundation/NSError"]
MKLocalSearchCompleter = [
    "bitflags",
    "objc2-foundation/NSArray",
    "objc2-foundation/NSError",
    "objc2-foundation/NSString",
    "objc2-foundation/NSValue",
]
MKLocalSearchRequest = [
    "bitflags",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
]
MKLocalSearchResponse = ["objc2-foundation/NSArray"]
MKLookAroundScene = ["objc2-foundation/NSObject"]
MKLookAroundSceneRequest = ["objc2-foundation/NSError"]
MKLookAroundSnapshot = []
MKLookAroundSnapshotOptions = []
MKLookAroundSnapshotter = ["objc2-foundation/NSError"]
MKLookAroundViewController = [
    "objc2-foundation/NSBundle",
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
]
MKMapCamera = ["objc2-foundation/NSObject"]
MKMapCameraBoundary = [
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSObject",
]
MKMapCameraZoomRange = ["objc2-foundation/NSObject"]
MKMapConfiguration = ["objc2-foundation/NSObject"]
MKMapItem = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSDictionary",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSSet",
    "objc2-foundation/NSString",
    "objc2-foundation/NSTimeZone",
    "objc2-foundation/NSURL",
]
MKMapItemAnnotation = []
MKMapItemDetailViewController = [
    "objc2-foundation/NSBundle",
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSObject",
]
MKMapItemIdentifier = [
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
]
MKMapItemRequest = ["objc2-foundation/NSError"]
MKMapSnapshot = [
    "objc2-foundation/NSGeometry",
    "objc2-foundation/objc2-core-foundation",
]
MKMapSnapshotOptions = [
    "objc2-foundation/NSGeometry",
    "objc2-foundation/NSObject",
    "objc2-foundation/objc2-core-foundation",
]
MKMapSnapshotter = ["objc2-foundation/NSError"]
MKMapView = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSError",
    "objc2-foundation/NSGeometry",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSSet",
    "objc2-foundation/NSString",
    "objc2-foundation/objc2-core-foundation",
]
MKMarkerAnnotationView = [
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSGeometry",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
    "objc2-foundation/objc2-core-foundation",
]
MKMultiPoint = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSIndexSet",
    "objc2-foundation/NSRange",
    "objc2-foundation/NSValue",
]
MKMultiPolygon = ["objc2-foundation/NSArray"]
MKMultiPolygonRenderer = []
MKMultiPolyline = ["objc2-foundation/NSArray"]
MKMultiPolylineRenderer = []
MKOverlay = []
MKOverlayPathRenderer = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSValue",
]
MKOverlayRenderer = []
MKPinAnnotationView = [
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSGeometry",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
    "objc2-foundation/objc2-core-foundation",
]
MKPitchControl = [
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSGeometry",
    "objc2-foundation/NSObject",
    "objc2-foundation/objc2-core-foundation",
]
MKPlacemark = [
    "objc2-foundation/NSDictionary",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
]
MKPointAnnotation = ["objc2-foundation/NSString"]
MKPointOfInterestCategory = ["objc2-foundation/NSString"]
MKPointOfInterestFilter = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
]
MKPolygon = ["objc2-foundation/NSArray"]
MKPolygonRenderer = []
MKPolyline = []
MKPolylineRenderer = []
MKReverseGeocodingRequest = [
    "objc2-foundation/NSArray",
    "objc2-foundation/NSError",
    "objc2-foundation/NSLocale",
]
MKSelectionAccessory = []
MKShape = ["objc2-foundation/NSString"]
MKStandardMapConfiguration = ["objc2-foundation/NSObject"]
MKTileOverlay = [
    "objc2-foundation/NSData",
    "objc2-foundation/NSError",
    "objc2-foundation/NSString",
    "objc2-foundation/NSURL",
]
MKTileOverlayRenderer = []
MKTypes = ["objc2-foundation/NSString"]
MKUserLocation = ["objc2-foundation/NSString"]
MKUserLocationView = [
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSGeometry",
    "objc2-foundation/NSObject",
    "objc2-foundation/NSString",
    "objc2-foundation/objc2-core-foundation",
]
MKZoomControl = [
    "objc2-foundation/NSCoder",
    "objc2-foundation/NSGeometry",
    "objc2-foundation/NSObject",
    "objc2-foundation/objc2-core-foundation",
]
NSUserActivity_MKMapItem = ["objc2-foundation/NSUserActivity"]
