error: must specify the desired selector using `#[unsafe(method(...))]` or `#[unsafe(method_id(...))]`
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct NoAttribute;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_method_attributes_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: must specify the desired selector using `#[unsafe(method(...))]` or `#[unsafe(method_id(...))]`
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct NoAttribute;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_method_attributes_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot specify the `method`/`method_id` attribute twice
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct DuplicateAttributes;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__handle_duplicate` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot specify the `method`/`method_id` attribute twice
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct DuplicateAttributes;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__handle_duplicate` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot specify the `method`/`method_id` attribute twice
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct DuplicateAttributes;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__handle_duplicate` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot specify the `method`/`method_id` attribute twice
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct DuplicateAttributes;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__handle_duplicate` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[unsafe(method_id(alloc))]` is not supported. Use `#[unsafe(method(alloc))]` and do the memory management yourself
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct BadSelectors;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[unsafe(method_id(retain))]` is not supported. Use `#[unsafe(method(retain))]` and do the memory management yourself
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct BadSelectors;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[unsafe(method_id(release))]` is not supported. Use `#[unsafe(method(release))]` and do the memory management yourself
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct BadSelectors;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[unsafe(method_id(autorelease))]` is not supported. Use `#[unsafe(method(autorelease))]` and do the memory management yourself
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct BadSelectors;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[unsafe(method_id(dealloc))]` is not supported. Implement `Drop` for the type instead
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct BadSelectors;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[unsafe(method(dealloc))]` is not supported. Implement `Drop` for the type instead
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct BadSelectors;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_invalid_selectors` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[unsafe(method_id(...))]` must have a return type
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct InvalidRetain;
... |
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__define_class_method_out_inner` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected expression, found `}`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_invalid_body() { a - }
  |                                      ^ expected expression

error: no rules expected `(`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_pattern((a, b): (u32, i32)) {
  |                         ^ no rules expected this token in macro call
  |
  = note: while trying to match sequence start

error: unexpected end of macro invocation
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_self(self) {
  |                          ^ missing tokens in macro arguments
  |
note: while trying to match `:`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/register_impls.rs
  |
  |         $param:ident : $param_ty:ty $(, $($rest:tt)*)?
  |                      ^

error: expected identifier, found keyword `fn`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn fn test_fn_fn() {}
  |            ^^ expected identifier, found keyword

error: missing parameters for function definition
   --> ui/define_class_invalid_syntax.rs
    |
    |         fn fn test_fn_fn() {}
    |              ^
    |
help: add a parameter list
    |
123 |         fn fn() test_fn_fn() {}
    |              ++

error: expected one of `->`, `<`, `where`, or `{`, found `test_fn_fn`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn fn test_fn_fn() {}
  |               ^^^^^^^^^^ expected one of `->`, `<`, `where`, or `{`
  |
 ::: $WORKSPACE/crates/objc2/src/__macros/define_class/register_impls.rs
  |
  |         $_associated_item:item
  |         ---------------------- while parsing argument for this `item` macro fragment

error: expected one of `->`, `where`, or `{`, found `<eof>`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_unfinished()
  |                            ^ expected one of `->`, `where`, or `{`
  |
 ::: $WORKSPACE/crates/objc2/src/__macros/define_class/register_impls.rs
  |
  |         $_associated_item:item
  |         ---------------------- while parsing argument for this `item` macro fragment

error: an inner attribute is not permitted in this context
 --> ui/define_class_invalid_syntax.rs
  |
  |         #![doc = "inner_attribute"]
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files
  = note: outer attributes, like `#[test]`, annotate the item following them

error: expected an item keyword
 --> ui/define_class_invalid_syntax.rs
  |
  |         #![doc = "inner_attribute"]
  |                                   ^
  |
 ::: $WORKSPACE/crates/objc2/src/__macros/define_class/register_impls.rs
  |
  |         $_associated_item:item
  |         ---------------------- while parsing argument for this `item` macro fragment

error: no rules expected `(`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_pattern((a, b): (u32, i32)) {
  |                         ^ no rules expected this token in macro call
  |
note: while trying to match reserved identifier `_`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         (_ : $param_ty:ty $(, $($params_rest:tt)*)?)
  |          ^

error: no rules expected `)`
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[unsafe(super(NSObject))]
  | |     struct BasicBadSyntax;
... |
  | | );
  | |_^ no rules expected this token in macro call
  |
note: while trying to match `:`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         ($param:ident : $param_ty:ty $(, $($params_rest:tt)*)?)
  |                       ^
  = note: this error originates in the macro `$crate::__define_class_method_out` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: no rules expected keyword `pub`
 --> ui/define_class_invalid_syntax.rs
  |
  |         pub fn test_pub() {}
  |         ^^^ no rules expected this token in macro call
  |
note: while trying to match keyword `unsafe`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         unsafe fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |         ^^^^^^

error: no rules expected keyword `const`
 --> ui/define_class_invalid_syntax.rs
  |
  |         const fn test_const() {}
  |         ^^^^^ no rules expected this token in macro call
  |
note: while trying to match keyword `unsafe`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         unsafe fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |         ^^^^^^

error: no rules expected keyword `async`
 --> ui/define_class_invalid_syntax.rs
  |
  |         async fn test_async() {}
  |         ^^^^^ no rules expected this token in macro call
  |
note: while trying to match keyword `unsafe`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         unsafe fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |         ^^^^^^

error: no rules expected keyword `extern`
 --> ui/define_class_invalid_syntax.rs
  |
  |         extern "C" fn test_extern() {}
  |         ^^^^^^ no rules expected this token in macro call
  |
note: while trying to match keyword `unsafe`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         unsafe fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |         ^^^^^^

error: no rules expected `test_fn_fn`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn fn test_fn_fn() {}
  |               ^^^^^^^^^^ no rules expected this token in macro call
  |
note: while trying to match `(`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |                       ^

error: no rules expected `<`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_generic<T>() {}
  |                        ^ no rules expected this token in macro call
  |
note: while trying to match `(`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |                       ^

error: no rules expected `;`
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_no_body(&self);
  |                               ^ no rules expected this token in macro call
  |
note: while trying to match meta-variable `$body:block`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |                                                       ^^^^^^^^^^^

error: unexpected end of macro invocation
 --> ui/define_class_invalid_syntax.rs
  |
  |         fn test_unfinished()
  |                             ^ missing tokens in macro arguments
  |
note: while trying to match meta-variable `$body:block`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         fn $name:ident($($params:tt)*) $(-> $ret:ty)? $body:block
  |                                                       ^^^^^^^^^^^

error: no rules expected `!`
 --> ui/define_class_invalid_syntax.rs
  |
  |         #![doc = "inner_attribute"]
  |          ^ no rules expected this token in macro call
  |
note: while trying to match `[`
 --> $WORKSPACE/crates/objc2/src/__macros/define_class/output_impls.rs
  |
  |         $(#[$($m:tt)*])*
  |            ^

error: no rules expected keyword `type`
 --> ui/define_class_invalid_syntax.rs
  |
  |         type TypeAlias = Self;
  |         ^^^^ no rules expected this token in macro call
  |
  = note: while trying to match end of macro

error: no rules expected keyword `const`
 --> ui/define_class_invalid_syntax.rs
  |
  |         const CONSTANT: () = ();
  |         ^^^^^ no rules expected this token in macro call
  |
  = note: while trying to match end of macro

error: must specify the superclass with #[unsafe(super(...))]
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     struct MissingSuper;
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extern_class_check_super_unsafe` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: #[super(...)] must be wrapped in `unsafe`, as in #[unsafe(super(...))]
 --> ui/define_class_invalid_syntax.rs
  |
  | / define_class!(
  | |     #[super(NSObject)]
  | |     struct SafeSuper;
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extern_class_check_super_unsafe` which comes from the expansion of the macro `define_class` (in Nightly builds, run with -Z macro-backtrace for more info)
