error: must specify the desired selector using `#[method(...)]` or `#[method_id(...)]`
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_custom_attributes_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected expression, found `}`
 --> ui/declare_class_invalid_syntax.rs
  |
  |         }
  |         ^ expected expression

error: no rules expected the token `(`
 --> ui/declare_class_invalid_syntax.rs
  |
  |         fn test_pattern((a, b): (u32, i32)) {
  |                         ^ no rules expected this token in macro call
  |
  = note: while trying to match sequence start

error: unexpected end of macro invocation
 --> ui/declare_class_invalid_syntax.rs
  |
  |         fn test_self(self) {
  |                          ^ missing tokens in macro arguments
  |
note: while trying to match `:`
 --> $WORKSPACE/crates/objc2/src/macros/declare_class.rs
  |
  |         $param:ident : $param_ty:ty $(, $($rest:tt)*)?
  |                      ^

error: no rules expected the token `pub`
 --> ui/declare_class_invalid_syntax.rs
  |
  |         pub fn test_pub() {}
  |         ^^^ no rules expected this token in macro call
  |
note: while trying to match `unsafe`
 --> $WORKSPACE/crates/objc2/src/macros/declare_class.rs
  |
  |         unsafe fn $name:ident($($args:tt)*) $(-> $ret:ty)? $body:block
  |         ^^^^^^

error: no rules expected the token `;`
 --> ui/declare_class_invalid_syntax.rs
  |
  |         fn test_no_body(&self);
  |                               ^ no rules expected this token in macro call
  |
note: while trying to match meta-variable `$body:block`
 --> $WORKSPACE/crates/objc2/src/macros/declare_class.rs
  |
  |         fn $name:ident($($args:tt)*) $(-> $ret:ty)? $body:block
  |                                                     ^^^^^^^^^^^

error: `#[method_id(alloc)]` is not supported. Use `#[method(alloc)]` and do the memory management yourself
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__get_method_id_sel` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(retain)]` is not supported. Use `#[method(retain)]` and do the memory management yourself
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__get_method_id_sel` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(release)]` is not supported. Use `#[method(release)]` and do the memory management yourself
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__get_method_id_sel` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(autorelease)]` is not supported. Use `#[method(autorelease)]` and do the memory management yourself
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__get_method_id_sel` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(dealloc)]` is not supported. Add an instance variable with a `Drop` impl to the class instead
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__get_method_id_sel` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method(dealloc)]` is not supported. Implement `Drop` for the type instead
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__declare_class_register_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: must specify the desired selector using `#[method(...)]` or `#[method_id(...)]`
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__extract_custom_attributes_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `#[method_id(...)]` must have a return type
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__declare_class_method_out_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: no rules expected the token `(`
 --> ui/declare_class_invalid_syntax.rs
  |
  |         fn test_pattern((a, b): (u32, i32)) {
  |                         ^ no rules expected this token in macro call
  |
note: while trying to match `_`
 --> $WORKSPACE/crates/objc2/src/macros/declare_class.rs
  |
  |         (_ : $param_ty:ty $(, $($rest_args:tt)*)?)
  |          ^

error: no rules expected the token `)`
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ no rules expected this token in macro call
  |
note: while trying to match `:`
 --> $WORKSPACE/crates/objc2/src/macros/declare_class.rs
  |
  |         ($param:ident : $param_ty:ty $(, $($rest_args:tt)*)?)
  |                       ^
  = note: this error originates in the macro `$crate::__declare_class_method_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: no rules expected the token `}`
 --> ui/declare_class_invalid_syntax.rs
  |
  |     }
  |     ^ no rules expected this token in macro call
  |
note: while trying to match `const`
 --> $WORKSPACE/crates/objc2/src/macros/declare_class.rs
  |
  |             const NAME: &'static str = $name_const:expr;
  |             ^^^^^

error: invalid type i32 in field field. Type must be either `PhantomData`, `IvarDrop`, `IvarBool` or `IvarEncode`.
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct InvalidField {
  | |         field: i32,
  | |     }
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__parse_fields` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: no rules expected the token `mod`
 --> ui/declare_class_invalid_syntax.rs
  |
  |     mod ivars;
  |     ^^^ no rules expected this token in macro call
  |
note: while trying to match `unsafe`
 --> $WORKSPACE/crates/objc2/src/macros/declare_class.rs
  |
  |         unsafe impl ClassType for $for:ty {
  |         ^^^^^^

error: no need to specify an ivar module when the type has no ivars
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct UnnecessaryIvarModuleWithFields {
  | |         p: PhantomData<i32>,
  | |     }
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__parse_fields` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: must specify an ivar module when the type has ivars
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct MissingIvarModule {
  | |         field: IvarEncode<i32, "_field">,
  | |     }
... |
  | |     }
  | | );
  | |_^
  |
  = note: this error originates in the macro `$crate::__parse_fields` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error: no rules expected the token `}`
 --> ui/declare_class_invalid_syntax.rs
  |
  |     }
  |     ^ no rules expected this token in macro call
  |
note: while trying to match `type`
 --> $WORKSPACE/crates/objc2/src/macros/declare_class.rs
  |
  |             type Mutability = $mutability:ty;
  |             ^^^^

error[E0599]: no function or associated item named `test_pattern` found for struct `CustomObject` in the current scope
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |         fn test_pattern((a, b): (u32, i32)) {
  | |            ^^^^^^^^^^^^ function or associated item not found in `CustomObject`
... |
  | |     }
  | | );
  | |_- function or associated item `test_pattern` not found for this struct

error[E0599]: no function or associated item named `test_self` found for struct `CustomObject` in the current scope
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |         fn test_self(self) {
  | |            ^^^^^^^^^ function or associated item not found in `CustomObject`
... |
  | |     }
  | | );
  | |_- function or associated item `test_self` not found for this struct

error[E0277]: the trait bound `RetainSemantics<2>: MessageRecieveId<&objc2::runtime::Class, Id<CustomObject>>` is not satisfied
 --> ui/declare_class_invalid_syntax.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `MessageRecieveId<&objc2::runtime::Class, Id<CustomObject>>` is not implemented for `RetainSemantics<2>`
  |
  = help: the following other types implement trait `MessageRecieveId<Receiver, Ret>`:
            <RetainSemantics<1> as MessageRecieveId<Receiver, Ret>>
            <RetainSemantics<3> as MessageRecieveId<Allocated<T>, Ret>>
            <RetainSemantics<4> as MessageRecieveId<Receiver, Ret>>
            <RetainSemantics<5> as MessageRecieveId<Receiver, Ret>>
  = note: this error originates in the macro `$crate::__declare_class_method_out_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)
