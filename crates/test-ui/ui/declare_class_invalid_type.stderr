error[E0277]: the trait bound `Retained<CustomObject>: EncodeReturn` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `Retained<CustomObject>`, which is required by `Retained<CustomObject>: __macro_helpers::convert::return_private::Sealed`
  |
  = help: the trait `EncodeReturn` is implemented for `()`
  = note: required for `Retained<CustomObject>` to implement `EncodeReturn`
  = note: required for `Retained<CustomObject>` to implement `__macro_helpers::convert::return_private::Sealed`
note: required by a bound in `ConvertReturn`
 --> $WORKSPACE/crates/objc2/src/__macro_helpers/convert.rs
  |
  | pub trait ConvertReturn: return_private::Sealed {
  |                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ConvertReturn`
  = note: `ConvertReturn` is a "sealed trait", because to implement it you also need to implement `objc2::__macro_helpers::convert::return_private::Sealed`, which is not accessible; this is usually done to force you to use one of the provided types that already implement it
  = help: the following types implement the trait:
            bool
            T
  = note: this error originates in the macro `$crate::__declare_class_method_out_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Vec<()>: EncodeReturn` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `Vec<()>`, which is required by `Vec<()>: __macro_helpers::convert::return_private::Sealed`
  |
  = help: the trait `EncodeReturn` is implemented for `()`
  = note: required for `Vec<()>` to implement `EncodeReturn`
  = note: required for `Vec<()>` to implement `__macro_helpers::convert::return_private::Sealed`
note: required by a bound in `ConvertReturn`
 --> $WORKSPACE/crates/objc2/src/__macro_helpers/convert.rs
  |
  | pub trait ConvertReturn: return_private::Sealed {
  |                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ConvertReturn`
  = note: `ConvertReturn` is a "sealed trait", because to implement it you also need to implement `objc2::__macro_helpers::convert::return_private::Sealed`, which is not accessible; this is usually done to force you to use one of the provided types that already implement it
  = help: the following types implement the trait:
            bool
            T
  = note: this error originates in the macro `$crate::__declare_class_method_out_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Box<u32>: EncodeArgument` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `Box<u32>`, which is required by `Box<u32>: __macro_helpers::convert::argument_private::Sealed`
  |
  = help: the following other types implement trait `__macro_helpers::convert::argument_private::Sealed`:
            &mut Option<Retained<T>>
            &mut Retained<T>
            Option<&mut Option<Retained<T>>>
            Option<&mut Retained<T>>
            bool
  = note: required for `Box<u32>` to implement `EncodeArgument`
  = note: required for `Box<u32>` to implement `__macro_helpers::convert::argument_private::Sealed`
note: required by a bound in `ConvertArgument`
 --> $WORKSPACE/crates/objc2/src/__macro_helpers/convert.rs
  |
  | pub trait ConvertArgument: argument_private::Sealed {
  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ConvertArgument`
  = note: `ConvertArgument` is a "sealed trait", because to implement it you also need to implement `objc2::__macro_helpers::convert::argument_private::Sealed`, which is not accessible; this is usually done to force you to use one of the provided types that already implement it
  = help: the following types implement the trait:
            std::option::Option<&mut std::option::Option<objc2::rc::Retained<T>>>
            std::option::Option<&mut objc2::rc::Retained<T>>
            &mut objc2::rc::Retained<T>
            &mut std::option::Option<objc2::rc::Retained<T>>
            bool
            T
  = note: this error originates in the macro `$crate::__declare_class_rewrite_params` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CustomObject: EncodeArgument` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `CustomObject`, which is required by `CustomObject: __macro_helpers::convert::argument_private::Sealed`
  |
  = help: the following other types implement trait `__macro_helpers::convert::argument_private::Sealed`:
            &mut Option<Retained<T>>
            &mut Retained<T>
            Option<&mut Option<Retained<T>>>
            Option<&mut Retained<T>>
            bool
  = note: required for `CustomObject` to implement `EncodeArgument`
  = note: required for `CustomObject` to implement `__macro_helpers::convert::argument_private::Sealed`
note: required by a bound in `ConvertArgument`
 --> $WORKSPACE/crates/objc2/src/__macro_helpers/convert.rs
  |
  | pub trait ConvertArgument: argument_private::Sealed {
  |                            ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ConvertArgument`
  = note: `ConvertArgument` is a "sealed trait", because to implement it you also need to implement `objc2::__macro_helpers::convert::argument_private::Sealed`, which is not accessible; this is usually done to force you to use one of the provided types that already implement it
  = help: the following types implement the trait:
            std::option::Option<&mut std::option::Option<objc2::rc::Retained<T>>>
            std::option::Option<&mut objc2::rc::Retained<T>>
            &mut objc2::rc::Retained<T>
            &mut std::option::Option<objc2::rc::Retained<T>>
            bool
            T
  = note: this error originates in the macro `$crate::__declare_class_rewrite_params` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Retained<CustomObject>: EncodeReturn` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `Retained<CustomObject>`, which is required by `Retained<CustomObject>: ConvertReturn`
  |
  = help: the trait `EncodeReturn` is implemented for `()`
  = note: required for `Retained<CustomObject>` to implement `EncodeReturn`
  = note: required for `Retained<CustomObject>` to implement `ConvertReturn`
  = note: this error originates in the macro `$crate::__declare_class_register_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Retained<CustomObject>: Encode` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | | ^
  | | |
  | |_the trait `Encode` is not implemented for `Retained<CustomObject>`, which is required by `extern "C" fn(&AnyClass, objc2::runtime::Sel) -> Retained<CustomObject>: MethodImplementation`
  |   required by a bound introduced by this call
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Retained<CustomObject>` to implement `EncodeReturn`
  = note: required for `extern "C" fn(&AnyClass, objc2::runtime::Sel) -> Retained<CustomObject>` to implement `MethodImplementation`
note: required by a bound in `ClassBuilderHelper::<T>::add_class_method`
 --> $WORKSPACE/crates/objc2/src/__macro_helpers/declare_class.rs
  |
  |     pub unsafe fn add_class_method<F>(&mut self, sel: Sel, func: F)
  |                   ---------------- required by a bound in this associated function
  |     where
  |         F: MethodImplementation<Callee = AnyClass>,
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ClassBuilderHelper::<T>::add_class_method`
  = note: this error originates in the macro `$crate::__declare_class_register_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Vec<()>: EncodeReturn` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `Vec<()>`, which is required by `Vec<()>: ConvertReturn`
  |
  = help: the trait `EncodeReturn` is implemented for `()`
  = note: required for `Vec<()>` to implement `EncodeReturn`
  = note: required for `Vec<()>` to implement `ConvertReturn`
  = note: this error originates in the macro `$crate::__declare_class_register_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Vec<()>: Encode` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | | ^
  | | |
  | |_the trait `Encode` is not implemented for `Vec<()>`, which is required by `extern "C" fn(&AnyClass, objc2::runtime::Sel) -> Vec<()>: MethodImplementation`
  |   required by a bound introduced by this call
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Vec<()>` to implement `EncodeReturn`
  = note: required for `extern "C" fn(&AnyClass, objc2::runtime::Sel) -> Vec<()>` to implement `MethodImplementation`
note: required by a bound in `ClassBuilderHelper::<T>::add_class_method`
 --> $WORKSPACE/crates/objc2/src/__macro_helpers/declare_class.rs
  |
  |     pub unsafe fn add_class_method<F>(&mut self, sel: Sel, func: F)
  |                   ---------------- required by a bound in this associated function
  |     where
  |         F: MethodImplementation<Callee = AnyClass>,
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ClassBuilderHelper::<T>::add_class_method`
  = note: this error originates in the macro `$crate::__declare_class_register_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Box<u32>: EncodeArgument` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `Box<u32>`, which is required by `Box<u32>: ConvertArgument`
  |
  = help: the following other types implement trait `ConvertArgument`:
            &mut Option<Retained<T>>
            &mut Retained<T>
            Option<&mut Option<Retained<T>>>
            Option<&mut Retained<T>>
            bool
  = note: required for `Box<u32>` to implement `EncodeArgument`
  = note: required for `Box<u32>` to implement `ConvertArgument`
  = note: this error originates in the macro `$crate::__declare_class_register_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Box<u32>: Encode` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | | ^
  | | |
  | |_the trait `Encode` is not implemented for `Box<u32>`, which is required by `extern "C" fn(&CustomObject, objc2::runtime::Sel, Box<u32>): MethodImplementation`
  |   required by a bound introduced by this call
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `Box<u32>` to implement `EncodeArgument`
  = note: required for `extern "C" fn(&CustomObject, objc2::runtime::Sel, Box<u32>)` to implement `MethodImplementation`
note: required by a bound in `ClassBuilderHelper::<T>::add_method`
 --> $WORKSPACE/crates/objc2/src/__macro_helpers/declare_class.rs
  |
  |     pub unsafe fn add_method<F>(&mut self, sel: Sel, func: F)
  |                   ---------- required by a bound in this associated function
  |     where
  |         F: MethodImplementation<Callee = T>,
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ClassBuilderHelper::<T>::add_method`
  = note: this error originates in the macro `$crate::__declare_class_register_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CustomObject: EncodeArgument` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `CustomObject`, which is required by `CustomObject: ConvertArgument`
  |
  = help: the following other types implement trait `ConvertArgument`:
            &mut Option<Retained<T>>
            &mut Retained<T>
            Option<&mut Option<Retained<T>>>
            Option<&mut Retained<T>>
            bool
  = note: required for `CustomObject` to implement `EncodeArgument`
  = note: required for `CustomObject` to implement `ConvertArgument`
  = note: this error originates in the macro `$crate::__declare_class_register_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CustomObject: Encode` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | | ^
  | | |
  | |_the trait `Encode` is not implemented for `CustomObject`, which is required by `extern "C" fn(&CustomObject, objc2::runtime::Sel, CustomObject): MethodImplementation`
  |   required by a bound introduced by this call
  |
  = help: the following other types implement trait `Encode`:
            &'a T
            &'a mut T
            *const T
            *mut T
            AtomicI16
            AtomicI32
            AtomicI64
            AtomicI8
          and $N others
  = note: required for `CustomObject` to implement `EncodeArgument`
  = note: required for `extern "C" fn(&CustomObject, objc2::runtime::Sel, CustomObject)` to implement `MethodImplementation`
note: required by a bound in `ClassBuilderHelper::<T>::add_method`
 --> $WORKSPACE/crates/objc2/src/__macro_helpers/declare_class.rs
  |
  |     pub unsafe fn add_method<F>(&mut self, sel: Sel, func: F)
  |                   ---------- required by a bound in this associated function
  |     where
  |         F: MethodImplementation<Callee = T>,
  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ClassBuilderHelper::<T>::add_method`
  = note: this error originates in the macro `$crate::__declare_class_register_out` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Retained<CustomObject>: EncodeReturn` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `Retained<CustomObject>`, which is required by `Retained<CustomObject>: ConvertReturn`
  |
  = help: the trait `EncodeReturn` is implemented for `()`
  = note: required for `Retained<CustomObject>` to implement `EncodeReturn`
  = note: required for `Retained<CustomObject>` to implement `ConvertReturn`
  = note: this error originates in the macro `$crate::__declare_class_method_out_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Vec<()>: EncodeReturn` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `Vec<()>`, which is required by `Vec<()>: ConvertReturn`
  |
  = help: the trait `EncodeReturn` is implemented for `()`
  = note: required for `Vec<()>` to implement `EncodeReturn`
  = note: required for `Vec<()>` to implement `ConvertReturn`
  = note: this error originates in the macro `$crate::__declare_class_method_out_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Box<u32>: EncodeArgument` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `Box<u32>`, which is required by `Box<u32>: ConvertArgument`
  |
  = help: the following other types implement trait `ConvertArgument`:
            &mut Option<Retained<T>>
            &mut Retained<T>
            Option<&mut Option<Retained<T>>>
            Option<&mut Retained<T>>
            bool
  = note: required for `Box<u32>` to implement `EncodeArgument`
  = note: required for `Box<u32>` to implement `ConvertArgument`
  = note: this error originates in the macro `$crate::__declare_class_method_out_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CustomObject: EncodeArgument` is not satisfied
 --> ui/declare_class_invalid_type.rs
  |
  | / declare_class!(
  | |     struct CustomObject;
  | |
  | |     unsafe impl ClassType for CustomObject {
... |
  | |     }
  | | );
  | |_^ the trait `Encode` is not implemented for `CustomObject`, which is required by `CustomObject: ConvertArgument`
  |
  = help: the following other types implement trait `ConvertArgument`:
            &mut Option<Retained<T>>
            &mut Retained<T>
            Option<&mut Option<Retained<T>>>
            Option<&mut Retained<T>>
            bool
  = note: required for `CustomObject` to implement `EncodeArgument`
  = note: required for `CustomObject` to implement `ConvertArgument`
  = note: this error originates in the macro `$crate::__declare_class_method_out_inner` which comes from the expansion of the macro `declare_class` (in Nightly builds, run with -Z macro-backtrace for more info)
