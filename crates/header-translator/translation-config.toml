### Various fixes that we need to do because our translation is imperfect.

###
### Libraries
###

[library.Accessibility]
imports = ["Foundation"]
macos = "11.0"
maccatalyst = "14.0"
ios = "14.0"
tvos = "14.0"
watchos = "7.0"

[library.AdServices]
imports = ["Foundation"]
macos = "11.1"
maccatalyst = "14.3"
ios = "14.3"

[library.AdSupport]
imports = ["Foundation"]
macos = "10.14"
maccatalyst = "13.0"
ios = "6.0"
tvos = "9.0"

[library.AppKit]
imports = ["CoreData", "Foundation"]
cfg-apple-link = true
macos = "10.0"
maccatalyst = "13.0"

[library.AuthenticationServices]
imports = ["AppKit", "Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "12.0"
tvos = "13.0"
watchos = "6.0"

[library.AutomaticAssessmentConfiguration]
imports = ["Foundation"]
macos = "10.15.4"
maccatalyst = "13.4"
ios = "13.4"

[library.Automator]
imports = ["AppKit", "Foundation", "OSAKit"]
macos = "10.4"
maccatalyst = "14.0"

[library.BackgroundAssets]
imports = ["Foundation"]
macos = "13.0"
maccatalyst = "16.0"
ios = "16.0"

[library.BackgroundTasks]
imports = ["Foundation"]
maccatalyst = "13.0"
ios = "13.0"
tvos = "13.0"

[library.BusinessChat]
imports = ["AppKit", "Foundation"]
macos = "10.14"
maccatalyst = "13.0"               # Unsure
ios = "11.0"                       # Unsure

[library.CallKit]
imports = ["Foundation"]
macos = "13.0"
maccatalyst = "13.0"
ios = "10.0"
watchos = "9.0"

[library.ClassKit]
imports = ["Foundation"]
macos = "11.0"
maccatalyst = "14.0"
ios = "11.4"

[library.CloudKit]
imports = ["CoreLocation", "Foundation"]
macos = "10.10"
maccatalyst = "13.0"
ios = "8.0"
tvos = "9.0"
watchos = "3.0"

[library.Contacts]
imports = ["Foundation"]
macos = "10.11"
maccatalyst = "13.0"
ios = "9.0"
watchos = "2.0"

[library.CoreData]
imports = ["Foundation"]
cfg-apple-link = true
macos = "10.4"
maccatalyst = "13.0"
ios = "3.0"
tvos = "9.0"
watchos = "2.0"

[library.CoreLocation]
imports = ["Contacts", "Foundation"]
# macos = "10.6"
macos = "10.11"      # Temporarily raised since `CoreLocation` imports `Contacts`
maccatalyst = "13.0"
ios = "2.0"
tvos = "9.0"
watchos = "2.0"

[library.CoreWLAN]
imports = ["Foundation"]
macos = "10.6"

[library.DataDetection]
imports = ["Foundation"]
macos = "12.0"
maccatalyst = "15.0"
ios = "15.0"
tvos = "15.0"
watchos = "8.0"

[library.DeviceCheck]
imports = ["Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "11.0"
tvos = "11.0"
watchos = "9.0"

[library.EventKit]
imports = ["AppKit", "CoreLocation", "Foundation", "MapKit"]
macos = "10.8"
maccatalyst = "13.0"
ios = "4.0"
watchos = "2.0"

[library.ExceptionHandling]
imports = ["Foundation"]
macos = "10.0"
maccatalyst = "13.0"

[library.ExtensionKit]
imports = ["AppKit", "Foundation"]
macos = "13.0"
maccatalyst = "13.0"
ios = "16.1"
tvos = "16.0"
watchos = "9.0"

[library.ExternalAccessory]
imports = ["Foundation"]
macos = "10.13"
maccatalyst = "16.0"
ios = "3.0"
tvos = "10.0"

[library.FileProvider]
imports = ["AppKit", "Foundation", "UniformTypeIdentifiers"]
macos = "10.15"
ios = "11.0"

[library.FileProviderUI]
imports = ["AppKit", "FileProvider", "Foundation"]
macos = "10.15"
maccatalyst = "15.0"
ios = "11.0"

[library.Foundation]
imports = []
cfg-apple-link = true
extra-features = [
    "objc2",
    "block2",
    # Ord, Debug and other such fundamental impls requires these.
    "Foundation_NSObjCRuntime",
    # Some fmt::Debug impls require these
    "Foundation_NSString",
    "Foundation_NSDictionary",
    "Foundation_NSEnumerator",
]
macos = "10.0"
maccatalyst = "13.0"
ios = "2.0"
tvos = "9.0"
watchos = "2.0"

[library.GameController]
imports = ["AppKit", "Foundation"]
macos = "10.9"
maccatalyst = "13.0"
ios = "7.0"
tvos = "9.0"

[library.GameKit]
imports = ["AppKit", "Foundation"]
macos = "10.8"
maccatalyst = "13.0"
ios = "3.0"
tvos = "9.0"
watchos = "3.0"

[library.HealthKit]
imports = ["CoreLocation", "Foundation", "UniformTypeIdentifiers"]
macos = "13.0"
maccatalyst = "13.0"
ios = "8.0"
watchos = "2.0"

[library.IdentityLookup]
imports = ["Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "11.0"

[library.InputMethodKit]
imports = ["AppKit", "Foundation"]
macos = "10.5"
maccatalyst = "13.0"

[library.LocalAuthentication]
imports = ["Foundation"]
macos = "10.10"
maccatalyst = "13.0"
ios = "8.0"
watchos = "9.0"

[library.LocalAuthenticationEmbeddedUI]
imports = ["AppKit", "Foundation", "LocalAuthentication"]
macos = "12.0"
maccatalyst = "16.0"
ios = "16.0"

[library.LinkPresentation]
imports = ["AppKit", "Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "13.0"
tvos = "14.0"

[library.MailKit]
imports = ["AppKit", "Foundation"]
macos = "12.0"

[library.MapKit]
imports = ["AppKit", "Contacts", "CoreLocation", "Foundation"]
macos = "10.9"
maccatalyst = "13.0"
ios = "3.0"
tvos = "9.2"
watchos = "2.0"

[library.MediaPlayer]
imports = ["AppKit", "Foundation"]
macos = "10.12.1"
maccatalyst = "13.0"
ios = "2.0"
tvos = "9.0"
watchos = "5.0"

[library.Metal]
imports = ["Foundation"]
macos = "10.11"
maccatalyst = "13.0"
ios = "8.0"
tvos = "9.0"


[library.MetalPerformanceShaders]
imports = ["Foundation", "Metal"]
macos = "13.0"
maccatalyst = "16.0"
ios = "16.0"


[library.MetalFX]
imports = ["Foundation", "Metal"]
macos = "13.0"
maccatalyst = "16.0"
ios = "16.0"

[library.MetalKit]
imports = ["AppKit", "Foundation", "Metal"]
macos = "10.11"
maccatalyst = "13.0"
ios = "9.0"
tvos = "9.0"

[library.MetricKit]
imports = ["Foundation"]
macos = "12.0"
maccatalyst = "13.0"
ios = "13.0"

[library.Photos]
imports = ["AppKit", "CoreLocation", "Foundation", "UniformTypeIdentifiers"]
macos = "10.11"
maccatalyst = "13.0"
ios = "8.0"
tvos = "10.0"
watchos = "9.0"

[library.OSAKit]
imports = ["AppKit", "Foundation"]
macos = "10.4"

[library.QuartzCore]
imports = ["Foundation"]
macos = "10.3"
maccatalyst = "13.0"
ios = "2.0"
tvos = "9.0"

[library.ServiceManagement]
imports = ["Foundation"]
macos = "10.6"
maccatalyst = "13.0"
ios = "12.1"
tvos = "12.1"
watchos = "5.1"

[library.SoundAnalysis]
imports = ["Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "13.0"
tvos = "13.0"
watchos = "9.0"

[library.Speech]
imports = ["Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "10.0"

[library.StoreKit]
imports = ["AppKit", "Foundation"]
macos = "10.7"
maccatalyst = "13.0"
ios = "3.0"
tvos = "9.0"
watchos = "6.2"

[library.UniformTypeIdentifiers]
imports = ["Foundation"]
macos = "11.0"
maccatalyst = "14.0"
ios = "14.0"
tvos = "14.0"
watchos = "7.0"

[library.UserNotifications]
imports = ["CoreLocation", "Foundation"]
macos = "10.14"
maccatalyst = "13.0"
ios = "10.0"
tvos = "10.0"
watchos = "3.0"

[library.WebKit]
imports = ["AppKit", "Foundation"]
macos = "10.2"
maccatalyst = "13.0"
ios = "16.0"

###
### Attributes that change a function/method's calling convention.
###
### The following should be handled automatically:
### - `ns_returns_not_retained` / `cf_returns_not_retained` / `os_returns_not_retained`
### - `ns_returns_retained` / `cf_returns_retained` / `os_returns_retained`
###
### The rest are only very rarely used in Apple's frameworks, so while we
### _could_ handle them too, I think it's easier to do it manually.
###
### See https://clang.llvm.org/docs/AttributeReference.html
###

# `ns_consumed`, `cf_consumed` and `os_consumed`
[fn.CFAutorelease]
skipped = true
[fn.CFBridgingRelease]
skipped = true
[fn.NSMakeCollectable]
skipped = true
[fn.NSFreeMapTable]
skipped = true
[fn.IOServiceGetMatchingService]
skipped = true
[fn.IOServiceGetMatchingServices]
skipped = true
[fn.IOServiceAddMatchingNotification]
skipped = true
[fn.CVOpenGLBufferRelease]
skipped = true
[fn.CVDisplayLinkRelease]
skipped = true
[fn.CVOpenGLBufferPoolRelease]
skipped = true
[fn.CVOpenGLTextureRelease]
skipped = true
[fn.CVPixelBufferPoolRelease]
skipped = true
[fn.CVPixelBufferRelease]
skipped = true
[fn.CVOpenGLTextureCacheRelease]
skipped = true
[fn.CVBufferRelease]
skipped = true
[protocol.NSKeyedUnarchiverDelegate.methods."unarchiver:didDecodeObject:"]
skipped = true
# + a few methods from DriverKit.framework and Kernel.framework, but those
# are written in C++, so we're not going to ever handle them anyhow.

# `ns_consumes_self` and `os_consumes_this`
[class.NSObject.methods."awakeAfterUsingCoder:"]
skipped = true

# `ns_returns_autoreleased`
# Not ever used

# `objc_method_family`
[class.ABNewPersonViewController.methods.newPersonViewDelegate]
skipped = true

# `objc_ownership` in .apinotes
[class.NSBundle.methods."loadNibNamed:owner:topLevelObjects:"]
skipped = true
[class.NSNib.methods."instantiateWithOwner:topLevelObjects:"]
skipped = true

# Return type `oneway void`
[class.NSObject.methods.release]
skipped = true
[class.NSPasteboard.methods.releaseGlobally]
skipped = true
[class.NSView.methods.releaseGState]
skipped = true
# + some more in IMServicePlugIn.framework

###
### Lifetime annotations that we don't handle yet.
###

# Uses `SomeObject * __strong *`, which is unsupported
[class.NSNetService.methods."getInputStream:outputStream:"]
skipped = true
[class.NSPropertyListSerialization.methods]
"dataFromPropertyList:format:errorDescription:" = { skipped = true }
"propertyListFromData:mutabilityOption:format:errorDescription:" = { skipped = true }
[fn.MTLCopyAllDevicesWithObserver]
skipped = true

# Uses `__autoreleasing` in a typedef, which I'm unsure how to handle
[typedef.MTLAutoreleasedArgument]
skipped = true
[protocol.MTLFunction.methods."newArgumentEncoderWithBufferIndex:reflection:"]
skipped = true
[typedef.MTLAutoreleasedRenderPipelineReflection]
skipped = true
[typedef.MTLAutoreleasedComputePipelineReflection]
skipped = true
[protocol.MTLDevice.methods]
"newRenderPipelineStateWithDescriptor:options:reflection:error:" = { skipped = true }
"newComputePipelineStateWithFunction:options:reflection:error:" = { skipped = true }
"newComputePipelineStateWithDescriptor:options:reflection:error:" = { skipped = true }
"newRenderPipelineStateWithTileDescriptor:options:reflection:error:" = { skipped = true }
"newRenderPipelineStateWithMeshDescriptor:options:reflection:error:" = { skipped = true }

# Uses NS_RETURNS_NOT_RETAINED on a `NSString*`
[class.DOMMutationEvent.methods.newValue]
skipped = true

###
### Others
###

[class.NSBlockOperation.methods]
# Uses `NSArray<void (^)(void)>`, which is difficult to handle
executionBlocks = { skipped = true }

# These use `Class<NSItemProvider...>`, which is unsupported
[class.NSItemProvider.methods]
"registerObjectOfClass:visibility:loadHandler:" = { skipped = true }
"canLoadObjectOfClass:" = { skipped = true }
"loadObjectOfClass:completionHandler:" = { skipped = true }

# Has `error:` parameter, but returns NSInteger (where 0 means error)
[class.NSJSONSerialization.methods."writeJSONObject:toStream:options:error:"]
skipped = true
[class.NSPropertyListSerialization.methods."writePropertyList:toStream:format:options:error:"]
skipped = true
[class.NSManagedObjectContext.methods]
"countForFetchRequest:error:" = { skipped = true }

# Not supported on clang 11.0.0
[class.NSBundle.methods."localizedAttributedStringForKey:value:table:"]
skipped = true

# Root class, defined in `objc2` for now
[class.NSProxy]
skipped = true

[protocol.NSObject]
renamed = "NSObjectProtocol"

# Defined in `objc2` instead
[typedef.NSZone]
skipped = true

# Contains bitfields
[struct.NSDecimal]
skipped = true

# Uses `c_ulong` which means we need to specify the encoding manually.
[struct.NSFastEnumerationState]
skipped = true

# Uses stuff from core Darwin libraries which we have not yet mapped
[class.NSAppleEventDescriptor.methods]
"descriptorWithDescriptorType:bytes:length:" = { skipped = true }
"descriptorWithDescriptorType:data:" = { skipped = true }
"appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:" = { skipped = true }
"descriptorWithProcessIdentifier:" = { skipped = true }
"initWithAEDescNoCopy:" = { skipped = true }
"initWithDescriptorType:bytes:length:" = { skipped = true }
"initWithDescriptorType:data:" = { skipped = true }
"initWithEventClass:eventID:targetDescriptor:returnID:transactionID:" = { skipped = true }
"setParamDescriptor:forKeyword:" = { skipped = true }
"paramDescriptorForKeyword:" = { skipped = true }
"removeParamDescriptorWithKeyword:" = { skipped = true }
"setAttributeDescriptor:forKeyword:" = { skipped = true }
"attributeDescriptorForKeyword:" = { skipped = true }
"sendEventWithOptions:timeout:error:" = { skipped = true }
"setDescriptor:forKeyword:" = { skipped = true }
"descriptorForKeyword:" = { skipped = true }
"removeDescriptorWithKeyword:" = { skipped = true }
"keywordForDescriptorAtIndex:" = { skipped = true }
"coerceToDescriptorType:" = { skipped = true }
aeDesc = { skipped = true }
descriptorType = { skipped = true }
eventClass = { skipped = true }
eventID = { skipped = true }
returnID = { skipped = true }
transactionID = { skipped = true }
[class.NSAppleEventManager.methods]
"setEventHandler:andSelector:forEventClass:andEventID:" = { skipped = true }
"removeEventHandlerForEventClass:andEventID:" = { skipped = true }
"dispatchRawAppleEvent:withRawReply:handlerRefCon:" = { skipped = true }
[class.NSOperationQueue.methods.underlyingQueue]
skipped = true
[class.NSOperationQueue.methods."setUnderlyingQueue:"]
skipped = true
[class.NSRunLoop.methods.getCFRunLoop]
skipped = true
[class.NSURLCredential.methods]
"initWithIdentity:certificates:persistence:" = { skipped = true }
"credentialWithIdentity:certificates:persistence:" = { skipped = true }
"initWithTrust:" = { skipped = true }
"credentialForTrust:" = { skipped = true }
[class.NSURLCredential.methods.identity]
skipped = true
[class.NSURLProtectionSpace.methods.serverTrust]
skipped = true
[class.NSURLSessionConfiguration.methods]
TLSMinimumSupportedProtocol = { skipped = true }
"setTLSMinimumSupportedProtocol:" = { skipped = true }
TLSMaximumSupportedProtocol = { skipped = true }
"setTLSMaximumSupportedProtocol:" = { skipped = true }
TLSMinimumSupportedProtocolVersion = { skipped = true }
"setTLSMinimumSupportedProtocolVersion:" = { skipped = true }
TLSMaximumSupportedProtocolVersion = { skipped = true }
"setTLSMaximumSupportedProtocolVersion:" = { skipped = true }
[class.NSUUID.methods]
"initWithUUIDBytes:" = { skipped = true }
"getUUIDBytes:" = { skipped = true }
[class.NSXPCConnection.methods]
auditSessionIdentifier = { skipped = true }
processIdentifier = { skipped = true }
effectiveUserIdentifier = { skipped = true }
effectiveGroupIdentifier = { skipped = true }
[class.NSXPCInterface.methods]
"setXPCType:forSelector:argumentIndex:ofReply:" = { skipped = true }
"XPCTypeForSelector:argumentIndex:ofReply:" = { skipped = true }
[class.NSXPCCoder.methods]
"encodeXPCObject:forKey:" = { skipped = true }
"decodeXPCObjectOfType:forKey:" = { skipped = true }

# Uses constants from CoreFoundation or similar frameworks
[enum.NSAppleEventSendOptions]
use-value = true
[enum.NSCalendarUnit]
use-value = true
[enum.NSDateFormatterStyle]
use-value = true
[enum.NSISO8601DateFormatOptions]
use-value = true
[enum.NSLocaleLanguageDirection]
use-value = true
[enum.NSNumberFormatterStyle]
use-value = true
[enum.NSNumberFormatterPadPosition]
use-value = true
[enum.NSNumberFormatterRoundingMode]
use-value = true
[enum.NSPropertyListMutabilityOptions]
use-value = true
[enum.NSPropertyListFormat]
use-value = true
[enum.anonymous.constants.NS_UnknownByteOrder]
skipped = true
[enum.anonymous.constants.NS_LittleEndian]
skipped = true
[enum.anonymous.constants.NS_BigEndian]
skipped = true

# Uses va_list
[class.NSAttributedString.methods."initWithFormat:options:locale:arguments:"]
skipped = true
[class.NSException.methods."raise:format:arguments:"]
skipped = true
[class.NSExpression.methods."expressionWithFormat:arguments:"]
skipped = true
[class.NSPredicate.methods."predicateWithFormat:arguments:"]
skipped = true
[class.NSString.methods."initWithFormat:arguments:"]
skipped = true
[class.NSString.methods."initWithFormat:locale:arguments:"]
skipped = true
[class.NSString.methods."initWithValidatedFormat:validFormatSpecifiers:arguments:error:"]
skipped = true
[class.NSString.methods."initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:"]
skipped = true
[class.NSAttributedString.methods."initWithFormat:options:locale:context:arguments:"]
skipped = true
[class.NSMutableAttributedString.methods."initWithFormat:options:locale:context:arguments:"]
skipped = true
[fn.NSLogv]
skipped = true

# Wrong type compared to value
[enum.anonymous.constants.NSWrapCalendarComponents]
skipped = true

# Uses NSImage, which is only available in AppKit
[class.NSUserNotification.methods.contentImage]
skipped = true
[class.NSUserNotification.methods."setContentImage:"]
skipped = true

# Uses , which is only available in CoreAnimation
[class.NSView.methods."displayLinkWithTarget:selector:"]
skipped = true
[class.NSWindow.methods."displayLinkWithTarget:selector:"]
skipped = true
[class.NSScreen.methods."displayLinkWithTarget:selector:"]
skipped = true

# Outlier that really should have been part of the original enum
[enum.anonymous.constants.NSProprietaryStringEncoding]
skipped = true

# Has the wrong generic parameter
[class.NSDictionary.methods]
"initWithContentsOfURL:error:" = { skipped = true }
"dictionaryWithContentsOfURL:error:" = { skipped = true }

# Custom implementation for now
[struct._NSRange]
skipped = true
[typedef.NSRange]
skipped = true
[enum.NSComparisonResult]
skipped = true

# Different definitions on 32-bit
[typedef.NSPoint]
skipped = true
[struct.NSPoint]
skipped = true
[typedef.NSSize]
skipped = true
[struct.NSSize]
skipped = true
[typedef.NSRect]
skipped = true
[struct.NSRect]
skipped = true

# References CGRectEdge
[enum.NSRectEdge]
skipped = true
[enum.anonymous.constants.NSRectEdgeMinX]
skipped = true
[enum.anonymous.constants.NSRectEdgeMinY]
skipped = true
[enum.anonymous.constants.NSRectEdgeMaxX]
skipped = true
[enum.anonymous.constants.NSRectEdgeMaxY]
skipped = true
[enum.anonymous.constants.NSMinXEdge]
skipped = true
[enum.anonymous.constants.NSMinYEdge]
skipped = true
[enum.anonymous.constants.NSMaxXEdge]
skipped = true
[enum.anonymous.constants.NSMaxYEdge]
skipped = true

# We do a custom implementation of these
[protocol.NSCopying]
skipped = true
[protocol.NSMutableCopying]
skipped = true

# Our implementation of superclass methods currently place them in the wrong
# module, so we do this hack for now.
[class.NSMutableAttributedString.methods]
"initWithURL:options:documentAttributes:error:" = { skipped = true }
"initWithData:options:documentAttributes:error:" = { skipped = true }
"initWithRTF:documentAttributes:" = { skipped = true }
"initWithRTFD:documentAttributes:" = { skipped = true }
"initWithHTML:documentAttributes:" = { skipped = true }
"initWithHTML:baseURL:documentAttributes:" = { skipped = true }
"initWithDocFormat:documentAttributes:" = { skipped = true }
"initWithHTML:options:documentAttributes:" = { skipped = true }
"initWithRTFDFileWrapper:documentAttributes:" = { skipped = true }
"initWithURL:documentAttributes:" = { skipped = true }
"initWithPath:documentAttributes:" = { skipped = true }

# Uses a bit of complex feature testing setup, see ASFoundation.h
[typedef.ASPresentationAnchor]
skipped = true
[typedef.ASViewController]
skipped = true
[typedef.ASImage]
skipped = true

# The original superclass typedef is a bit difficult to extract from the
# superclass name, so let's do it manually.
[class.ASCredentialProviderViewController]
definition-skipped = true
[class.ASAccountAuthenticationModificationViewController]
definition-skipped = true

# Specifies superclass as UIControl or NSControl conditionally
[class.ASAuthorizationAppleIDButton]
definition-skipped = true

# Defined in multiple files
[static.NSErrorMergePolicy]
skipped = true
[static.NSMergeByPropertyObjectTrumpMergePolicy]
skipped = true
[static.NSMergeByPropertyStoreTrumpMergePolicy]
skipped = true
[static.NSOverwriteMergePolicy]
skipped = true
[static.NSRollbackMergePolicy]
skipped = true

# Typedef that uses a generic from a class
[typedef.NSCollectionViewDiffableDataSourceItemProvider]
skipped = true
[class.NSCollectionViewDiffableDataSource.methods."initWithCollectionView:itemProvider:"]
skipped = true

# Requires `MainThreadOnly`, which I'm not sure is a good idea here?
[class.NSCollectionViewDiffableDataSource]
skipped-protocols = ["NSCollectionViewDataSource"]
[class.NSManagedObjectContext]
skipped-protocols = ["NSEditor", "NSEditorRegistration"]

# Most methods on these require MainThreadMarker anyhow
[protocol.NSDraggingInfo]
requires-mainthreadonly = true
[protocol.NSBrowserDelegate]
requires-mainthreadonly = true
[protocol.NSSplitViewDelegate]
requires-mainthreadonly = true

# Both protocols and classes
[protocol.NSTextAttachmentCell]
renamed = "NSTextAttachmentCellProtocol"
[protocol.NSAccessibilityElement]
renamed = "NSAccessibilityElementProtocol"

# Protocol that has a typedef defined for it for ease of use
[protocol.NSFileProviderItem]
renamed = "NSFileProviderItemProtocol"

# Both property and method
[class.NSDocument.methods."setDisplayName:"]
skipped = true

# Duplicated method
[class.NSSlider.methods.isVertical]
skipped = true
[class.NSSliderCell.methods.isVertical]
skipped = true
[class.NSGestureRecognizer.methods.state]
skipped = true

# Duplicated property
[class.MTLRasterizationRateLayerDescriptor.methods.sampleCount]
skipped = true
[class.MTLRasterizationRateLayerDescriptor.methods."setSampleCount:"]
skipped = true

# Uses stuff from different frameworks / system libraries
[fn.CFBridgingRetain]
skipped = true
[class.NSAnimationContext.methods.timingFunction]
skipped = true
[class.NSAnimationContext.methods."setTimingFunction:"]
skipped = true
[class.NSBezierPath.methods."appendBezierPathWithCGGlyph:inFont:"]
skipped = true
[class.NSBezierPath.methods."appendBezierPathWithCGGlyphs:count:inFont:"]
skipped = true
[class.NSBezierPath.methods."bezierPathWithCGPath:"]
skipped = true
[class.NSBezierPath.methods.CGPath]
skipped = true
[class.NSBezierPath.methods."setCGPath:"]
skipped = true
[class.NSBitmapImageRep.methods."initWithCGImage:"]
skipped = true
[class.NSBitmapImageRep.methods."initWithCIImage:"]
skipped = true
[class.NSBitmapImageRep.methods.CGImage]
skipped = true
[class.NSColor.methods.CGColor]
skipped = true
[class.NSColor.methods."colorWithCGColor:"]
skipped = true
[class.NSColor.methods."colorWithCIColor:"]
skipped = true
[class.NSColorSpace.methods."initWithCGColorSpace:"]
skipped = true
[class.NSColorSpace.methods.CGColorSpace]
skipped = true
[class.NSCIImageRep]
skipped = true
[class.NSEvent.methods.CGEvent]
skipped = true
[class.NSEvent.methods."eventWithCGEvent:"]
skipped = true
[class.NSFont.methods]
"boundingRectForCGGlyph:" = { skipped = true }
"advancementForCGGlyph:" = { skipped = true }
"getBoundingRects:forCGGlyphs:count:" = { skipped = true }
"getAdvancements:forCGGlyphs:count:" = { skipped = true }
[class.NSGlyphInfo.methods."glyphInfoWithCGGlyph:forFont:baseString:"]
skipped = true
[class.NSGlyphInfo.methods.glyphID]
skipped = true
[class.NSGraphicsContext.methods."graphicsContextWithCGContext:flipped:"]
skipped = true
[class.NSGraphicsContext.methods.CGContext]
skipped = true
[class.NSGraphicsContext.methods.CIContext]
skipped = true
[class.NSImage.methods]
"initWithCGImage:size:" = { skipped = true }
"CGImageForProposedRect:context:hints:" = { skipped = true }
"initWithIconRef:" = { skipped = true }
[class.NSImageRep.methods."CGImageForProposedRect:context:hints:"]
skipped = true
[class.NSItemProvider.methods."registerCloudKitShareWithPreparationHandler:"]
skipped = true
[class.NSItemProvider.methods."registerCloudKitShare:container:"]
skipped = true
[class.NSLayoutManager.methods]
"setGlyphs:properties:characterIndexes:font:forGlyphRange:" = { skipped = true }
"CGGlyphAtIndex:isValidIndex:" = { skipped = true }
"CGGlyphAtIndex:" = { skipped = true }
"getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:" = { skipped = true }
"glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:" = { skipped = true }
"showCGGlyphs:positions:count:font:textMatrix:attributes:inContext:" = { skipped = true }
"showCGGlyphs:positions:count:font:matrix:attributes:inContext:" = { skipped = true }
[class.NSLayoutManagerDelegate.methods."layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:"]
skipped = true
[class.NSMovie.methods."initWithMovie:"]
skipped = true
[class.NSMovie.methods.QTMovie]
skipped = true
[class.NSOpenGLContext]
skipped = true
[class.NSOpenGLLayer]
skipped = true
[class.NSOpenGLPixelFormat]
skipped = true
[class.NSOpenGLPixelBuffer]
skipped = true
[class.NSOpenGLView]
skipped = true
[fn.NSOpenGLSetOption]
skipped = true
[fn.NSOpenGLGetOption]
skipped = true
[fn.NSOpenGLGetVersion]
skipped = true
[class.NSTextLayoutFragment.methods."drawAtPoint:inContext:"]
skipped = true
[class.NSTextLineFragment.methods."drawAtPoint:inContext:"]
skipped = true
[class.NSTextView.methods."quickLookPreviewableItemsInRanges:"]
skipped = true
[class.NSRunningApplication.methods.processIdentifier]
skipped = true
[class.NSRunningApplication.methods."runningApplicationWithProcessIdentifier:"]
skipped = true
[class.NSSavePanel.methods.allowedContentTypes]
skipped = true
[class.NSSavePanel.methods."setAllowedContentTypes:"]
skipped = true
[class.NSView.methods]
layer = { skipped = true }
"setLayer:" = { skipped = true }
backgroundFilters = { skipped = true }
"setBackgroundFilters:" = { skipped = true }
compositingFilter = { skipped = true }
"setCompositingFilter:" = { skipped = true }
contentFilters = { skipped = true }
"setContentFilters:" = { skipped = true }
makeBackingLayer = { skipped = true }
[class.NSObject.methods."layer:shouldInheritContentsScale:fromWindow:"]
skipped = true
[class.NSWorkspace.methods]
"iconForContentType:" = { skipped = true }
"URLForApplicationToOpenContentType:" = { skipped = true }
"URLsForApplicationsToOpenContentType:" = { skipped = true }
"setDefaultApplicationAtURL:toOpenContentType:completionHandler:" = { skipped = true }
[class.NSWorkspaceOpenConfiguration.methods.architecture]
skipped = true
[class.NSWorkspaceOpenConfiguration.methods."setArchitecture:"]
skipped = true
[protocol.NSApplicationDelegate.methods]
"application:handlerForIntent:" = { skipped = true }
"application:userDidAcceptCloudKitShareWithMetadata:" = { skipped = true }
[protocol.NSLayoutManagerDelegate.methods]
"layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:" = { skipped = true }
[protocol.NSCloudSharingServiceDelegate.methods]
"sharingService:didSaveShare:" = { skipped = true }
"sharingService:didStopSharing:" = { skipped = true }
[protocol.NSCloudSharingValidation]
skipped = true
[protocol.NSViewLayerContentScaleDelegate]
skipped = true
[class.NSCoreDataCoreSpotlightDelegate.methods]
"attributeSetForObject:" = { skipped = true }
"searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:" = { skipped = true }
"searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:" = { skipped = true }
[class.NSPersistentCloudKitContainer.methods]
"recordForManagedObjectID:" = { skipped = true }
"recordsForManagedObjectIDs:" = { skipped = true }
"recordIDForManagedObjectID:" = { skipped = true }
"recordIDsForManagedObjectIDs:" = { skipped = true }
[class.NSPersistentCloudKitContainerOptions.methods]
databaseScope = { skipped = true }
"setDatabaseScope:" = { skipped = true }
[protocol.NSFetchedResultsControllerDelegate.methods]
"controller:didChangeContentWithSnapshot:" = { skipped = true }
[class.CAKeyframeAnimation.methods]
path = { skipped = true }
"setPath:" = { skipped = true }
[class.CAShapeLayer.methods]
path = { skipped = true }
"setPath:" = { skipped = true }
fillColor = { skipped = true }
"setFillColor:" = { skipped = true }
strokeColor = { skipped = true }
"setStrokeColor:" = { skipped = true }
[class.CAEmitterCell.methods]
color = { skipped = true }
"setColor:" = { skipped = true }
[class.CALayer.methods]
affineTransform = { skipped = true }
"setAffineTransform:" = { skipped = true }
"drawInContext:" = { skipped = true }
"renderInContext:" = { skipped = true }
backgroundColor = { skipped = true }
"setBackgroundColor:" = { skipped = true }
borderColor = { skipped = true }
"setBorderColor:" = { skipped = true }
shadowColor = { skipped = true }
"setShadowColor:" = { skipped = true }
shadowPath = { skipped = true }
"setShadowPath:" = { skipped = true }
[protocol.CALayerDelegate.methods]
"drawLayer:inContext:" = { skipped = true }
[protocol.CAMetalDrawable]
skipped = true
[class.CAMetalLayer]
skipped = true
[class.CAMetalDisplayLink.methods."initWithMetalLayer:"]
skipped = true # Needs `CAMetalLayer`
[class.CAOpenGLLayer]
skipped = true
[class.CARenderer.methods]
"rendererWithMTLTexture:options:" = { skipped = true }
"setDestination:" = { skipped = true }
"beginFrameAtTime:timeStamp:" = { skipped = true }
[class.CARemoteLayerClient.methods]
"initWithServerPort:" = { skipped = true }
[class.CARemoteLayerServer.methods]
serverPort = { skipped = true }
[class.CAReplicatorLayer.methods]
instanceColor = { skipped = true }
"setInstanceColor:" = { skipped = true }
[class.CATextLayer.methods]
font = { skipped = true }
"setFont:" = { skipped = true }
foregroundColor = { skipped = true }
"setForegroundColor:" = { skipped = true }
[fn.CATransform3DMakeAffineTransform]
skipped = true
[fn.CATransform3DGetAffineTransform]
skipped = true
[class.MTLSharedEventListener.methods."initWithDispatchQueue:"]
skipped = true
[class.MTLSharedEventListener.methods.dispatchQueue]
skipped = true
[protocol.MTLDevice.methods."newLibraryWithData:error:"]
skipped = true
[protocol.MTLDevice.methods."newTextureWithDescriptor:iosurface:plane:"]
skipped = true
[protocol.MTLTexture.methods.iosurface]
skipped = true
[class.ASAuthorizationProviderExtensionLoginManager.methods]
"saveCertificate:keyType:" = { skipped = true }
"copyKeyForKeyType:" = { skipped = true }
"copyIdentityForKeyType:" = { skipped = true }
[class.BGTaskScheduler.methods]
# Needs `dispatch_queue_t`
"registerForTaskWithIdentifier:usingQueue:launchHandler:" = { skipped = true }
[class.AXBrailleMap.methods."presentImage:"]
# Needs `CGImageRef`
skipped = true
[fn.AXNameFromColor]
# Needs `CGColorRef`
skipped = true
[class.CLSContext.methods.thumbnail]
# Needs `CGImageRef`
skipped = true
[class.CLSContext.methods."setThumbnail:"]
# Needs `CGImageRef`
skipped = true
# Needs `CGColorRef`
[class.EKCalendar.methods]
CGColor = { skipped = true }
"setCGColor:" = { skipped = true }
# Needs `TISInputSourceRef` from Carbon (HIToolbox)
[class.IMKCandidates.methods]
"setSelectionKeysKeylayout:" = { skipped = true }
selectionKeysKeylayout = { skipped = true }
# Needs `CGRectEdge`
[fn.MKMapRectDivide]
skipped = true
[class.MKMapSnapshotter.methods]
# Needs `dispatch_queue_t`
"startWithQueue:completionHandler:" = { skipped = true }
[class.MKOverlayPathRenderer.methods]
# Needs `CGLineJoin`
lineJoin = { skipped = true }
"setLineJoin:" = { skipped = true }
# Needs `CGLineCap`
lineCap = { skipped = true }
"setLineCap:" = { skipped = true }
# Needs `CGPathRef`
path = { skipped = true }
"setPath:" = { skipped = true }
# Needs `CGContextRef`
"applyStrokePropertiesToContext:atZoomScale:" = { skipped = true }
"applyFillPropertiesToContext:atZoomScale:" = { skipped = true }
# Needs `CGPathRef` and `CGContextRef`
"strokePath:inContext:" = { skipped = true }
"fillPath:inContext:" = { skipped = true }
[class.MKOverlayRenderer.methods]
# Needs `CGContextRef`
"drawMapRect:zoomScale:inContext:" = { skipped = true }
# Needs `CGBlendMode`
blendMode = { skipped = true }
"setBlendMode:" = { skipped = true }
[class.MTKMeshBuffer.methods]
# Needs `MDLMeshBufferZone` from ModelIO framework
zone = { skipped = true }
# Needs `MDLMeshBufferType` from ModelIO framework
type = { skipped = true }
# Needs `MDLVertexFormat` from ModelIO framework
[fn.MTKModelIOVertexFormatFromMetal]
skipped = true
[fn.MTKMetalVertexFormatFromModelIO]
skipped = true
# Needs `CGImageRef`
[class.MTKTextureLoader.methods."newTextureWithCGImage:options:completionHandler:"]
skipped = true
[class.MTKTextureLoader.methods."newTextureWithCGImage:options:error:"]
skipped = true
[class.MTKView.methods]
# Needs `CGColorSpaceRef`
colorspace = { skipped = true }
"setColorspace:" = { skipped = true }
# Needs `CAMetalDrawable`
[class.MTKView.methods.currentDrawable]
skipped = true
[class.CAMetalDisplayLinkUpdate.methods.drawable]
skipped = true
# Needs `Component` from Core Services / Carbon Core / Component Manager
[class.OSALanguage.methods]
"initWithComponent:" = { skipped = true }
componentInstance = { skipped = true }
[class.OSALanguageInstance.methods.componentInstance]
skipped = true
# Needs `dispatch_queue_t`
[class.CXCallController.methods."initWithQueue:"]
skipped = true
[class.CXCallObserver.methods."setDelegate:queue:"]
skipped = true
[class.CXProvider.methods."setDelegate:queue:"]
skipped = true
# Needs `dispatch_queue_t`
[class.EAWiFiUnconfiguredAccessoryBrowser.methods."initWithDelegate:queue:"]
skipped = true
# Needs `dispatch_queue_t`
[protocol.GCDevice.methods.handlerQueue]
skipped = true
[protocol.GCDevice.methods."setHandlerQueue:"]
skipped = true
# Needs `dispatch_queue_t`
[class.CLLocationUpdater.methods."liveUpdaterWithQueue:handler:"]
skipped = true
[class.CLLocationUpdater.methods."liveUpdaterWithConfiguration:queue:handler:"]
skipped = true
[class.CLMonitorConfiguration.methods.queue]
skipped = true
[class.CLMonitorConfiguration.methods."configWithMonitorName:queue:eventHandler:"]
skipped = true
# Needs `dispatch_queue_t`
[protocol.GCDevicePhysicalInput.methods.queue]
skipped = true
[protocol.GCDevicePhysicalInput.methods."setQueue:"]
skipped = true
# Needs `CFIndex` (fixed locally for now)
[typedef.GCKeyCode]
skipped = true
# Needs `IOHIDDeviceRef` from IOKit
[class.GCController.methods."supportsHIDDevice:"]
skipped = true
# Needs `CMSampleBufferRef` from CoreMedia
[class.SFSpeechAudioBufferRecognitionRequest.methods]
"appendAudioSampleBuffer:" = { skipped = true }
# Needs `CMTimeRange`
[class.SNTimeDurationConstraint.methods.durationRange]
skipped = true
[class.SNTimeDurationConstraint.methods."initWithDurationRange:"]
skipped = true
[class.SNClassificationResult.methods.timeRange]
skipped = true
[class._SFSpeechAnalyzer.methods."initWithClientIdentifier:inputSequence:audioFormat:transcriberResultDelegate:endpointingResultDelegate:queue:transcriberOptions:commandRecognizerOptions:options:restrictedLogging:geoLMRegionID:contextualNamedEntities:didChangeVolatileRange:"]
skipped = true
[class._SFTranscriberResult.methods.range]
skipped = true
[class._SFTranscriberResult.methods."initWithRange:normalizedTranscriberMultisegmentResult:normalizedCommandRecognizerResult:contextualizedTranscriberMultisegmentResult:contextualizedCommandRecognizerResult:"]
skipped = true
[class._STTranscriberMultisegmentResult.methods."recognitionAudioRange:"]
skipped = true
[class._STTranscriberMultisegmentResult.methods."initWithSegments:transcriptions:earResultType:nBestChoices:recognitionAudioRange:"]
skipped = true
[class._SFEndpointingResult.methods.range]
skipped = true
[class._SFEndpointingResult.methods."initWithRange:wordCount:eosLikelihood:pauseCounts:silencePosterior:"]
skipped = true
# Needs `CMTime`
[class.SNClassifySoundRequest.methods."setWindowDuration:"]
skipped = true
[class.SNClassifySoundRequest.methods.windowDuration]
skipped = true
[class._SFSpeechAnalyzer.methods.getNextBufferStartTimeWithCompletion]
skipped = true
[class._SFSpeechAnalyzer.methods."setDidChangeVolatileRange:completion:"]
skipped = true
[class._SFSpeechAnalyzer.methods."finalizeThrough:completion:"]
skipped = true
[class._SFSpeechAnalyzer.methods."finalizeAndFinishThrough:completion:"]
skipped = true
# Needs `SecAccessControlRef` from Security
[class.LAContext.methods."evaluateAccessControl:operation:localizedReason:reply:"]
skipped = true
# Needs `SecKeyAlgorithm` from Security
[class.LAPrivateKey.methods."canDecryptUsingSecKeyAlgorithm:"]
skipped = true
[class.LAPrivateKey.methods."canExchangeKeysUsingSecKeyAlgorithm:"]
skipped = true
[class.LAPrivateKey.methods."canSignUsingSecKeyAlgorithm:"]
skipped = true
[class.LAPrivateKey.methods."exchangeKeysWithPublicKey:secKeyAlgorithm:secKeyParameters:completion:"]
skipped = true
[class.LAPrivateKey.methods."decryptData:secKeyAlgorithm:completion:"]
skipped = true
[class.LAPrivateKey.methods."signData:secKeyAlgorithm:completion:"]
skipped = true
[class.LAPublicKey.methods."canEncryptUsingSecKeyAlgorithm:"]
skipped = true
[class.LAPublicKey.methods."canVerifyUsingSecKeyAlgorithm:"]
skipped = true
[class.LAPublicKey.methods."encryptData:secKeyAlgorithm:completion:"]
skipped = true
[class.LAPublicKey.methods."verifyData:signature:secKeyAlgorithm:completion:"]
skipped = true
# Needs `SecKeyRef` from Security
[class.ASAuthorizationProviderExtensionLoginConfiguration.methods.loginRequestEncryptionPublicKey]
skipped = true
[class.ASAuthorizationProviderExtensionLoginConfiguration.methods."setLoginRequestEncryptionPublicKey:"]
skipped = true
# Needs `CGImagePropertyOrientation` from `ImageIO`
[class.PHLivePhotoEditingContext.methods.orientation]
skipped = true
[class.PHImageManager.methods."requestImageDataAndOrientationForAsset:options:resultHandler:"]
skipped = true
# Needs `UIImageOrientation` from `UIKit`
[class.PHImageManager.methods."requestImageDataForAsset:options:resultHandler:"]
skipped = true
# Needs `CMTime` from `CoreMedia`
[class.PHLivePhotoEditingContext.methods.duration]
skipped = true
[class.PHLivePhotoEditingContext.methods.photoTime]
skipped = true
[protocol.PHLivePhotoFrame.methods.time]
skipped = true
# Needs `CIImage` from `CoreImage`
[typedef.PHLivePhotoFrameProcessingBlock]
skipped = true
[class.PHLivePhotoEditingContext.methods.fullSizeImage]
skipped = true
[class.PHLivePhotoEditingContext.methods.frameProcessor]
skipped = true
[class.PHLivePhotoEditingContext.methods."setFrameProcessor:"]
skipped = true
[protocol.PHLivePhotoFrame.methods.image]
skipped = true
# Needs `dispatch_block_t`
[class.PHPhotoLibrary.methods."performChanges:completionHandler:"]
skipped = true
[class.PHPhotoLibrary.methods."performChangesAndWait:error:"]
skipped = true
# Needs `CMTimeRange` from `CoreMedia`
[class.MPAdTimeRange.methods."initWithTimeRange:"]
skipped = true
[class.MPAdTimeRange.methods.timeRange]
skipped = true
[class.MPAdTimeRange.methods."setTimeRange:"]
skipped = true
# Uses LocalAuthentication framework
[protocol.ASAuthorizationWebBrowserExternallyAuthenticatableRequest.methods]
authenticatedContext = { skipped = true }
"setAuthenticatedContext:" = { skipped = true }
# Needs `pid_t`
[class.MXMetaData.methods.pid]
skipped = true
# Needs `nw_proxy_config_t`
[class.WKWebsiteDataStore.methods]
proxyConfigurations = { skipped = true }
"setProxyConfigurations:" = { skipped = true }
# Needs `CIImage` from `CoreImage`
[class.CIImage.categories.NSAppKitAdditions]
skipped = true
# Needs `CIColor` from `CoreImage`
[class.CIColor.categories.NSAppKitAdditions]
skipped = true
# Needs `Symbols` framework
[class.NSImageView.categories.NSSymbolEffect]
skipped = true
# Needs `AVFAudio` framework
[protocol.CXProviderDelegate.methods."provider:didActivateAudioSession:"]
skipped = true
[protocol.CXProviderDelegate.methods."provider:didDeactivateAudioSession:"]
skipped = true
[class.SNAudioStreamAnalyzer.methods."initWithFormat:"]
skipped = true
[class.SNAudioStreamAnalyzer.methods."analyzeAudioBuffer:atAudioFramePosition:"]
skipped = true
[class.SFSpeechAudioBufferRecognitionRequest.methods.nativeAudioFormat]
skipped = true
[class.SFSpeechAudioBufferRecognitionRequest.methods."appendAudioPCMBuffer:"]
skipped = true
# Needs `AVFoundation` framework
[class.AVMediaSelectionOption.categories.MPNowPlayingInfoLanguageOptionAdditions]
skipped = true
[class.AVMediaSelectionGroup.categories.MPNowPlayingInfoLanguageOptionAdditions]
skipped = true
[class.AVPlayerItem.categories.MPAdditions]
skipped = true
[class.MPNowPlayingSession.methods."initWithPlayers:"]
skipped = true
[class.MPNowPlayingSession.methods.players]
skipped = true
[class.MPNowPlayingSession.methods."addPlayer:"]
skipped = true
[class.MPNowPlayingSession.methods."removePlayer:"]
skipped = true
[class.PHContentEditingInput.methods.avAsset]
skipped = true
[class.PHContentEditingInput.methods.audiovisualAsset]
skipped = true
[class.PHImageManager.methods."requestPlayerItemForVideo:options:resultHandler:"]
skipped = true
[class.PHImageManager.methods."requestExportSessionForVideo:options:exportPreset:resultHandler:"]
skipped = true
[class.PHImageManager.methods."requestAVAssetForVideo:options:resultHandler:"]
skipped = true
# Needs `IMKTextInput`, which is defined in `Carbon` for some reason
[class.IMKInputController.methods.client]
skipped = true
# Needs `ModelIO` framework
[class.MTKMesh.methods."initWithMesh:device:error:"]
skipped = true
[class.MTKMesh.methods."newMeshesFromAsset:device:sourceMeshes:error:"]
skipped = true
[class.MTKMesh.methods.vertexDescriptor]
skipped = true
[fn.MTKModelIOVertexDescriptorFromMetal]
skipped = true
[fn.MTKModelIOVertexDescriptorFromMetalWithError]
skipped = true
[fn.MTKMetalVertexDescriptorFromModelIO]
skipped = true
[fn.MTKMetalVertexDescriptorFromModelIOWithError]
skipped = true
[class.MTKTextureLoader.methods."newTextureWithMDLTexture:options:completionHandler:"]
skipped = true
[class.MTKTextureLoader.methods."newTextureWithMDLTexture:options:error:"]
skipped = true
# Needs `MLModel` from the `CoreML` framework
[class.SNClassifySoundRequest.methods."initWithMLModel:error:"]
skipped = true
# Needs `SFAuthorization` from the `SecurityFoundation` framework
[class.CWInterface.methods."commitConfiguration:authorization:error:"]
skipped = true
# Needs the `AddressBook` framework
[class.EKParticipant.methods."ABPersonInAddressBook:"]
skipped = true
# Needs the `UIKit` framework
[class.EAWiFiUnconfiguredAccessoryBrowser.methods."configureAccessory:withConfigurationUIOnViewController:"]
skipped = true
# Needs `CHHapticEngine` from the `CoreHaptics` framework
[class.GCDeviceHaptics.methods."createEngineWithLocality:"]
skipped = true
# Needs `JSValue` from the `JavaScriptCore` framework
[class.WebScriptObject.methods.JSValue]
skipped = true
# Needs mach / kernel types
[protocol.MTLResource.methods."setOwnerWithIdentity:"]
skipped = true

# Uses a pointer to SEL, which doesn't implement Encode yet
[protocol.NSMenuDelegate.methods]
"menuHasKeyEquivalent:forEvent:target:action:" = { skipped = true }

# These subclass a generic struct, and hence the type parameter defaults to
# `AnyObject`, which is not PartialEq, Eq nor Hash.
[class.NSLayoutXAxisAnchor]
derives = "Debug"
[class.NSLayoutYAxisAnchor]
derives = "Debug"
[class.NSLayoutDimension]
derives = "Debug"

# Wrong type for enum
[enum.anonymous.constants]
NSOKButton = { skipped = true }
NSCancelButton = { skipped = true }
NSFileHandlingPanelCancelButton = { skipped = true }
NSFileHandlingPanelOKButton = { skipped = true }

# Different definitions depending on target
[enum.NSImageResizingMode]
skipped = true
[enum.NSTextAlignment]
skipped = true

# I'm unsure of the ABI of the array this takes
[fn.NSDrawBitmap]
skipped = true
[class.NSView.methods."getRectsExposedDuringLiveResize:count:"]
skipped = true
[class.CAMediaTimingFunction.methods."getControlPointAtIndex:values:"]
skipped = true

# Overridden fmt::Debug because we're missing https://github.com/madsmtm/objc2/issues/267
# See additions/debug.rs
[class.NSAttributedString]
derives = "PartialEq, Eq, Hash"
[class.NSBundle]
derives = "PartialEq, Eq, Hash"
[class.NSThread]
derives = "PartialEq, Eq, Hash"
[class.NSMutableData]
derives = "PartialEq, Eq, Hash"
[class.NSMutableAttributedString]
derives = "PartialEq, Eq, Hash"
[class.NSMutableString]
derives = "PartialEq, Eq, Hash"

# Overridden fmt::Debug because it's prettier
[class.NSData]
derives = "PartialEq, Eq, Hash"
[class.NSError]
derives = "PartialEq, Eq, Hash"
[class.NSException]
derives = "PartialEq, Eq, Hash"
[class.NSProcessInfo]
derives = "PartialEq, Eq, Hash"
[class.NSString]
derives = "PartialEq, Eq, Hash"
[class.NSUUID]
derives = "PartialEq, Eq, Hash"

# Overridden because whether or not it is Eq depends on the inner value
[class.NSValue]
derives = ""
[class.NSNumber]
derives = ""
[class.NSDecimalNumber]
derives = "Debug, PartialEq, Hash"

# Returns `nil` on Apple and GNUStep throws an exception on all other messages
# to this invalid instance.
[class.NSValue.methods.init]
skipped = true
[class.NSValue.methods.new]
skipped = true
[class.NSNumber.methods.init]
skipped = true
[class.NSNumber.methods.new]
skipped = true

# Marked as API_UNAVAILABLE in a category, so we hit the duplicate checking
[class.NSLocale.methods.init]
skipped = true
[class.NSLocale.methods.new]
skipped = true
[class.NSNotification.methods.init]
skipped = true
[class.NSNotification.methods.new]
skipped = true
[class.GKLeaderboard.methods.init]
skipped = true
[class.GKLeaderboard.methods.new]
skipped = true

# Manual definitions
[class.NSException.methods.raise]
skipped = true
[class.NSData.methods.bytes]
skipped = true
[class.NSMutableData.methods.length]
skipped = true
[class.NSError.methods.new]
skipped = true
[class.NSException.methods.new]
skipped = true

# Wrong type on GNUStep
[class.NSMutableData.methods.mutableBytes]
skipped = true

# Uses unions internally
[struct._MTLPackedFloat3]
skipped = true
[typedef.MTLPackedFloat3]
skipped = true
[fn.MTLPackedFloat3Make]
skipped = true

# Needs `JSContext` from JavaScriptCore
[class.WebFrame.methods.javaScriptContext]
skipped = true
[protocol.WebFrameLoadDelegate.methods."webView:didCreateJavaScriptContext:forFrame:"]
skipped = true
# Needs `JSGlobalContextRef` from JavaScriptCore
[class.WebFrame.methods.globalContext]
skipped = true
# Needs `JSObjectRef` from JavaScriptCore
[class.WebScriptObject.methods.JSObject]
skipped = true

# error: translator assertion failure: invalid error nullability (left: Unspecified) (Right: Nullable)
[class.GKSession.methods]
"acceptConnectionFromPeer:error:" = { skipped = true }
"sendData:toPeers:withDataMode:error:" = { skipped = true }
"sendDataToAllPeers:withDataMode:error:" = { skipped = true }
[class.GKVoiceChatService.methods]
"acceptCallID:error:" = { skipped = true }
"startVoiceChatWithParticipantID:error:" = { skipped = true }
[class.WebHistory.methods]
"loadFromURL:error:" = { skipped = true }
"saveToURL:error:" = { skipped = true }
[class.AMWorkspace.methods."runWorkflowAtPath:withInput:error:"]
skipped = true

# error: unknown error result type
[class.MTKTextureLoader.methods."newTexturesWithContentsOfURLs:options:error:"]
skipped = true

[class.WKNavigationAction.methods]
# Not marked as nullable but should be; manually defined in additions
sourceFrame = { skipped = true }

[class.WKWebView.methods]
# uses `SecTrustRef` from Security.framework (not yet translated)
serverTrust = { skipped = true }

# error: translator assertion failure: (left `"NSString"`) (right `"const NSString"`)
[static.kIMKCommandClientName]
skipped = true
[static.kIMKCommandMenuItemName]
skipped = true
[static.IMKCandidatesOpacityAttributeName]
skipped = true
[static.IMKCandidatesSendServerKeyEventFirst]
skipped = true
[static.IMKControllerClass]
skipped = true
[static.IMKDelegateClass]
skipped = true
[static.IMKModeDictionary]
skipped = true

# error: translator assertion failure: (left `"CLLocation"`) (right `"const CLLocation"`)
[class.CLLocation.methods]
"getDistanceFrom:" = { skipped = true }
"distanceFromLocation:" = { skipped = true }

# tries to parse these as `pub type <name> = *const NSString`; fix manually for now
[typedef.GCInputElementName]
skipped = true
[typedef.GCInputButtonName]
skipped = true
[typedef.GCInputAxisName]
skipped = true
[typedef.GCInputSwitchName]
skipped = true
[typedef.GCInputDirectionPadName]
skipped = true
# corresponding constants which we want to treat as (nonnull); fix manually for now
[static.GCInputButtonA]
skipped = true
[static.GCInputButtonB]
skipped = true
[static.GCInputButtonX]
skipped = true
[static.GCInputButtonY]
skipped = true
[static.GCInputDirectionPad]
skipped = true
[static.GCInputLeftThumbstick]
skipped = true
[static.GCInputRightThumbstick]
skipped = true
[static.GCInputLeftShoulder]
skipped = true
[static.GCInputRightShoulder]
skipped = true
[static.GCInputLeftTrigger]
skipped = true
[static.GCInputRightTrigger]
skipped = true
[static.GCInputLeftThumbstickButton]
skipped = true
[static.GCInputRightThumbstickButton]
skipped = true
[static.GCInputButtonHome]
skipped = true
[static.GCInputButtonMenu]
skipped = true
[static.GCInputButtonOptions]
skipped = true
[static.GCInputButtonShare]
skipped = true
[static.GCInputXboxPaddleOne]
skipped = true
[static.GCInputXboxPaddleTwo]
skipped = true
[static.GCInputXboxPaddleThree]
skipped = true
[static.GCInputXboxPaddleFour]
skipped = true
[static.GCInputDualShockTouchpadOne]
skipped = true
[static.GCInputDualShockTouchpadTwo]
skipped = true
[static.GCInputDualShockTouchpadButton]
skipped = true
[static.GCInputSteeringWheel]
skipped = true
[static.GCInputShifter]
skipped = true
[static.GCInputPedalAccelerator]
skipped = true
[static.GCInputPedalBrake]
skipped = true
[static.GCInputPedalClutch]
skipped = true
[static.GCInputLeftPaddle]
skipped = true
[static.GCInputRightPaddle]
skipped = true

# Uses GCInputButtonName
[fn.GCInputArcadeButtonName]
skipped = true

# tries to derive with `PartialEq` which fails because of `Bool` fields; manually define for now
[struct.GCExtendedGamepadSnapshotData]
skipped = true

# This duplicates the method and protocol. The added type information is not
# enough to make it safe anyhow, we need to do manual work here anyhow.
[class.NSDictionary.categories.NSGenericFastEnumeration]
skipped = true

# TODO: Re-enable these once the relevant frameworks are present
[class.IMKServer]
skipped-protocols = ["IMKServerProxy"]
[class.MTKMeshBufferAllocator]
skipped-protocols = ["MDLMeshBufferAllocator"]
[class.MTKMeshBuffer]
skipped-protocols = ["MDLMeshBuffer", "MDLNamed"]
[class.MTKView]
skipped-protocols = ["CALayerDelegate"]

# fails to strip const from `typedef const NSString *const MXLaunchTaskID;`
[typedef.MXLaunchTaskID]
skipped = true
# fails to parse method argument with `MXLaunchTaskID`
[class.MXMetricManager.methods."extendLaunchMeasurementForTaskID:error:"]
skipped = true
[class.MXMetricManager.methods."finishExtendedLaunchMeasurementForTaskID:error:"]
skipped = true
# `os_log_t` not defined; skip for now
[class.MXMetricManager.methods."makeLogHandleWithCategory:"]
skipped = true

# Custom generics because of auto traits
[class.NSArray]
definition-skipped = true
[class.NSMutableArray]
definition-skipped = true
[class.NSDictionary]
definition-skipped = true
[class.NSMutableDictionary]
definition-skipped = true
[class.NSSet]
definition-skipped = true
[class.NSMutableSet]
definition-skipped = true
[class.NSCountedSet]
definition-skipped = true
[class.NSOrderedSet]
definition-skipped = true
[class.NSMutableOrderedSet]
definition-skipped = true
[class.NSEnumerator]
definition-skipped = true

# These protocol impls would return the wrong types
[class.NSSimpleCString]
skipped-protocols = ["NSCopying", "NSMutableCopying"]
[class.NSConstantString]
skipped-protocols = ["NSCopying", "NSMutableCopying"]
[class.NSTextStorage]
skipped-protocols = ["NSCopying", "NSMutableCopying"]
[class.NSPurgeableData]
skipped-protocols = ["NSCopying", "NSMutableCopying"]

# Uses `NS_SWIFT_UI_ACTOR` on a static, which is hard to support.
#
# Will have to be a method that takes `MainThreadMarker`.
[static.NSApp]
skipped = true

# Uses types from CoreFoundation
[fn.CWKeychainCopyEAPUsernameAndPassword]
skipped = true
[fn.CWKeychainCopyEAPIdentityList]
skipped = true
[fn.CWKeychainSetEAPUsernameAndPassword]
skipped = true
[fn.CWKeychainDeleteEAPUsernameAndPassword]
skipped = true
[fn.CWKeychainSetPassword]
skipped = true
[fn.CWKeychainDeletePassword]
skipped = true
[fn.CWKeychainCopyEAPIdentity]
skipped = true
[fn.CWKeychainSetEAPIdentity]
skipped = true
[fn.CWKeychainCopyPassword]
skipped = true
[fn.CWKeychainFindWiFiPassword]
skipped = true
[fn.CWKeychainSetWiFiPassword]
skipped = true
[fn.CWKeychainDeleteWiFiPassword]
skipped = true
[fn.CWKeychainFindWiFiEAPUsernameAndPassword]
skipped = true
[fn.CWKeychainSetWiFiEAPUsernameAndPassword]
skipped = true
[fn.CWKeychainDeleteWiFiEAPUsernameAndPassword]
skipped = true
[fn.CWKeychainCopyWiFiEAPIdentity]
skipped = true
[fn.CWKeychainSetWiFiEAPIdentity]
skipped = true
[class.CWInterface.methods."associateToEnterpriseNetwork:identity:username:password:error:"]
skipped = true

# Items from ServiceManagement that uses types from CoreFoundation
[fn.SMJobBless]
skipped = true
[fn.SMLoginItemSetEnabled]
skipped = true
[static.kSMDomainSystemLaunchd]
skipped = true
[static.kSMDomainUserLaunchd]
skipped = true
[static.kSMErrorDomainFramework]
skipped = true
[static.kSMErrorDomainIPC]
skipped = true
[static.kSMErrorDomainLaunchd]
skipped = true
[fn.SMCopyAllJobDictionaries]
skipped = true
[fn.SMJobCopyDictionary]
skipped = true
[fn.SMJobRemove]
skipped = true
[fn.SMJobSubmit]
skipped = true
