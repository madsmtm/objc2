### Various fixes that we need to do because our translation is imperfect.

###
### Libraries
###

[library.Accessibility]
imports = ["Foundation"]
macos = "11.0"
maccatalyst = "14.0"
ios = "14.0"
tvos = "14.0"
watchos = "7.0"

[library.AdServices]
imports = ["Foundation"]
macos = "11.1"
maccatalyst = "14.3"
ios = "14.3"

[library.AdSupport]
imports = ["Foundation"]
macos = "10.14"
maccatalyst = "13.0"
ios = "6.0"
tvos = "9.0"

[library.AppKit]
imports = ["CoreData", "CoreFoundation", "Foundation"]
extra-features = [
    # Temporary, since some structs and statics use these
    "AppKit_NSApplication",
    "AppKit_NSCollectionLayoutSection",
    "AppKit_NSCollectionLayoutGroupCustomItem",
    "AppKit_NSCollectionView",
    "AppKit_NSView",
    "AppKit_NSTableView",
    "AppKit_NSTableColumn",
    "AppKit_NSTableRowView",
    "Foundation_NSIndexPath",
    "Foundation_NSArray",
    "Foundation_NSCoder",
]
macos = "10.0"
maccatalyst = "13.0"

[library.AuthenticationServices]
imports = ["AppKit", "CoreFoundation", "Foundation"]
# Temporary, since some structs and statics use these
extra-features = ["Foundation_NSURL"]
macos = "10.15"
maccatalyst = "13.0"
ios = "12.0"
tvos = "13.0"
watchos = "6.0"

[library.AutomaticAssessmentConfiguration]
imports = ["Foundation"]
macos = "10.15.4"
maccatalyst = "13.4"
ios = "13.4"

[library.Automator]
imports = ["AppKit", "CoreFoundation", "Foundation", "OSAKit"]
macos = "10.4"
maccatalyst = "14.0"

[library.BackgroundAssets]
imports = ["Foundation"]
macos = "13.0"
maccatalyst = "16.0"
ios = "16.0"

[library.BackgroundTasks]
imports = ["Foundation"]
maccatalyst = "13.0"
ios = "13.0"
tvos = "13.0"

[library.BusinessChat]
imports = ["AppKit", "CoreFoundation", "Foundation"]
macos = "10.14"
maccatalyst = "13.0" # Unsure
ios = "11.0" # Unsure

[library.CallKit]
imports = ["Foundation"]
macos = "13.0"
maccatalyst = "13.0"
ios = "10.0"
watchos = "9.0"

[library.ClassKit]
imports = ["Foundation"]
macos = "11.0"
maccatalyst = "14.0"
ios = "11.4"

[library.CloudKit]
imports = ["CoreLocation", "Foundation"]
extra-features = [
    "CloudKit_CKShare",
]
macos = "10.10"
maccatalyst = "13.0"
ios = "8.0"
tvos = "9.0"
watchos = "3.0"

[library.Contacts]
imports = ["Foundation"]
macos = "10.11"
maccatalyst = "13.0"
ios = "9.0"
watchos = "2.0"

[library.CoreData]
imports = ["Foundation"]
# Temporary, since some structs and statics use these
extra-features = ["CoreData_NSAsynchronousFetchResult"]
macos = "10.4"
maccatalyst = "13.0"
ios = "3.0"
tvos = "9.0"
watchos = "2.0"

[library.CoreFoundation]
imports = []
extra-features= ["block"]
macos = "10.0"
maccatalyst = "13.0"
ios = "2.0"
tvos = "9.0"
watchos = "2.0"

[library.CoreLocation]
imports = ["Contacts", "Foundation"]
extra-features = [
    "CoreLocation_CLPlacemark",
]
# macos = "10.6"
macos = "10.11" # Temporarily raised since `CoreLocation` imports `Contacts`
maccatalyst = "13.0"
ios = "2.0"
tvos = "9.0"
watchos = "2.0"

[library.DataDetection]
imports = ["Foundation"]
macos = "12.0"
maccatalyst = "15.0"
ios = "15.0"
tvos = "15.0"
watchos = "8.0"

[library.DeviceCheck]
imports = ["Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "11.0"
tvos = "11.0"
watchos = "9.0"

[library.EventKit]
imports = ["AppKit", "CoreLocation", "Foundation", "MapKit"]
extra-features = [
    "EventKit_EKEvent",
]
macos = "10.8"
maccatalyst = "13.0"
ios = "4.0"
watchos = "2.0"

[library.ExceptionHandling]
imports = ["Foundation"]
macos = "10.0"
maccatalyst = "13.0"

[library.ExtensionKit]
imports = ["AppKit", "Foundation"]
macos = "13.0"
maccatalyst = "13.0"
ios = "16.1"
tvos = "16.0"
watchos = "9.0"

[library.ExternalAccessory]
imports = ["Foundation"]
macos = "10.13"
maccatalyst = "16.0"
ios = "3.0"
tvos = "10.0"

[library.FileProvider]
imports = ["AppKit", "Foundation", "UniformTypeIdentifiers"]
macos = "10.15"
ios = "11.0"

[library.FileProviderUI]
imports = ["AppKit", "FileProvider", "Foundation"]
macos = "10.15"
maccatalyst = "15.0"
ios = "11.0"

[library.Foundation]
imports = ["CoreFoundation"]
extra-features = [
    "objective-c",
    "block",
    # Temporary, since some structs and statics use these
    "Foundation_NSError",
    "Foundation_NSAppleEventDescriptor",
    "Foundation_NSHashTable",
    "Foundation_NSMapTable",
    "Foundation_NSProgress",
    # Some fmt::Debug impls require these
    "Foundation_NSString",
    "Foundation_NSDictionary",
    "Foundation_NSEnumerator",
]
macos = "10.0"
maccatalyst = "13.0"
ios = "2.0"
tvos = "9.0"
watchos = "2.0"

[library.GameController]
imports = ["AppKit", "Foundation"]
extra-features = [
    "GameController_GCControllerAxisInput",
    "GameController_GCControllerButtonInput",
    "GameController_GCControllerDirectionPad",
    "GameController_GCControllerTouchpad",
    "GameController_GCExtendedGamepad",
    "GameController_GCControllerElement",
    "GameController_GCGamepad",
    "GameController_GCKeyboardInput",
    "GameController_GCMicroGamepad",
    "GameController_GCMotion",
    "GameController_GCMouseInput",
]
macos = "10.9"
maccatalyst = "13.0"
ios = "7.0"
tvos = "9.0"

[library.GameKit]
imports = ["AppKit", "Foundation"]
extra-features = [
    "AppKit_NSViewController",
]
macos = "10.8"
maccatalyst = "13.0"
ios = "3.0"
tvos = "9.0"
watchos = "3.0"

[library.HealthKit]
imports = ["CoreLocation", "Foundation", "UniformTypeIdentifiers"]
macos = "13.0"
maccatalyst = "13.0"
ios = "8.0"
watchos = "2.0"

[library.IdentityLookup]
imports = ["Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "11.0"

[library.InputMethodKit]
imports = ["AppKit", "Foundation"]
macos = "10.5"
maccatalyst = "13.0"

[library.LocalAuthentication]
imports = ["Foundation"]
macos = "10.10"
maccatalyst = "13.0"
ios = "8.0"
watchos = "9.0"

[library.LocalAuthenticationEmbeddedUI]
imports = ["AppKit", "Foundation", "LocalAuthentication"]
extra-features = [
    "AppKit_NSWindow",
]
macos = "12.0"
maccatalyst = "16.0"
ios = "16.0"

[library.LinkPresentation]
imports = ["AppKit", "Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "13.0"
tvos = "14.0"

[library.MailKit]
imports = ["AppKit", "Foundation"]
macos = "12.0"

[library.MapKit]
imports = ["AppKit", "Contacts", "CoreFoundation", "CoreLocation", "Foundation"]
extra-features = [
    "MapKit_MKDirectionsResponse",
    "MapKit_MKETAResponse",
    "MapKit_MKLocalSearchResponse",
    "MapKit_MKMapSnapshot",
]
macos = "10.9"
maccatalyst = "13.0"
ios = "3.0"
tvos = "9.2"
watchos = "2.0"

[library.MediaPlayer]
imports = ["AppKit", "Foundation"]
macos = "10.12.1"
maccatalyst = "13.0"
ios = "2.0"
tvos = "9.0"
watchos = "5.0"

[library.Metal]
imports = ["Foundation"]
macos = "10.11"
maccatalyst = "13.0"
ios = "8.0"
tvos = "9.0"

[library.MetalFX]
imports = ["Metal"]
macos = "13.0"
maccatalyst = "16.0"
ios = "16.0"

[library.MetalKit]
imports = ["AppKit", "Foundation", "Metal"]
# Temporary, since some structs and statics use these
extra-features = [
    "Metal_MTLRenderPipelineReflection",
    "Metal_MTLComputePipelineReflection",
]
macos = "10.11"
maccatalyst = "13.0"
ios = "9.0"
tvos = "9.0"

[library.MetricKit]
imports = ["Foundation"]
macos = "12.0"
maccatalyst = "13.0"
ios = "13.0"

[library.Photos]
name = "PhotoKit"
imports = ["AppKit", "CoreLocation", "Foundation"]
macos = "10.11"
maccatalyst = "13.0"
ios = "8.0"
tvos = "10.0"
watchos = "9.0"

[library.OSAKit]
imports = ["AppKit", "Foundation"]
macos = "10.4"

[library.QuartzCore]
name = "CoreAnimation"
imports = ["Foundation"]
macos = "10.3"
maccatalyst = "13.0"
ios = "2.0"
tvos = "9.0"

[library.SoundAnalysis]
imports = ["Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "13.0"
tvos = "13.0"
watchos = "9.0"

[library.Speech]
imports = ["Foundation"]
macos = "10.15"
maccatalyst = "13.0"
ios = "10.0"

[library.StoreKit]
imports = ["AppKit", "Foundation"]
macos = "10.7"
maccatalyst = "13.0"
ios = "3.0"
tvos = "9.0"
watchos = "6.2"

[library.UniformTypeIdentifiers]
imports = ["Foundation"]
extra-features = [
    "UniformTypeIdentifiers_UTType",
]
macos = "11.0"
maccatalyst = "14.0"
ios = "14.0"
tvos = "14.0"
watchos = "7.0"

[library.UserNotifications]
imports = ["CoreLocation", "Foundation"]
macos = "10.14"
maccatalyst = "13.0"
ios = "10.0"
tvos = "10.0"
watchos = "3.0"

[library.WebKit]
imports = ["AppKit", "Foundation"]
extra-features = ["Foundation_NSAttributedString"]
macos = "10.2"
maccatalyst = "13.0"
ios = "16.0"

###
### Attributes that change a function/method's calling convention.
###
### The following should be handled automatically:
### - `ns_returns_not_retained` / `cf_returns_not_retained` / `os_returns_not_retained`
### - `ns_returns_retained` / `cf_returns_retained` / `os_returns_retained`
###
### The rest are only very rarely used in Apple's frameworks, so while we
### _could_ handle them too, I think it's easier to do it manually.
###
### See https://clang.llvm.org/docs/AttributeReference.html
###

# `ns_consumed`, `cf_consumed` and `os_consumed`
[fn.CFAutorelease]
skipped = true
[fn.CFBridgingRelease]
skipped = true
[fn.NSMakeCollectable]
skipped = true
[fn.NSFreeMapTable]
skipped = true
[fn.IOServiceGetMatchingService]
skipped = true
[fn.IOServiceGetMatchingServices]
skipped = true
[fn.IOServiceAddMatchingNotification]
skipped = true
[fn.CVOpenGLBufferRelease]
skipped = true
[fn.CVDisplayLinkRelease]
skipped = true
[fn.CVOpenGLBufferPoolRelease]
skipped = true
[fn.CVOpenGLTextureRelease]
skipped = true
[fn.CVPixelBufferPoolRelease]
skipped = true
[fn.CVPixelBufferRelease]
skipped = true
[fn.CVOpenGLTextureCacheRelease]
skipped = true
[fn.CVBufferRelease]
skipped = true
[protocol.NSKeyedUnarchiverDelegate.methods.unarchiver_didDecodeObject]
skipped = true
# + a few methods from DriverKit.framework and Kernel.framework, but those
# are written in C++, so we're not going to ever handle them anyhow.

# `ns_consumes_self` and `os_consumes_this`
[class.NSObject.methods.awakeAfterUsingCoder]
skipped = true

# `ns_returns_autoreleased`
# Not ever used

# `objc_method_family`
[class.ABNewPersonViewController.methods.newPersonViewDelegate]
skipped = true

# `objc_ownership` in .apinotes
[class.NSBundle.methods.loadNibNamed_owner_topLevelObjects]
skipped = true
[class.NSNib.methods.instantiateWithOwner_topLevelObjects]
skipped = true

# Return type `oneway void`
[class.NSObject.methods.release]
skipped = true
[class.NSPasteboard.methods.releaseGlobally]
skipped = true
[class.NSView.methods.releaseGState]
skipped = true
# + some more in IMServicePlugIn.framework

# `alloc`-family methods
[class.NSObject.methods.alloc]
skipped = true
[class.NSObject.methods.allocWithZone]
skipped = true
[class.NSProxy.methods.alloc]
skipped = true
[class.NSProxy.methods.allocWithZone]
skipped = true

###
### Lifetime annotations that we don't handle yet.
###

# Uses `SomeObject * __strong *`, which is unsupported
[class.NSNetService.methods.getInputStream_outputStream]
skipped = true
[class.NSPropertyListSerialization.methods]
dataFromPropertyList_format_errorDescription = { skipped = true }
propertyListFromData_mutabilityOption_format_errorDescription = { skipped = true }
[fn.MTLCopyAllDevicesWithObserver]
skipped = true

# Uses `__autoreleasing` in a typedef, which I'm unsure how to handle
[typedef.MTLAutoreleasedArgument]
skipped = true
[protocol.MTLFunction.methods.newArgumentEncoderWithBufferIndex_reflection]
skipped = true
[typedef.MTLAutoreleasedRenderPipelineReflection]
skipped = true
[typedef.MTLAutoreleasedComputePipelineReflection]
skipped = true
[protocol.MTLDevice.methods]
newRenderPipelineStateWithDescriptor_options_reflection_error = { skipped = true }
newComputePipelineStateWithFunction_options_reflection_error = { skipped = true }
newComputePipelineStateWithDescriptor_options_reflection_error = { skipped = true }
newRenderPipelineStateWithTileDescriptor_options_reflection_error = { skipped = true }
newRenderPipelineStateWithMeshDescriptor_options_reflection_error = { skipped = true }

# Uses NS_RETURNS_NOT_RETAINED on a `NSString*`
[class.DOMMutationEvent.methods.newValue]
skipped = true

###
### Others
###

[class.NSBlockOperation.methods]
# Uses `NSArray<void (^)(void)>`, which is difficult to handle
executionBlocks = { skipped = true }

# These use `Class<NSItemProvider...>`, which is unsupported
[class.NSItemProvider.methods]
registerObjectOfClass_visibility_loadHandler = { skipped = true }
canLoadObjectOfClass = { skipped = true }
loadObjectOfClass_completionHandler = { skipped = true }

# Has `error:` parameter, but returns NSInteger (where 0 means error)
[class.NSJSONSerialization.methods.writeJSONObject_toStream_options_error]
skipped = true
[class.NSPropertyListSerialization.methods.writePropertyList_toStream_format_options_error]
skipped = true
[class.NSManagedObjectContext.methods]
countForFetchRequest_error = { skipped = true }

# Not supported on clang 11.0.0
[class.NSBundle.methods.localizedAttributedStringForKey_value_table]
skipped = true

# Root classes, defined in `objc2` for now
[class.NSProxy]
skipped = true
[class.NSObject]
skipped = true # Also ignore categories on NSObject for now

[protocol.NSObject]
renamed = "NSObjectProtocol"

# Defined in `objc2` instead
[typedef.NSZone]
skipped = true

# Contains bitfields
[struct.NSDecimal]
skipped = true

# Uses `c_ulong` which means we need to specify the encoding manually.
[struct.NSFastEnumerationState]
skipped = true

# Uses stuff from core Darwin libraries which we have not yet mapped
[class.NSAppleEventDescriptor.methods]
descriptorWithDescriptorType_bytes_length = { skipped = true }
descriptorWithDescriptorType_data = { skipped = true }
appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID = { skipped = true }
descriptorWithProcessIdentifier = { skipped = true }
initWithAEDescNoCopy = { skipped = true }
initWithDescriptorType_bytes_length = { skipped = true }
initWithDescriptorType_data = { skipped = true }
initWithEventClass_eventID_targetDescriptor_returnID_transactionID = { skipped = true }
setParamDescriptor_forKeyword = { skipped = true }
paramDescriptorForKeyword = { skipped = true }
removeParamDescriptorWithKeyword = { skipped = true }
setAttributeDescriptor_forKeyword = { skipped = true }
attributeDescriptorForKeyword = { skipped = true }
sendEventWithOptions_timeout_error = { skipped = true }
setDescriptor_forKeyword = { skipped = true }
descriptorForKeyword = { skipped = true }
removeDescriptorWithKeyword = { skipped = true }
keywordForDescriptorAtIndex = { skipped = true }
coerceToDescriptorType = { skipped = true }
aeDesc = { skipped = true }
descriptorType = { skipped = true }
eventClass = { skipped = true }
eventID = { skipped = true }
returnID = { skipped = true }
transactionID = { skipped = true }
[class.NSAppleEventManager.methods]
setEventHandler_andSelector_forEventClass_andEventID = { skipped = true }
removeEventHandlerForEventClass_andEventID = { skipped = true }
dispatchRawAppleEvent_withRawReply_handlerRefCon = { skipped = true }
[class.NSOperationQueue.methods.underlyingQueue]
skipped = true
[class.NSOperationQueue.methods.setUnderlyingQueue]
skipped = true
[class.NSRunLoop.methods.getCFRunLoop]
skipped = true
[class.NSURLCredential.methods]
initWithIdentity_certificates_persistence = { skipped = true }
credentialWithIdentity_certificates_persistence = { skipped = true }
initWithTrust = { skipped = true }
credentialForTrust = { skipped = true }
[class.NSURLCredential.methods.identity]
skipped = true
[class.NSURLProtectionSpace.methods.serverTrust]
skipped = true
[class.NSURLSessionConfiguration.methods]
TLSMinimumSupportedProtocol = { skipped = true }
setTLSMinimumSupportedProtocol = { skipped = true }
TLSMaximumSupportedProtocol = { skipped = true }
setTLSMaximumSupportedProtocol = { skipped = true }
TLSMinimumSupportedProtocolVersion = { skipped = true }
setTLSMinimumSupportedProtocolVersion = { skipped = true }
TLSMaximumSupportedProtocolVersion = { skipped = true }
setTLSMaximumSupportedProtocolVersion = { skipped = true }
[class.NSUUID.methods]
initWithUUIDBytes = { skipped = true }
getUUIDBytes = { skipped = true }
[class.NSXPCConnection.methods]
auditSessionIdentifier = { skipped = true }
processIdentifier = { skipped = true }
effectiveUserIdentifier = { skipped = true }
effectiveGroupIdentifier = { skipped = true }
[class.NSXPCInterface.methods]
setXPCType_forSelector_argumentIndex_ofReply = { skipped = true }
XPCTypeForSelector_argumentIndex_ofReply = { skipped = true }
[class.NSXPCCoder.methods]
encodeXPCObject_forKey = { skipped = true }
decodeXPCObjectOfType_forKey = { skipped = true }

# Uses constants from CoreFoundation or similar frameworks
[enum.NSAppleEventSendOptions]
use-value = true
[enum.NSCalendarUnit]
use-value = true
[enum.NSDateFormatterStyle]
use-value = true
[enum.NSISO8601DateFormatOptions]
use-value = true
[enum.NSLocaleLanguageDirection]
use-value = true
[enum.NSNumberFormatterStyle]
use-value = true
[enum.NSNumberFormatterPadPosition]
use-value = true
[enum.NSNumberFormatterRoundingMode]
use-value = true
[enum.NSPropertyListMutabilityOptions]
use-value = true
[enum.NSPropertyListFormat]
use-value = true
[enum.anonymous.constants.NS_UnknownByteOrder]
skipped = true
[enum.anonymous.constants.NS_LittleEndian]
skipped = true
[enum.anonymous.constants.NS_BigEndian]
skipped = true

# Uses va_list
[class.NSAttributedString.methods.initWithFormat_options_locale_arguments]
skipped = true
[class.NSException.methods.raise_format_arguments]
skipped = true
[class.NSExpression.methods.expressionWithFormat_arguments]
skipped = true
[class.NSPredicate.methods.predicateWithFormat_arguments]
skipped = true
[class.NSString.methods.initWithFormat_arguments]
skipped = true
[class.NSString.methods.initWithFormat_locale_arguments]
skipped = true
[class.NSString.methods.initWithValidatedFormat_validFormatSpecifiers_arguments_error]
skipped = true
[class.NSString.methods.initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error]
skipped = true
[fn.NSLogv]
skipped = true

# Wrong type compared to value
[enum.anonymous.constants.NSWrapCalendarComponents]
skipped = true

# Uses NSImage, which is only available in AppKit
[class.NSUserNotification.methods.contentImage]
skipped = true
[class.NSUserNotification.methods.setContentImage]
skipped = true

# Outlier that really should have been part of the original enum
[enum.anonymous.constants.NSProprietaryStringEncoding]
skipped = true

# Has the wrong generic parameter
[class.NSDictionary.methods]
initWithContentsOfURL_error = { skipped = true }
dictionaryWithContentsOfURL_error = { skipped = true }

# Custom implementation for now
[struct.NSRange]
skipped = true
[enum.NSComparisonResult]
skipped = true

# Different definitions on 32-bit
[typedef.NSPoint]
skipped = true
[struct.NSPoint]
skipped = true
[typedef.NSSize]
skipped = true
[struct.NSSize]
skipped = true
[typedef.NSRect]
skipped = true
[struct.NSRect]
skipped = true
[enum.NSRectEdge]
skipped = true
[enum.anonymous.constants.NSRectEdgeMinX]
skipped = true
[enum.anonymous.constants.NSRectEdgeMinY]
skipped = true
[enum.anonymous.constants.NSRectEdgeMaxX]
skipped = true
[enum.anonymous.constants.NSRectEdgeMaxY]
skipped = true
[enum.anonymous.constants.NSMinXEdge]
skipped = true
[enum.anonymous.constants.NSMinYEdge]
skipped = true
[enum.anonymous.constants.NSMaxXEdge]
skipped = true
[enum.anonymous.constants.NSMaxYEdge]
skipped = true

# We do a custom implementation of these
[protocol.NSCopying]
skipped = true
[protocol.NSMutableCopying]
skipped = true

# Our implementation of superclass methods currently place them in the wrong
# module, so we do this hack for now.
[class.NSMutableAttributedString.methods]
initWithURL_options_documentAttributes_error = { skipped = true }
initWithData_options_documentAttributes_error = { skipped = true }
initWithRTF_documentAttributes = { skipped = true }
initWithRTFD_documentAttributes = { skipped = true }
initWithHTML_documentAttributes = { skipped = true }
initWithHTML_baseURL_documentAttributes = { skipped = true }
initWithDocFormat_documentAttributes = { skipped = true }
initWithHTML_options_documentAttributes = { skipped = true }
initWithRTFDFileWrapper_documentAttributes = { skipped = true }
initWithURL_documentAttributes = { skipped = true }
initWithPath_documentAttributes = { skipped = true }

# Uses a bit of complex feature testing setup, see ASFoundation.h
[typedef.ASPresentationAnchor]
skipped = true
[typedef.ASViewController]
skipped = true
[typedef.ASImage]
skipped = true

# The original superclass typedef is a bit difficult to extract from the
# superclass name, so let's do it manually.
[class.ASCredentialProviderViewController]
definition-skipped = true
[class.ASAccountAuthenticationModificationViewController]
definition-skipped = true

# Specifies superclass as UIControl or NSControl conditionally
[class.ASAuthorizationAppleIDButton]
definition-skipped = true

# Defined in multiple files
[static.NSErrorMergePolicy]
skipped = true
[static.NSMergeByPropertyObjectTrumpMergePolicy]
skipped = true
[static.NSMergeByPropertyStoreTrumpMergePolicy]
skipped = true
[static.NSOverwriteMergePolicy]
skipped = true
[static.NSRollbackMergePolicy]
skipped = true

# Typedef that uses a generic from a class
[typedef.NSCollectionViewDiffableDataSourceItemProvider]
skipped = true
[class.NSCollectionViewDiffableDataSource.methods.initWithCollectionView_itemProvider]
skipped = true

# Both protocols and classes
[protocol.NSTextAttachmentCell]
renamed = "NSTextAttachmentCellProtocol"
[protocol.NSAccessibilityElement]
renamed = "NSAccessibilityElementProtocol"

# Protocol that has a typedef defined for it for ease of use
[protocol.NSFileProviderItem]
renamed = "NSFileProviderItemProtocol"

# Both property and method
[class.NSDocument.methods.setDisplayName]
skipped = true

# Duplicated method
[class.NSSlider.methods.isVertical]
skipped = true
[class.NSSliderCell.methods.isVertical]
skipped = true
[class.NSGestureRecognizer.methods.state]
skipped = true

# Duplicated property
[class.MTLRasterizationRateLayerDescriptor.methods.sampleCount]
skipped = true
[class.MTLRasterizationRateLayerDescriptor.methods.setSampleCount]
skipped = true

# Uses stuff from different frameworks / system libraries
[fn.CFBridgingRetain]
skipped = true
[class.NSAnimationContext.methods.timingFunction]
skipped = true
[class.NSAnimationContext.methods.setTimingFunction]
skipped = true
[class.NSBezierPath.methods.appendBezierPathWithCGGlyph_inFont]
skipped = true
[class.NSBezierPath.methods.appendBezierPathWithCGGlyphs_count_inFont]
skipped = true
[class.NSBitmapImageRep.methods.initWithCGImage]
skipped = true
[class.NSBitmapImageRep.methods.initWithCIImage]
skipped = true
[class.NSBitmapImageRep.methods.CGImage]
skipped = true
[class.NSColor.methods.CGColor]
skipped = true
[class.NSColor.methods.colorWithCGColor]
skipped = true
[class.NSColor.methods.colorWithCIColor]
skipped = true
[class.NSColorSpace.methods.initWithCGColorSpace]
skipped = true
[class.NSColorSpace.methods.CGColorSpace]
skipped = true
[class.NSCIImageRep]
skipped = true
[class.NSEvent.methods.CGEvent]
skipped = true
[class.NSEvent.methods.eventWithCGEvent]
skipped = true
[class.NSFont.methods]
boundingRectForCGGlyph = { skipped = true }
advancementForCGGlyph = { skipped = true }
getBoundingRects_forCGGlyphs_count = { skipped = true }
getAdvancements_forCGGlyphs_count = { skipped = true }
[class.NSGlyphInfo.methods.glyphInfoWithCGGlyph_forFont_baseString]
skipped = true
[class.NSGlyphInfo.methods.glyphID]
skipped = true
[class.NSGraphicsContext.methods.graphicsContextWithCGContext_flipped]
skipped = true
[class.NSGraphicsContext.methods.CGContext]
skipped = true
[class.NSGraphicsContext.methods.CIContext]
skipped = true
[class.NSImage.methods]
initWithCGImage_size = { skipped = true }
CGImageForProposedRect_context_hints = { skipped = true }
initWithIconRef = { skipped = true }
[class.NSImageRep.methods.CGImageForProposedRect_context_hints]
skipped = true
[class.NSItemProvider.methods.registerCloudKitShareWithPreparationHandler]
skipped = true
[class.NSItemProvider.methods.registerCloudKitShare_container]
skipped = true
[class.NSLayoutManager.methods]
setGlyphs_properties_characterIndexes_font_forGlyphRange = { skipped = true }
CGGlyphAtIndex_isValidIndex = { skipped = true }
CGGlyphAtIndex = { skipped = true }
getGlyphsInRange_glyphs_properties_characterIndexes_bidiLevels = { skipped = true }
glyphIndexForPoint_inTextContainer_fractionOfDistanceThroughGlyph = { skipped = true }
showCGGlyphs_positions_count_font_textMatrix_attributes_inContext = { skipped = true }
showCGGlyphs_positions_count_font_matrix_attributes_inContext = { skipped = true }
[class.NSLayoutManagerDelegate.methods.layoutManager_shouldGenerateGlyphs_properties_characterIndexes_font_forGlyphRange]
skipped = true
[class.NSMovie.methods.initWithMovie]
skipped = true
[class.NSMovie.methods.QTMovie]
skipped = true
[class.NSOpenGLContext]
skipped = true
[class.NSOpenGLLayer]
skipped = true
[class.NSOpenGLPixelFormat]
skipped = true
[class.NSOpenGLPixelBuffer]
skipped = true
[class.NSOpenGLView]
skipped = true
[fn.NSOpenGLSetOption]
skipped = true
[fn.NSOpenGLGetOption]
skipped = true
[fn.NSOpenGLGetVersion]
skipped = true
[class.NSTextLayoutFragment.methods.drawAtPoint_inContext]
skipped = true
[class.NSTextLineFragment.methods.drawAtPoint_inContext]
skipped = true
[class.NSTextView.methods.quickLookPreviewableItemsInRanges]
skipped = true
[class.NSRunningApplication.methods.processIdentifier]
skipped = true
[class.NSRunningApplication.methods.runningApplicationWithProcessIdentifier]
skipped = true
[class.NSSavePanel.methods.allowedContentTypes]
skipped = true
[class.NSSavePanel.methods.setAllowedContentTypes]
skipped = true
[class.NSView.methods]
layer = { skipped = true }
setLayer = { skipped = true }
backgroundFilters = { skipped = true }
setBackgroundFilters = { skipped = true }
compositingFilter = { skipped = true }
setCompositingFilter = { skipped = true }
contentFilters = { skipped = true }
setContentFilters = { skipped = true }
makeBackingLayer = { skipped = true }
[class.NSObject.methods.layer_shouldInheritContentsScale_fromWindow]
skipped = true
[class.NSWorkspace.methods]
iconForContentType = { skipped = true }
URLForApplicationToOpenContentType = { skipped = true }
URLsForApplicationsToOpenContentType = { skipped = true }
setDefaultApplicationAtURL_toOpenContentType_completionHandler = { skipped = true }
[class.NSWorkspaceOpenConfiguration.methods.architecture]
skipped = true
[class.NSWorkspaceOpenConfiguration.methods.setArchitecture]
skipped = true
[protocol.NSApplicationDelegate.methods]
application_handlerForIntent = { skipped = true }
application_userDidAcceptCloudKitShareWithMetadata = { skipped = true }
[protocol.NSLayoutManagerDelegate.methods]
layoutManager_shouldGenerateGlyphs_properties_characterIndexes_font_forGlyphRange = { skipped = true }
[protocol.NSCloudSharingServiceDelegate.methods]
sharingService_didSaveShare = { skipped = true }
sharingService_didStopSharing = { skipped = true }
[protocol.NSCloudSharingValidation]
skipped = true
[protocol.NSViewLayerContentScaleDelegate]
skipped = true
[class.NSCoreDataCoreSpotlightDelegate.methods]
attributeSetForObject = { skipped = true }
searchableIndex_reindexAllSearchableItemsWithAcknowledgementHandler = { skipped = true }
searchableIndex_reindexSearchableItemsWithIdentifiers_acknowledgementHandler = { skipped = true }
[class.NSPersistentCloudKitContainer.methods]
recordForManagedObjectID = { skipped = true }
recordsForManagedObjectIDs = { skipped = true }
recordIDForManagedObjectID = { skipped = true }
recordIDsForManagedObjectIDs = { skipped = true }
[class.NSPersistentCloudKitContainerOptions.methods]
databaseScope = { skipped = true }
setDatabaseScope = { skipped = true }
[protocol.NSFetchedResultsControllerDelegate.methods]
controller_didChangeContentWithSnapshot = { skipped = true }
[class.CAKeyframeAnimation.methods]
path = { skipped = true }
setPath = { skipped = true }
[class.CAShapeLayer.methods]
path = { skipped = true }
setPath = { skipped = true }
fillColor = { skipped = true }
setFillColor = { skipped = true }
strokeColor = { skipped = true }
setStrokeColor = { skipped = true }
[class.CAEmitterCell.methods]
color = { skipped = true }
setColor = { skipped = true }
[class.CALayer.methods]
affineTransform = { skipped = true }
setAffineTransform = { skipped = true }
drawInContext = { skipped = true }
renderInContext = { skipped = true }
backgroundColor = { skipped = true }
setBackgroundColor = { skipped = true }
borderColor = { skipped = true }
setBorderColor = { skipped = true }
shadowColor = { skipped = true }
setShadowColor = { skipped = true }
shadowPath = { skipped = true }
setShadowPath = { skipped = true }
[protocol.CALayerDelegate.methods]
drawLayer_inContext = { skipped = true }
[protocol.CAMetalDrawable]
skipped = true
[class.CAMetalLayer]
skipped = true
[class.CAOpenGLLayer]
skipped = true
[class.CARenderer.methods]
rendererWithMTLTexture_options = { skipped = true }
setDestination = { skipped = true }
beginFrameAtTime_timeStamp = { skipped = true }
[class.CARemoteLayerClient.methods]
initWithServerPort = { skipped = true }
[class.CARemoteLayerServer.methods]
serverPort = { skipped = true }
[class.CAReplicatorLayer.methods]
instanceColor = { skipped = true }
setInstanceColor = { skipped = true }
[class.CATextLayer.methods]
font = { skipped = true }
setFont = { skipped = true }
foregroundColor = { skipped = true }
setForegroundColor = { skipped = true }
[fn.CATransform3DMakeAffineTransform]
skipped = true
[fn.CATransform3DGetAffineTransform]
skipped = true
[class.MTLSharedEventListener.methods.initWithDispatchQueue]
skipped = true
[class.MTLSharedEventListener.methods.dispatchQueue]
skipped = true
[protocol.MTLDevice.methods.newLibraryWithData_error]
skipped = true
[protocol.MTLDevice.methods.newTextureWithDescriptor_iosurface_plane]
skipped = true
[protocol.MTLTexture.methods.iosurface]
skipped = true
[class.ASAuthorizationProviderExtensionLoginManager.methods]
saveCertificate_keyType = { skipped = true }
copyKeyForKeyType = { skipped = true }
copyIdentityForKeyType = { skipped = true }
[class.BGTaskScheduler.methods]
# Needs `dispatch_queue_t`
registerForTaskWithIdentifier_usingQueue_launchHandler = { skipped = true }
[class.AXBrailleMap.methods.presentImage]
# Needs `CGImageRef`
skipped = true
[fn.AXNameFromColor]
# Needs `CGColorRef`
skipped = true
[class.CLSContext.methods.thumbnail]
# Needs `CGImageRef`
skipped = true
[class.CLSContext.methods.setThumbnail]
# Needs `CGImageRef`
skipped = true
# Needs `CGColorRef`
[class.EKCalendar.methods]
CGColor = { skipped = true }
setCGColor = { skipped = true }
# Needs `TISInputSourceRef` from Carbon (HIToolbox)
[class.IMKCandidates.methods]
setSelectionKeysKeylayout = { skipped = true }
selectionKeysKeylayout = { skipped = true }
# Needs `CGRectEdge`
[fn.MKMapRectDivide]
skipped = true
[class.MKMapSnapshotter.methods]
# Needs `dispatch_queue_t`
startWithQueue_completionHandler = { skipped = true }
[class.MKOverlayPathRenderer.methods]
# Needs `CGLineJoin`
lineJoin = { skipped = true }
setLineJoin = { skipped = true }
# Needs `CGLineCap`
lineCap = { skipped = true }
setLineCap = { skipped = true }
# Needs `CGPathRef`
path = { skipped = true }
setPath = { skipped = true }
# Needs `CGContextRef`
applyStrokePropertiesToContext_atZoomScale = { skipped = true }
applyFillPropertiesToContext_atZoomScale = { skipped = true }
# Needs `CGPathRef` and `CGContextRef`
strokePath_inContext = { skipped = true }
fillPath_inContext = { skipped = true }
[class.MKOverlayRenderer.methods]
# Needs `CGContextRef`
drawMapRect_zoomScale_inContext = { skipped = true }
# Needs `CGBlendMode`
blendMode = { skipped = true }
setBlendMode = { skipped = true }
[class.MTKMeshBuffer.methods]
# Needs `MDLMeshBufferZone` from ModelIO framework
zone = { skipped = true }
# Needs `MDLMeshBufferType` from ModelIO framework
type = { skipped = true }
# Needs `MDLVertexFormat` from ModelIO framework
[fn.MTKModelIOVertexFormatFromMetal]
skipped = true
[fn.MTKMetalVertexFormatFromModelIO]
skipped = true
# Needs `CGImageRef`
[class.MTKTextureLoader.methods.newTextureWithCGImage_options_completionHandler]
skipped = true
[class.MTKTextureLoader.methods.newTextureWithCGImage_options_error]
skipped = true
[class.MTKView.methods]
# Needs `CAMetalDrawable`
currentDrawable = { skipped = true }
# Needs `CGColorSpaceRef`
colorspace = { skipped = true }
setColorspace = { skipped = true }
# Needs `Component` from Core Services / Carbon Core / Component Manager
[class.OSALanguage.methods]
initWithComponent = { skipped = true }
componentInstance = { skipped = true }
[class.OSALanguageInstance.methods.componentInstance]
skipped = true
# Needs `dispatch_queue_t`
[class.CXCallController.methods.initWithQueue]
skipped = true
[class.CXCallObserver.methods.setDelegate_queue]
skipped = true
[class.CXProvider.methods.setDelegate_queue]
skipped = true
# Needs `dispatch_queue_t`
[class.EAWiFiUnconfiguredAccessoryBrowser.methods.initWithDelegate_queue]
skipped = true
# Needs `dispatch_queue_t`
[protocol.GCDevice.methods.handlerQueue]
skipped = true
[protocol.GCDevice.methods.setHandlerQueue]
skipped = true
# Needs `CFIndex` (fixed locally for now)
[typedef.GCKeyCode]
skipped = true
# Needs `IOHIDDeviceRef` from IOKit
[class.GCController.methods.supportsHIDDevice]
skipped = true
# Needs `CMSampleBufferRef` from CoreMedia
[class.SFSpeechAudioBufferRecognitionRequest.methods]
appendAudioSampleBuffer = { skipped = true }
# Needs `CMTimeRange`
[class.SNTimeDurationConstraint.methods.durationRange]
skipped = true
[class.SNTimeDurationConstraint.methods.initWithDurationRange]
skipped = true
[class.SNClassificationResult.methods.timeRange]
skipped = true
# NEeds `CMTime`
[class.SNClassifySoundRequest.methods.setWindowDuration]
skipped = true
[class.SNClassifySoundRequest.methods.windowDuration]
skipped = true
# Needs `SecAccessControlRef` from Security
[class.LAContext.methods.evaluateAccessControl_operation_localizedReason_reply]
skipped = true
# Needs `SecKeyAlgorithm` from Security
[class.LAPrivateKey.methods.canDecryptUsingSecKeyAlgorithm]
skipped = true
[class.LAPrivateKey.methods.canExchangeKeysUsingSecKeyAlgorithm]
skipped = true
[class.LAPrivateKey.methods.canSignUsingSecKeyAlgorithm]
skipped = true
[class.LAPrivateKey.methods.exchangeKeysWithPublicKey_secKeyAlgorithm_secKeyParameters_completion]
skipped = true
[class.LAPrivateKey.methods.decryptData_secKeyAlgorithm_completion]
skipped = true
[class.LAPrivateKey.methods.signData_secKeyAlgorithm_completion]
skipped = true
[class.LAPublicKey.methods.canEncryptUsingSecKeyAlgorithm]
skipped = true
[class.LAPublicKey.methods.canVerifyUsingSecKeyAlgorithm]
skipped = true
[class.LAPublicKey.methods.encryptData_secKeyAlgorithm_completion]
skipped = true
[class.LAPublicKey.methods.verifyData_signature_secKeyAlgorithm_completion]
skipped = true
# Needs `CGImagePropertyOrientation` from `ImageIO`
[class.PHLivePhotoEditingContext.methods.orientation]
skipped = true
[class.PHImageManager.methods.requestImageDataAndOrientationForAsset_options_resultHandler]
skipped = true
# Needs `UIImageOrientation` from `UIKit`
[class.PHImageManager.methods.requestImageDataForAsset_options_resultHandler]
skipped = true
# Needs `CMTime` from `CoreMedia`
[class.PHLivePhotoEditingContext.methods.duration]
skipped = true
[class.PHLivePhotoEditingContext.methods.photoTime]
skipped = true
[protocol.PHLivePhotoFrame.methods.time]
skipped = true
# Needs `PHLivePhotoFrameProcessingBlock` (skipped because needs `CIImage`)
[class.PHLivePhotoEditingContext.methods.frameProcessor]
skipped = true
[class.PHLivePhotoEditingContext.methods.setFrameProcessor]
skipped = true
# Needs `CIImage` from `CoreImage`
[typedef.PHLivePhotoFrameProcessingBlock]
skipped = true
# Needs `dispatch_block_t`
[class.PHPhotoLibrary.methods.performChanges_completionHandler]
skipped = true
[class.PHPhotoLibrary.methods.performChangesAndWait_error]
skipped = true
# Needs `CMTimeRange` from `CoreMedia`
[class.MPAdTimeRange.methods.initWithTimeRange]
skipped = true
[class.MPAdTimeRange.methods.timeRange]
skipped = true
[class.MPAdTimeRange.methods.setTimeRange]
skipped = true

# Uses a pointer to SEL, which doesn't implement Encode yet
[protocol.NSMenuDelegate.methods]
menuHasKeyEquivalent_forEvent_target_action = { skipped = true }

# These subclass a generic struct, and hence the type parameter defaults to
# `AnyObject`, which is not PartialEq, Eq nor Hash.
[class.NSLayoutXAxisAnchor]
derives = "Debug"
[class.NSLayoutYAxisAnchor]
derives = "Debug"
[class.NSLayoutDimension]
derives = "Debug"

# Wrong type for enum
[enum.anonymous.constants]
NSOKButton = { skipped = true }
NSCancelButton = { skipped = true }
NSFileHandlingPanelCancelButton = { skipped = true }
NSFileHandlingPanelOKButton = { skipped = true }

# Categories for classes defined in other frameworks
[class.CIImage]
skipped = true
[class.CIColor]
skipped = true

# Different definitions depending on target
[enum.NSImageResizingMode]
skipped = true
[enum.NSTextAlignment]
skipped = true

# Different definitions depending on deployment target
[class.NSLayoutAnchor]
definition-skipped = true
[class.NSPopover]
definition-skipped = true
[class.NSPopover.methods]
appearance = { skipped = true }
setAppearance = { skipped = true }
effectiveAppearance = { skipped = true }

# I'm unsure of the ABI of the array this takes
[fn.NSDrawBitmap]
skipped = true
[class.NSView.methods.getRectsExposedDuringLiveResize_count]
skipped = true
[class.CAMediaTimingFunction.methods.getControlPointAtIndex_values]
skipped = true

# Overridden fmt::Debug because we're missing https://github.com/madsmtm/objc2/issues/267
# See fixes/debug.rs
[class.NSAttributedString]
derives = "PartialEq, Eq, Hash"
[class.NSBundle]
derives = "PartialEq, Eq, Hash"
[class.NSThread]
derives = "PartialEq, Eq, Hash"
[class.NSMutableData]
derives = "PartialEq, Eq, Hash"
[class.NSMutableAttributedString]
derives = "PartialEq, Eq, Hash"
[class.NSMutableString]
derives = "PartialEq, Eq, Hash"

# Overridden fmt::Debug because it's prettier
[class.NSData]
derives = "PartialEq, Eq, Hash"
[class.NSError]
derives = "PartialEq, Eq, Hash"
[class.NSException]
derives = "PartialEq, Eq, Hash"
[class.NSProcessInfo]
derives = "PartialEq, Eq, Hash"
[class.NSString]
derives = "PartialEq, Eq, Hash"
[class.NSUUID]
derives = "PartialEq, Eq, Hash"

# Overridden because whether or not it is Eq depends on the inner value
[class.NSValue]
derives = ""
[class.NSNumber]
derives = ""
[class.NSDecimalNumber]
derives = "Debug, PartialEq, Hash"

# Returns `nil` on Apple and GNUStep throws an exception on all other messages
# to this invalid instance.
[class.NSValue.methods.init]
skipped = true
[class.NSValue.methods.new]
skipped = true
[class.NSNumber.methods.init]
skipped = true
[class.NSNumber.methods.new]
skipped = true

# Marked as API_UNAVAILABLE in a category, so we hit the duplicate checking
[class.NSLocale.methods.init]
skipped = true
[class.NSLocale.methods.new]
skipped = true
[class.NSNotification.methods.init]
skipped = true
[class.NSNotification.methods.new]
skipped = true
[class.GKLeaderboard.methods.init]
skipped = true
[class.GKLeaderboard.methods.new]
skipped = true

# Manual definitions
[class.NSException.methods.raise]
skipped = true
[class.NSData.methods.bytes]
skipped = true
[class.NSMutableData.methods.length]
skipped = true
[class.NSError.methods.new]
skipped = true
[class.NSException.methods.new]
skipped = true

# Wrong type on GNUStep
[class.NSMutableData.methods.mutableBytes]
skipped = true

# Uses unions internally
[struct.MTLPackedFloat3]
skipped = true
[fn.MTLPackedFloat3Make]
skipped = true

# Needs `JSContext` from JavaScriptCore
[class.WebFrame.methods.javaScriptContext]
skipped = true
[protocol.WebFrameLoadDelegate.methods.webView_didCreateJavaScriptContext_forFrame]
skipped = true
# Needs `JSGlobalContextRef` from JavaScriptCore
[class.WebFrame.methods.globalContext]
skipped = true
# Needs `JSObjectRef` from JavaScriptCore
[class.WebScriptObject.methods.JSObject]
skipped = true

# error: translator assertion failure: invalid error nullability (left: Unspecified) (Right: Nullable)
[class.GKSession.methods]
acceptConnectionFromPeer_error = { skipped = true }
sendData_toPeers_withDataMode_error = { skipped = true }
sendDataToAllPeers_withDataMode_error = { skipped = true }
[class.GKVoiceChatService.methods]
acceptCallID_error = { skipped = true }
startVoiceChatWithParticipantID_error = { skipped = true }
[class.WebHistory.methods]
loadFromURL_error = { skipped = true }
saveToURL_error = { skipped = true }
[class.AMWorkspace.methods.runWorkflowAtPath_withInput_error]
skipped = true

# error: unknown error result type
[class.MTKTextureLoader.methods.newTexturesWithContentsOfURLs_options_error]
skipped = true

[class.WKNavigationAction.methods]
# Not marked as nullable but should be; manually defined in fixes
sourceFrame = { skipped = true }

[class.WKWebView.methods]
# uses `SecTrustRef` from Security.framework (not yet translated)
serverTrust = { skipped = true }

# error: translator assertion failure: (left `"NSString"`) (right `"const NSString"`)
[static.kIMKCommandClientName]
skipped = true
[static.kIMKCommandMenuItemName]
skipped = true
[static.IMKCandidatesOpacityAttributeName]
skipped = true
[static.IMKCandidatesSendServerKeyEventFirst]
skipped = true
[static.IMKControllerClass]
skipped = true
[static.IMKDelegateClass]
skipped = true
[static.IMKModeDictionary]
skipped = true

# error: translator assertion failure: (left `"CLLocation"`) (right `"const CLLocation"`)
[class.CLLocation.methods]
getDistanceFrom = { skipped = true }
distanceFromLocation = { skipped = true }

# tries to parse these as `pub type <name> = *const NSString`; fix manually for now
[typedef.GCInputElementName]
skipped = true
[typedef.GCInputButtonName]
skipped = true
[typedef.GCInputAxisName]
skipped = true
[typedef.GCInputSwitchName]
skipped = true
[typedef.GCInputDirectionPadName]
skipped = true
# corresponding constants which we want to treat as (nonnull); fix manually for now
[static.GCInputButtonA]
skipped = true
[static.GCInputButtonB]
skipped = true
[static.GCInputButtonX]
skipped = true
[static.GCInputButtonY]
skipped = true
[static.GCInputDirectionPad]
skipped = true
[static.GCInputLeftThumbstick]
skipped = true
[static.GCInputRightThumbstick]
skipped = true
[static.GCInputLeftShoulder]
skipped = true
[static.GCInputRightShoulder]
skipped = true
[static.GCInputLeftTrigger]
skipped = true
[static.GCInputRightTrigger]
skipped = true
[static.GCInputLeftThumbstickButton]
skipped = true
[static.GCInputRightThumbstickButton]
skipped = true
[static.GCInputButtonHome]
skipped = true
[static.GCInputButtonMenu]
skipped = true
[static.GCInputButtonOptions]
skipped = true
[static.GCInputButtonShare]
skipped = true
[static.GCInputXboxPaddleOne]
skipped = true
[static.GCInputXboxPaddleTwo]
skipped = true
[static.GCInputXboxPaddleThree]
skipped = true
[static.GCInputXboxPaddleFour]
skipped = true
[static.GCInputDualShockTouchpadOne]
skipped = true
[static.GCInputDualShockTouchpadTwo]
skipped = true
[static.GCInputDualShockTouchpadButton]
skipped = true
[static.GCInputSteeringWheel]
skipped = true
[static.GCInputShifter]
skipped = true
[static.GCInputPedalAccelerator]
skipped = true
[static.GCInputPedalBrake]
skipped = true
[static.GCInputPedalClutch]
skipped = true
[static.GCInputLeftPaddle]
skipped = true
[static.GCInputRightPaddle]
skipped = true

# tries to derive with `PartialEq` which fails because of `Bool` fields; manually define for now
[struct.GCExtendedGamepadSnapshotData]
skipped = true

# This duplicates the method and protocol. The added type information is not
# enough to make it safe anyhow, we need to do manual work here anyhow.
[class.NSDictionary.categories.NSGenericFastEnumeration]
skipped = true

# TODO: Re-enable these once the relevant frameworks are present
[class.IMKServer]
skipped-protocols = ["IMKServerProxy"]
[class.MTKMeshBufferAllocator]
skipped-protocols = ["MDLMeshBufferAllocator"]
[class.MTKMeshBuffer]
skipped-protocols = ["MDLMeshBuffer", "MDLNamed"]
[class.MTKView]
skipped-protocols = ["CALayerDelegate"]

# produces wrong values for `LACredentialTypeSmartCardPIN` case; manually define for now
[enum.LACredentialType]
skipped = true
# produces wrong values for most cases; manually define for now
[enum.LAError]
skipped = true

# fails to strip const from `typedef const NSString *const MXLaunchTaskID;`
[typedef.MXLaunchTaskID]
skipped = true
# fails to parse method argument with `MXLaunchTaskID`
[class.MXMetricManager.methods.extendLaunchMeasurementForTaskID_error]
skipped = true
[class.MXMetricManager.methods.finishExtendedLaunchMeasurementForTaskID_error]
skipped = true
# `os_log_t` not defined; skip for now
[class.MXMetricManager.methods.makeLogHandleWithCategory]
skipped = true

# Custom generics because of auto traits
[class.NSArray]
definition-skipped = true
[class.NSMutableArray]
definition-skipped = true
[class.NSDictionary]
definition-skipped = true
[class.NSMutableDictionary]
definition-skipped = true
[class.NSSet]
definition-skipped = true
[class.NSMutableSet]
definition-skipped = true
[class.NSCountedSet]
definition-skipped = true
[class.NSOrderedSet]
definition-skipped = true
[class.NSMutableOrderedSet]
definition-skipped = true
[class.NSEnumerator]
definition-skipped = true

# These protocol impls would return the wrong types
[class.NSSimpleCString]
skipped-protocols = ["NSCopying", "NSMutableCopying"]
[class.NSConstantString]
skipped-protocols = ["NSCopying", "NSMutableCopying"]
[class.NSTextStorage]
skipped-protocols = ["NSCopying", "NSMutableCopying"]
[class.NSPurgeableData]
skipped-protocols = ["NSCopying", "NSMutableCopying"]

# Uses variadics
[fn.CFStringCreateWithFormatAndArguments]
skipped = true
[fn.CFStringCreateStringWithValidatedFormatAndArguments]
skipped = true
[fn.CFStringAppendFormatAndArguments]
skipped = true

# Name clash with containing module
[enum.__CFByteOrder]
skipped = true

# Needs dispatch_queue_t
[fn.CFMessagePortSetDispatchQueue]
skipped = true
[fn.CFReadStreamSetDispatchQueue]
skipped = true
[fn.CFWriteStreamSetDispatchQueue]
skipped = true
[fn.CFReadStreamCopyDispatchQueue]
skipped = true
[fn.CFWriteStreamCopyDispatchQueue]
skipped = true
