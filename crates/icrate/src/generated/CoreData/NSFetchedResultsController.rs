//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

__inner_extern_class!(
    #[derive(Debug)]
    pub struct NSFetchedResultsController<ResultType: Message = Object> {
        _inner0: PhantomData<*mut ResultType>,
    }

    unsafe impl<ResultType: Message> ClassType for NSFetchedResultsController<ResultType> {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl<ResultType: Message> NSFetchedResultsController<ResultType> {
        #[method_id(@__retain_semantics Init initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:)]
        pub unsafe fn initWithFetchRequest_managedObjectContext_sectionNameKeyPath_cacheName(
            this: Option<Allocated<Self>>,
            fetchRequest: &NSFetchRequest<ResultType>,
            context: &NSManagedObjectContext,
            sectionNameKeyPath: Option<&NSString>,
            name: Option<&NSString>,
        ) -> Id<Self, Shared>;

        #[method(performFetch:)]
        pub unsafe fn performFetch(&self, error: *mut *mut NSError) -> bool;

        #[method_id(@__retain_semantics Other fetchRequest)]
        pub unsafe fn fetchRequest(&self) -> Id<NSFetchRequest<ResultType>, Shared>;

        #[method_id(@__retain_semantics Other managedObjectContext)]
        pub unsafe fn managedObjectContext(&self) -> Id<NSManagedObjectContext, Shared>;

        #[method_id(@__retain_semantics Other sectionNameKeyPath)]
        pub unsafe fn sectionNameKeyPath(&self) -> Option<Id<NSString, Shared>>;

        #[method_id(@__retain_semantics Other cacheName)]
        pub unsafe fn cacheName(&self) -> Option<Id<NSString, Shared>>;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<NSFetchedResultsControllerDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&NSFetchedResultsControllerDelegate>);

        #[method(deleteCacheWithName:)]
        pub unsafe fn deleteCacheWithName(name: Option<&NSString>);

        #[method_id(@__retain_semantics Other fetchedObjects)]
        pub unsafe fn fetchedObjects(&self) -> Option<Id<NSArray<ResultType>, Shared>>;

        #[method_id(@__retain_semantics Other objectAtIndexPath:)]
        pub unsafe fn objectAtIndexPath(&self, indexPath: &NSIndexPath) -> Id<ResultType, Shared>;

        #[method_id(@__retain_semantics Other indexPathForObject:)]
        pub unsafe fn indexPathForObject(
            &self,
            object: &ResultType,
        ) -> Option<Id<NSIndexPath, Shared>>;

        #[method_id(@__retain_semantics Other sectionIndexTitleForSectionName:)]
        pub unsafe fn sectionIndexTitleForSectionName(
            &self,
            sectionName: &NSString,
        ) -> Option<Id<NSString, Shared>>;

        #[method_id(@__retain_semantics Other sectionIndexTitles)]
        pub unsafe fn sectionIndexTitles(&self) -> Id<NSArray<NSString>, Shared>;

        #[method_id(@__retain_semantics Other sections)]
        pub unsafe fn sections(&self) -> Option<Id<NSArray<NSFetchedResultsSectionInfo>, Shared>>;

        #[method(sectionForSectionIndexTitle:atIndex:)]
        pub unsafe fn sectionForSectionIndexTitle_atIndex(
            &self,
            title: &NSString,
            sectionIndex: NSInteger,
        ) -> NSInteger;
    }
);

pub type NSFetchedResultsSectionInfo = NSObject;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSFetchedResultsChangeType {
        NSFetchedResultsChangeInsert = 1,
        NSFetchedResultsChangeDelete = 2,
        NSFetchedResultsChangeMove = 3,
        NSFetchedResultsChangeUpdate = 4,
    }
);

pub type NSFetchedResultsControllerDelegate = NSObject;
