//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AuthenticationServices::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug)]
    pub struct ASAuthorizationProviderExtensionAuthorizationResult;

    unsafe impl ClassType for ASAuthorizationProviderExtensionAuthorizationResult {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl ASAuthorizationProviderExtensionAuthorizationResult {
        #[method_id(@__retain_semantics Init initWithHTTPAuthorizationHeaders:)]
        pub unsafe fn initWithHTTPAuthorizationHeaders(
            this: Option<Allocated<Self>>,
            httpAuthorizationHeaders: &NSDictionary<NSString, NSString>,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Init initWithHTTPResponse:httpBody:)]
        pub unsafe fn initWithHTTPResponse_httpBody(
            this: Option<Allocated<Self>>,
            httpResponse: &NSHTTPURLResponse,
            httpBody: Option<&NSData>,
        ) -> Id<Self, Shared>;

        #[method_id(@__retain_semantics Other httpAuthorizationHeaders)]
        pub unsafe fn httpAuthorizationHeaders(
            &self,
        ) -> Option<Id<NSDictionary<NSString, NSString>, Shared>>;

        #[method(setHttpAuthorizationHeaders:)]
        pub unsafe fn setHttpAuthorizationHeaders(
            &self,
            httpAuthorizationHeaders: Option<&NSDictionary<NSString, NSString>>,
        );

        #[method_id(@__retain_semantics Other httpResponse)]
        pub unsafe fn httpResponse(&self) -> Option<Id<NSHTTPURLResponse, Shared>>;

        #[method(setHttpResponse:)]
        pub unsafe fn setHttpResponse(&self, httpResponse: Option<&NSHTTPURLResponse>);

        #[method_id(@__retain_semantics Other httpBody)]
        pub unsafe fn httpBody(&self) -> Option<Id<NSData, Shared>>;

        #[method(setHttpBody:)]
        pub unsafe fn setHttpBody(&self, httpBody: Option<&NSData>);

        #[method_id(@__retain_semantics Other privateKeys)]
        pub unsafe fn privateKeys(&self) -> Id<NSArray, Shared>;

        #[method(setPrivateKeys:)]
        pub unsafe fn setPrivateKeys(&self, privateKeys: &NSArray);
    }
);
