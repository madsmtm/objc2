//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_class!(
    #[derive(Debug)]
    pub struct NSScriptClassDescription;

    unsafe impl ClassType for NSScriptClassDescription {
        type Super = NSClassDescription;
    }
);

extern_methods!(
    unsafe impl NSScriptClassDescription {
        #[method_id(@__retain_semantics Other classDescriptionForClass:)]
        pub unsafe fn classDescriptionForClass(
            aClass: &Class,
        ) -> Option<Id<NSScriptClassDescription, Shared>>;

        #[method_id(@__retain_semantics Init initWithSuiteName:className:dictionary:)]
        pub unsafe fn initWithSuiteName_className_dictionary(
            this: Option<Allocated<Self>>,
            suiteName: &NSString,
            className: &NSString,
            classDeclaration: Option<&NSDictionary>,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(@__retain_semantics Other suiteName)]
        pub unsafe fn suiteName(&self) -> Option<Id<NSString, Shared>>;

        #[method_id(@__retain_semantics Other className)]
        pub unsafe fn className(&self) -> Option<Id<NSString, Shared>>;

        #[method_id(@__retain_semantics Other implementationClassName)]
        pub unsafe fn implementationClassName(&self) -> Option<Id<NSString, Shared>>;

        #[method_id(@__retain_semantics Other superclassDescription)]
        pub unsafe fn superclassDescription(&self) -> Option<Id<NSScriptClassDescription, Shared>>;

        #[method(appleEventCode)]
        pub unsafe fn appleEventCode(&self) -> FourCharCode;

        #[method(matchesAppleEventCode:)]
        pub unsafe fn matchesAppleEventCode(&self, appleEventCode: FourCharCode) -> bool;

        #[method(supportsCommand:)]
        pub unsafe fn supportsCommand(
            &self,
            commandDescription: &NSScriptCommandDescription,
        ) -> bool;

        #[method(selectorForCommand:)]
        pub unsafe fn selectorForCommand(
            &self,
            commandDescription: &NSScriptCommandDescription,
        ) -> OptionSel;

        #[method_id(@__retain_semantics Other typeForKey:)]
        pub unsafe fn typeForKey(&self, key: &NSString) -> Option<Id<NSString, Shared>>;

        #[method_id(@__retain_semantics Other classDescriptionForKey:)]
        pub unsafe fn classDescriptionForKey(
            &self,
            key: &NSString,
        ) -> Option<Id<NSScriptClassDescription, Shared>>;

        #[method(appleEventCodeForKey:)]
        pub unsafe fn appleEventCodeForKey(&self, key: &NSString) -> FourCharCode;

        #[method_id(@__retain_semantics Other keyWithAppleEventCode:)]
        pub unsafe fn keyWithAppleEventCode(
            &self,
            appleEventCode: FourCharCode,
        ) -> Option<Id<NSString, Shared>>;

        #[method_id(@__retain_semantics Other defaultSubcontainerAttributeKey)]
        pub unsafe fn defaultSubcontainerAttributeKey(&self) -> Option<Id<NSString, Shared>>;

        #[method(isLocationRequiredToCreateForKey:)]
        pub unsafe fn isLocationRequiredToCreateForKey(
            &self,
            toManyRelationshipKey: &NSString,
        ) -> bool;

        #[method(hasPropertyForKey:)]
        pub unsafe fn hasPropertyForKey(&self, key: &NSString) -> bool;

        #[method(hasOrderedToManyRelationshipForKey:)]
        pub unsafe fn hasOrderedToManyRelationshipForKey(&self, key: &NSString) -> bool;

        #[method(hasReadablePropertyForKey:)]
        pub unsafe fn hasReadablePropertyForKey(&self, key: &NSString) -> bool;

        #[method(hasWritablePropertyForKey:)]
        pub unsafe fn hasWritablePropertyForKey(&self, key: &NSString) -> bool;
    }
);

extern_methods!(
    /// NSDeprecated
    unsafe impl NSScriptClassDescription {
        #[method(isReadOnlyKey:)]
        pub unsafe fn isReadOnlyKey(&self, key: &NSString) -> bool;
    }
);

extern_methods!(
    /// NSScriptClassDescription
    unsafe impl NSObject {
        #[method(classCode)]
        pub unsafe fn classCode(&self) -> FourCharCode;

        #[method_id(@__retain_semantics Other className)]
        pub unsafe fn className(&self) -> Id<NSString, Shared>;
    }
);
