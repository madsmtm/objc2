//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

pub type NSGrammaticalGender = NSInteger;
pub const NSGrammaticalGenderNotSet: NSGrammaticalGender = 0;
pub const NSGrammaticalGenderFeminine: NSGrammaticalGender = 1;
pub const NSGrammaticalGenderMasculine: NSGrammaticalGender = 2;
pub const NSGrammaticalGenderNeuter: NSGrammaticalGender = 3;

pub type NSGrammaticalPartOfSpeech = NSInteger;
pub const NSGrammaticalPartOfSpeechNotSet: NSGrammaticalPartOfSpeech = 0;
pub const NSGrammaticalPartOfSpeechDeterminer: NSGrammaticalPartOfSpeech = 1;
pub const NSGrammaticalPartOfSpeechPronoun: NSGrammaticalPartOfSpeech = 2;
pub const NSGrammaticalPartOfSpeechLetter: NSGrammaticalPartOfSpeech = 3;
pub const NSGrammaticalPartOfSpeechAdverb: NSGrammaticalPartOfSpeech = 4;
pub const NSGrammaticalPartOfSpeechParticle: NSGrammaticalPartOfSpeech = 5;
pub const NSGrammaticalPartOfSpeechAdjective: NSGrammaticalPartOfSpeech = 6;
pub const NSGrammaticalPartOfSpeechAdposition: NSGrammaticalPartOfSpeech = 7;
pub const NSGrammaticalPartOfSpeechVerb: NSGrammaticalPartOfSpeech = 8;
pub const NSGrammaticalPartOfSpeechNoun: NSGrammaticalPartOfSpeech = 9;
pub const NSGrammaticalPartOfSpeechConjunction: NSGrammaticalPartOfSpeech = 10;
pub const NSGrammaticalPartOfSpeechNumeral: NSGrammaticalPartOfSpeech = 11;
pub const NSGrammaticalPartOfSpeechInterjection: NSGrammaticalPartOfSpeech = 12;
pub const NSGrammaticalPartOfSpeechPreposition: NSGrammaticalPartOfSpeech = 13;
pub const NSGrammaticalPartOfSpeechAbbreviation: NSGrammaticalPartOfSpeech = 14;

pub type NSGrammaticalNumber = NSInteger;
pub const NSGrammaticalNumberNotSet: NSGrammaticalNumber = 0;
pub const NSGrammaticalNumberSingular: NSGrammaticalNumber = 1;
pub const NSGrammaticalNumberZero: NSGrammaticalNumber = 2;
pub const NSGrammaticalNumberPlural: NSGrammaticalNumber = 3;
pub const NSGrammaticalNumberPluralTwo: NSGrammaticalNumber = 4;
pub const NSGrammaticalNumberPluralFew: NSGrammaticalNumber = 5;
pub const NSGrammaticalNumberPluralMany: NSGrammaticalNumber = 6;

extern_class!(
    #[derive(Debug)]
    pub struct NSMorphology;

    unsafe impl ClassType for NSMorphology {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSMorphology {
        #[method(grammaticalGender)]
        pub unsafe fn grammaticalGender(&self) -> NSGrammaticalGender;

        #[method(setGrammaticalGender:)]
        pub unsafe fn setGrammaticalGender(&self, grammaticalGender: NSGrammaticalGender);

        #[method(partOfSpeech)]
        pub unsafe fn partOfSpeech(&self) -> NSGrammaticalPartOfSpeech;

        #[method(setPartOfSpeech:)]
        pub unsafe fn setPartOfSpeech(&self, partOfSpeech: NSGrammaticalPartOfSpeech);

        #[method(number)]
        pub unsafe fn number(&self) -> NSGrammaticalNumber;

        #[method(setNumber:)]
        pub unsafe fn setNumber(&self, number: NSGrammaticalNumber);
    }
);

extern_methods!(
    /// NSCustomPronouns
    unsafe impl NSMorphology {
        #[method_id(@__retain_semantics Other customPronounForLanguage:)]
        pub unsafe fn customPronounForLanguage(
            &self,
            language: &NSString,
        ) -> Option<Id<NSMorphologyCustomPronoun, Shared>>;

        #[method(setCustomPronoun:forLanguage:error:)]
        pub unsafe fn setCustomPronoun_forLanguage_error(
            &self,
            features: Option<&NSMorphologyCustomPronoun>,
            language: &NSString,
        ) -> Result<(), Id<NSError, Shared>>;
    }
);

extern_class!(
    #[derive(Debug)]
    pub struct NSMorphologyCustomPronoun;

    unsafe impl ClassType for NSMorphologyCustomPronoun {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSMorphologyCustomPronoun {
        #[method(isSupportedForLanguage:)]
        pub unsafe fn isSupportedForLanguage(language: &NSString) -> bool;

        #[method_id(@__retain_semantics Other requiredKeysForLanguage:)]
        pub unsafe fn requiredKeysForLanguage(language: &NSString)
            -> Id<NSArray<NSString>, Shared>;

        #[method_id(@__retain_semantics Other subjectForm)]
        pub unsafe fn subjectForm(&self) -> Option<Id<NSString, Shared>>;

        #[method(setSubjectForm:)]
        pub unsafe fn setSubjectForm(&self, subjectForm: Option<&NSString>);

        #[method_id(@__retain_semantics Other objectForm)]
        pub unsafe fn objectForm(&self) -> Option<Id<NSString, Shared>>;

        #[method(setObjectForm:)]
        pub unsafe fn setObjectForm(&self, objectForm: Option<&NSString>);

        #[method_id(@__retain_semantics Other possessiveForm)]
        pub unsafe fn possessiveForm(&self) -> Option<Id<NSString, Shared>>;

        #[method(setPossessiveForm:)]
        pub unsafe fn setPossessiveForm(&self, possessiveForm: Option<&NSString>);

        #[method_id(@__retain_semantics Other possessiveAdjectiveForm)]
        pub unsafe fn possessiveAdjectiveForm(&self) -> Option<Id<NSString, Shared>>;

        #[method(setPossessiveAdjectiveForm:)]
        pub unsafe fn setPossessiveAdjectiveForm(&self, possessiveAdjectiveForm: Option<&NSString>);

        #[method_id(@__retain_semantics Other reflexiveForm)]
        pub unsafe fn reflexiveForm(&self) -> Option<Id<NSString, Shared>>;

        #[method(setReflexiveForm:)]
        pub unsafe fn setReflexiveForm(&self, reflexiveForm: Option<&NSString>);
    }
);

extern_methods!(
    /// NSMorphologyUserSettings
    unsafe impl NSMorphology {
        #[method(isUnspecified)]
        pub unsafe fn isUnspecified(&self) -> bool;

        #[method_id(@__retain_semantics Other userMorphology)]
        pub unsafe fn userMorphology() -> Id<NSMorphology, Shared>;
    }
);
