//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_protocol!(
    pub struct NSCopying;

    unsafe impl NSCopying {
        #[method_id(@__retain_semantics CopyOrMutCopy copyWithZone:)]
        pub unsafe fn copyWithZone(&self, zone: *mut NSZone) -> Id<Object, Shared>;
    }
);

extern_protocol!(
    pub struct NSMutableCopying;

    unsafe impl NSMutableCopying {
        #[method_id(@__retain_semantics CopyOrMutCopy mutableCopyWithZone:)]
        pub unsafe fn mutableCopyWithZone(&self, zone: *mut NSZone) -> Id<Object, Shared>;
    }
);

extern_protocol!(
    pub struct NSCoding;

    unsafe impl NSCoding {
        #[method(encodeWithCoder:)]
        pub unsafe fn encodeWithCoder(&self, coder: &NSCoder);

        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self, Shared>>;
    }
);

extern_protocol!(
    pub struct NSSecureCoding;

    unsafe impl NSSecureCoding {
        #[method(supportsSecureCoding)]
        pub unsafe fn supportsSecureCoding() -> bool;
    }
);

extern_methods!(
    /// NSCoderMethods
    unsafe impl NSObject {
        #[method(version)]
        pub unsafe fn version() -> NSInteger;

        #[method(setVersion:)]
        pub unsafe fn setVersion(aVersion: NSInteger);

        #[method(classForCoder)]
        pub unsafe fn classForCoder(&self) -> &'static Class;

        #[method_id(@__retain_semantics Other replacementObjectForCoder:)]
        pub unsafe fn replacementObjectForCoder(
            &self,
            coder: &NSCoder,
        ) -> Option<Id<Object, Shared>>;
    }
);

extern_methods!(
    /// NSDeprecatedMethods
    unsafe impl NSObject {
        #[method(poseAsClass:)]
        pub unsafe fn poseAsClass(aClass: &Class);
    }
);

extern_protocol!(
    pub struct NSDiscardableContent;

    unsafe impl NSDiscardableContent {
        #[method(beginContentAccess)]
        pub unsafe fn beginContentAccess(&self) -> bool;

        #[method(endContentAccess)]
        pub unsafe fn endContentAccess(&self);

        #[method(discardContentIfPossible)]
        pub unsafe fn discardContentIfPossible(&self);

        #[method(isContentDiscarded)]
        pub unsafe fn isContentDiscarded(&self) -> bool;
    }
);

extern_methods!(
    /// NSDiscardableContentProxy
    unsafe impl NSObject {
        #[method_id(@__retain_semantics Other autoContentAccessingProxy)]
        pub unsafe fn autoContentAccessingProxy(&self) -> Id<Object, Shared>;
    }
);

extern_fn!(
    pub unsafe fn NSAllocateObject(
        aClass: &Class,
        extraBytes: NSUInteger,
        zone: *mut NSZone,
    ) -> NonNull<Object>;
);

extern_fn!(
    pub unsafe fn NSDeallocateObject(object: &Object);
);

extern_fn!(
    pub unsafe fn NSCopyObject(
        object: &Object,
        extraBytes: NSUInteger,
        zone: *mut NSZone,
    ) -> NonNull<Object>;
);

extern_fn!(
    pub unsafe fn NSShouldRetainWithZone(anObject: &Object, requestedZone: *mut NSZone) -> Bool;
);

extern_fn!(
    pub unsafe fn NSIncrementExtraRefCount(object: &Object);
);

extern_fn!(
    pub unsafe fn NSDecrementExtraRefCountWasZero(object: &Object) -> Bool;
);

extern_fn!(
    pub unsafe fn NSExtraRefCount(object: &Object) -> NSUInteger;
);

inline_fn!(
    pub unsafe fn CFBridgingRetain(X: Option<&Object>) -> CFTypeRef {
        todo!()
    }
);

inline_fn!(
    pub unsafe fn CFBridgingRelease(X: CFTypeRef) -> *mut Object {
        todo!()
    }
);
