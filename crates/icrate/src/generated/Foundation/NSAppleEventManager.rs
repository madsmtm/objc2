//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern "C" {
    static NSAppleEventTimeOutDefault: c_double;
}

extern "C" {
    static NSAppleEventTimeOutNone: c_double;
}

extern "C" {
    static NSAppleEventManagerWillProcessFirstEventNotification: &'static NSNotificationName;
}

extern_class!(
    #[derive(Debug)]
    pub struct NSAppleEventManager;

    unsafe impl ClassType for NSAppleEventManager {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSAppleEventManager {
        #[method_id(sharedAppleEventManager)]
        pub unsafe fn sharedAppleEventManager() -> Id<NSAppleEventManager, Shared>;

        #[method(setEventHandler:andSelector:forEventClass:andEventID:)]
        pub unsafe fn setEventHandler_andSelector_forEventClass_andEventID(
            &self,
            handler: &Object,
            handleEventSelector: Sel,
            eventClass: AEEventClass,
            eventID: AEEventID,
        );

        #[method(removeEventHandlerForEventClass:andEventID:)]
        pub unsafe fn removeEventHandlerForEventClass_andEventID(
            &self,
            eventClass: AEEventClass,
            eventID: AEEventID,
        );

        #[method(dispatchRawAppleEvent:withRawReply:handlerRefCon:)]
        pub unsafe fn dispatchRawAppleEvent_withRawReply_handlerRefCon(
            &self,
            theAppleEvent: NonNull<AppleEvent>,
            theReply: NonNull<AppleEvent>,
            handlerRefCon: SRefCon,
        ) -> OSErr;

        #[method_id(currentAppleEvent)]
        pub unsafe fn currentAppleEvent(&self) -> Option<Id<NSAppleEventDescriptor, Shared>>;

        #[method_id(currentReplyAppleEvent)]
        pub unsafe fn currentReplyAppleEvent(&self) -> Option<Id<NSAppleEventDescriptor, Shared>>;

        #[method(suspendCurrentAppleEvent)]
        pub unsafe fn suspendCurrentAppleEvent(&self) -> NSAppleEventManagerSuspensionID;

        #[method_id(appleEventForSuspensionID:)]
        pub unsafe fn appleEventForSuspensionID(
            &self,
            suspensionID: NSAppleEventManagerSuspensionID,
        ) -> Id<NSAppleEventDescriptor, Shared>;

        #[method_id(replyAppleEventForSuspensionID:)]
        pub unsafe fn replyAppleEventForSuspensionID(
            &self,
            suspensionID: NSAppleEventManagerSuspensionID,
        ) -> Id<NSAppleEventDescriptor, Shared>;

        #[method(setCurrentAppleEventAndReplyEventWithSuspensionID:)]
        pub unsafe fn setCurrentAppleEventAndReplyEventWithSuspensionID(
            &self,
            suspensionID: NSAppleEventManagerSuspensionID,
        );

        #[method(resumeWithSuspensionID:)]
        pub unsafe fn resumeWithSuspensionID(&self, suspensionID: NSAppleEventManagerSuspensionID);
    }
);
