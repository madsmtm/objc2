//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;

pub type NSColorPanelMode = NSInteger;
pub const NSColorPanelModeNone: NSColorPanelMode = -1;
pub const NSColorPanelModeGray: NSColorPanelMode = 0;
pub const NSColorPanelModeRGB: NSColorPanelMode = 1;
pub const NSColorPanelModeCMYK: NSColorPanelMode = 2;
pub const NSColorPanelModeHSB: NSColorPanelMode = 3;
pub const NSColorPanelModeCustomPalette: NSColorPanelMode = 4;
pub const NSColorPanelModeColorList: NSColorPanelMode = 5;
pub const NSColorPanelModeWheel: NSColorPanelMode = 6;
pub const NSColorPanelModeCrayon: NSColorPanelMode = 7;

pub type NSColorPanelOptions = NSUInteger;
pub const NSColorPanelGrayModeMask: NSColorPanelOptions = 0x00000001;
pub const NSColorPanelRGBModeMask: NSColorPanelOptions = 0x00000002;
pub const NSColorPanelCMYKModeMask: NSColorPanelOptions = 0x00000004;
pub const NSColorPanelHSBModeMask: NSColorPanelOptions = 0x00000008;
pub const NSColorPanelCustomPaletteModeMask: NSColorPanelOptions = 0x00000010;
pub const NSColorPanelColorListModeMask: NSColorPanelOptions = 0x00000020;
pub const NSColorPanelWheelModeMask: NSColorPanelOptions = 0x00000040;
pub const NSColorPanelCrayonModeMask: NSColorPanelOptions = 0x00000080;
pub const NSColorPanelAllModesMask: NSColorPanelOptions = 0x0000ffff;

extern_class!(
    #[derive(Debug)]
    pub struct NSColorPanel;

    unsafe impl ClassType for NSColorPanel {
        type Super = NSPanel;
    }
);

extern_methods!(
    unsafe impl NSColorPanel {
        #[method_id(@__retain_semantics Other sharedColorPanel)]
        pub unsafe fn sharedColorPanel() -> Id<NSColorPanel, Shared>;

        #[method(sharedColorPanelExists)]
        pub unsafe fn sharedColorPanelExists() -> bool;

        #[method(dragColor:withEvent:fromView:)]
        pub unsafe fn dragColor_withEvent_fromView(
            color: &NSColor,
            event: &NSEvent,
            sourceView: &NSView,
        ) -> bool;

        #[method(setPickerMask:)]
        pub unsafe fn setPickerMask(mask: NSColorPanelOptions);

        #[method(setPickerMode:)]
        pub unsafe fn setPickerMode(mode: NSColorPanelMode);

        #[method_id(@__retain_semantics Other accessoryView)]
        pub unsafe fn accessoryView(&self) -> Option<Id<NSView, Shared>>;

        #[method(setAccessoryView:)]
        pub unsafe fn setAccessoryView(&self, accessoryView: Option<&NSView>);

        #[method(isContinuous)]
        pub unsafe fn isContinuous(&self) -> bool;

        #[method(setContinuous:)]
        pub unsafe fn setContinuous(&self, continuous: bool);

        #[method(showsAlpha)]
        pub unsafe fn showsAlpha(&self) -> bool;

        #[method(setShowsAlpha:)]
        pub unsafe fn setShowsAlpha(&self, showsAlpha: bool);

        #[method(mode)]
        pub unsafe fn mode(&self) -> NSColorPanelMode;

        #[method(setMode:)]
        pub unsafe fn setMode(&self, mode: NSColorPanelMode);

        #[method_id(@__retain_semantics Other color)]
        pub unsafe fn color(&self) -> Id<NSColor, Shared>;

        #[method(setColor:)]
        pub unsafe fn setColor(&self, color: &NSColor);

        #[method(alpha)]
        pub unsafe fn alpha(&self) -> CGFloat;

        #[method(setAction:)]
        pub unsafe fn setAction(&self, selector: Option<Sel>);

        #[method(setTarget:)]
        pub unsafe fn setTarget(&self, target: Option<&Object>);

        #[method(attachColorList:)]
        pub unsafe fn attachColorList(&self, colorList: &NSColorList);

        #[method(detachColorList:)]
        pub unsafe fn detachColorList(&self, colorList: &NSColorList);
    }
);

extern_methods!(
    /// NSColorPanel
    unsafe impl NSApplication {
        #[method(orderFrontColorPanel:)]
        pub unsafe fn orderFrontColorPanel(&self, sender: Option<&Object>);
    }
);

pub type NSColorChanging = NSObject;

extern_methods!(
    /// NSColorPanelResponderMethod
    unsafe impl NSObject {
        #[method(changeColor:)]
        pub unsafe fn changeColor(&self, sender: Option<&Object>);
    }
);

extern "C" {
    pub static NSColorPanelColorDidChangeNotification: &'static NSNotificationName;
}

pub static NSNoModeColorPanel: NSColorPanelMode = NSColorPanelModeNone;

pub static NSGrayModeColorPanel: NSColorPanelMode = NSColorPanelModeGray;

pub static NSRGBModeColorPanel: NSColorPanelMode = NSColorPanelModeRGB;

pub static NSCMYKModeColorPanel: NSColorPanelMode = NSColorPanelModeCMYK;

pub static NSHSBModeColorPanel: NSColorPanelMode = NSColorPanelModeHSB;

pub static NSCustomPaletteModeColorPanel: NSColorPanelMode = NSColorPanelModeCustomPalette;

pub static NSColorListModeColorPanel: NSColorPanelMode = NSColorPanelModeColorList;

pub static NSWheelModeColorPanel: NSColorPanelMode = NSColorPanelModeWheel;

pub static NSCrayonModeColorPanel: NSColorPanelMode = NSColorPanelModeCrayon;
