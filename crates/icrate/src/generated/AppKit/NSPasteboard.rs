//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;

pub type NSPasteboardType = NSString;

extern "C" {
    pub static NSPasteboardTypeString: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypePDF: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeTIFF: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypePNG: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeRTF: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeRTFD: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeHTML: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeTabularText: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeFont: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeRuler: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeColor: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeSound: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeMultipleTextSelection: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeTextFinderOptions: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeURL: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeFileURL: &'static NSPasteboardType;
}

pub type NSPasteboardName = NSString;

extern "C" {
    pub static NSPasteboardNameGeneral: &'static NSPasteboardName;
}

extern "C" {
    pub static NSPasteboardNameFont: &'static NSPasteboardName;
}

extern "C" {
    pub static NSPasteboardNameRuler: &'static NSPasteboardName;
}

extern "C" {
    pub static NSPasteboardNameFind: &'static NSPasteboardName;
}

extern "C" {
    pub static NSPasteboardNameDrag: &'static NSPasteboardName;
}

pub type NSPasteboardContentsOptions = NSUInteger;
pub const NSPasteboardContentsCurrentHostOnly: NSPasteboardContentsOptions = 1 << 0;

pub type NSPasteboardReadingOptionKey = NSString;

extern "C" {
    pub static NSPasteboardURLReadingFileURLsOnlyKey: &'static NSPasteboardReadingOptionKey;
}

extern "C" {
    pub static NSPasteboardURLReadingContentsConformToTypesKey:
        &'static NSPasteboardReadingOptionKey;
}

extern_class!(
    #[derive(Debug)]
    pub struct NSPasteboard;

    unsafe impl ClassType for NSPasteboard {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSPasteboard {
        #[method_id(generalPasteboard)]
        pub unsafe fn generalPasteboard() -> Id<NSPasteboard, Shared>;

        #[method_id(pasteboardWithName:)]
        pub unsafe fn pasteboardWithName(name: &NSPasteboardName) -> Id<NSPasteboard, Shared>;

        #[method_id(pasteboardWithUniqueName)]
        pub unsafe fn pasteboardWithUniqueName() -> Id<NSPasteboard, Shared>;

        #[method_id(name)]
        pub unsafe fn name(&self) -> Id<NSPasteboardName, Shared>;

        #[method(changeCount)]
        pub unsafe fn changeCount(&self) -> NSInteger;

        #[method(prepareForNewContentsWithOptions:)]
        pub unsafe fn prepareForNewContentsWithOptions(
            &self,
            options: NSPasteboardContentsOptions,
        ) -> NSInteger;

        #[method(clearContents)]
        pub unsafe fn clearContents(&self) -> NSInteger;

        #[method(writeObjects:)]
        pub unsafe fn writeObjects(&self, objects: &NSArray<NSPasteboardWriting>) -> bool;

        #[method_id(readObjectsForClasses:options:)]
        pub unsafe fn readObjectsForClasses_options(
            &self,
            classArray: &NSArray<TodoClass>,
            options: Option<&NSDictionary<NSPasteboardReadingOptionKey, Object>>,
        ) -> Option<Id<NSArray, Shared>>;

        #[method_id(pasteboardItems)]
        pub unsafe fn pasteboardItems(&self) -> Option<Id<NSArray<NSPasteboardItem>, Shared>>;

        #[method(indexOfPasteboardItem:)]
        pub unsafe fn indexOfPasteboardItem(&self, pasteboardItem: &NSPasteboardItem)
            -> NSUInteger;

        #[method(canReadItemWithDataConformingToTypes:)]
        pub unsafe fn canReadItemWithDataConformingToTypes(
            &self,
            types: &NSArray<NSString>,
        ) -> bool;

        #[method(canReadObjectForClasses:options:)]
        pub unsafe fn canReadObjectForClasses_options(
            &self,
            classArray: &NSArray<TodoClass>,
            options: Option<&NSDictionary<NSPasteboardReadingOptionKey, Object>>,
        ) -> bool;

        #[method(declareTypes:owner:)]
        pub unsafe fn declareTypes_owner(
            &self,
            newTypes: &NSArray<NSPasteboardType>,
            newOwner: Option<&Object>,
        ) -> NSInteger;

        #[method(addTypes:owner:)]
        pub unsafe fn addTypes_owner(
            &self,
            newTypes: &NSArray<NSPasteboardType>,
            newOwner: Option<&Object>,
        ) -> NSInteger;

        #[method_id(types)]
        pub unsafe fn types(&self) -> Option<Id<NSArray<NSPasteboardType>, Shared>>;

        #[method_id(availableTypeFromArray:)]
        pub unsafe fn availableTypeFromArray(
            &self,
            types: &NSArray<NSPasteboardType>,
        ) -> Option<Id<NSPasteboardType, Shared>>;

        #[method(setData:forType:)]
        pub unsafe fn setData_forType(
            &self,
            data: Option<&NSData>,
            dataType: &NSPasteboardType,
        ) -> bool;

        #[method(setPropertyList:forType:)]
        pub unsafe fn setPropertyList_forType(
            &self,
            plist: &Object,
            dataType: &NSPasteboardType,
        ) -> bool;

        #[method(setString:forType:)]
        pub unsafe fn setString_forType(
            &self,
            string: &NSString,
            dataType: &NSPasteboardType,
        ) -> bool;

        #[method_id(dataForType:)]
        pub unsafe fn dataForType(&self, dataType: &NSPasteboardType)
            -> Option<Id<NSData, Shared>>;

        #[method_id(propertyListForType:)]
        pub unsafe fn propertyListForType(
            &self,
            dataType: &NSPasteboardType,
        ) -> Option<Id<Object, Shared>>;

        #[method_id(stringForType:)]
        pub unsafe fn stringForType(
            &self,
            dataType: &NSPasteboardType,
        ) -> Option<Id<NSString, Shared>>;
    }
);

extern_methods!(
    /// FilterServices
    unsafe impl NSPasteboard {
        #[method_id(typesFilterableTo:)]
        pub unsafe fn typesFilterableTo(
            type_: &NSPasteboardType,
        ) -> Id<NSArray<NSPasteboardType>, Shared>;

        #[method_id(pasteboardByFilteringFile:)]
        pub unsafe fn pasteboardByFilteringFile(filename: &NSString) -> Id<NSPasteboard, Shared>;

        #[method_id(pasteboardByFilteringData:ofType:)]
        pub unsafe fn pasteboardByFilteringData_ofType(
            data: &NSData,
            type_: &NSPasteboardType,
        ) -> Id<NSPasteboard, Shared>;

        #[method_id(pasteboardByFilteringTypesInPasteboard:)]
        pub unsafe fn pasteboardByFilteringTypesInPasteboard(
            pboard: &NSPasteboard,
        ) -> Id<NSPasteboard, Shared>;
    }
);

pub type NSPasteboardTypeOwner = NSObject;

extern_methods!(
    /// NSPasteboardOwner
    unsafe impl NSObject {
        #[method(pasteboard:provideDataForType:)]
        pub unsafe fn pasteboard_provideDataForType(
            &self,
            sender: &NSPasteboard,
            type_: &NSPasteboardType,
        );

        #[method(pasteboardChangedOwner:)]
        pub unsafe fn pasteboardChangedOwner(&self, sender: &NSPasteboard);
    }
);

pub type NSPasteboardWritingOptions = NSUInteger;
pub const NSPasteboardWritingPromised: NSPasteboardWritingOptions = 1 << 9;

pub type NSPasteboardWriting = NSObject;

pub type NSPasteboardReadingOptions = NSUInteger;
pub const NSPasteboardReadingAsData: NSPasteboardReadingOptions = 0;
pub const NSPasteboardReadingAsString: NSPasteboardReadingOptions = 1 << 0;
pub const NSPasteboardReadingAsPropertyList: NSPasteboardReadingOptions = 1 << 1;
pub const NSPasteboardReadingAsKeyedArchive: NSPasteboardReadingOptions = 1 << 2;

pub type NSPasteboardReading = NSObject;

extern_methods!(
    /// NSPasteboardSupport
    unsafe impl NSURL {
        #[method_id(URLFromPasteboard:)]
        pub unsafe fn URLFromPasteboard(pasteBoard: &NSPasteboard) -> Option<Id<NSURL, Shared>>;

        #[method(writeToPasteboard:)]
        pub unsafe fn writeToPasteboard(&self, pasteBoard: &NSPasteboard);
    }
);

extern_methods!(
    /// NSPasteboardSupport
    unsafe impl NSString {}
);

extern_methods!(
    /// NSFileContents
    unsafe impl NSPasteboard {
        #[method(writeFileContents:)]
        pub unsafe fn writeFileContents(&self, filename: &NSString) -> bool;

        #[method_id(readFileContentsType:toFile:)]
        pub unsafe fn readFileContentsType_toFile(
            &self,
            type_: Option<&NSPasteboardType>,
            filename: &NSString,
        ) -> Option<Id<NSString, Shared>>;

        #[method(writeFileWrapper:)]
        pub unsafe fn writeFileWrapper(&self, wrapper: &NSFileWrapper) -> bool;

        #[method_id(readFileWrapper)]
        pub unsafe fn readFileWrapper(&self) -> Option<Id<NSFileWrapper, Shared>>;
    }
);

extern "C" {
    pub static NSFileContentsPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSStringPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSFilenamesPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSTIFFPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSRTFPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSTabularTextPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSFontPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSRulerPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSColorPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSRTFDPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSHTMLPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSURLPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPDFPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSMultipleTextSelectionPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPostScriptPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSVCardPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSInkTextPboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSFilesPromisePboardType: &'static NSPasteboardType;
}

extern "C" {
    pub static NSPasteboardTypeFindPanelSearchOptions: &'static NSPasteboardType;
}

extern "C" {
    pub static NSGeneralPboard: &'static NSPasteboardName;
}

extern "C" {
    pub static NSFontPboard: &'static NSPasteboardName;
}

extern "C" {
    pub static NSRulerPboard: &'static NSPasteboardName;
}

extern "C" {
    pub static NSFindPboard: &'static NSPasteboardName;
}

extern "C" {
    pub static NSDragPboard: &'static NSPasteboardName;
}

extern "C" {
    pub static NSPICTPboardType: &'static NSPasteboardType;
}
