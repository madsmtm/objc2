//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_options!(
    #[underlying(NSUInteger)]
    pub enum NSTextStorageEditActions {
        NSTextStorageEditedAttributes = 1 << 0,
        NSTextStorageEditedCharacters = 1 << 1,
    }
);

extern_class!(
    #[derive(Debug)]
    pub struct NSTextStorage;

    unsafe impl ClassType for NSTextStorage {
        type Super = NSMutableAttributedString;
    }
);

extern_methods!(
    unsafe impl NSTextStorage {
        #[method_id(@__retain_semantics Other layoutManagers)]
        pub unsafe fn layoutManagers(&self) -> Id<NSArray<NSLayoutManager>, Shared>;

        #[method(addLayoutManager:)]
        pub unsafe fn addLayoutManager(&self, aLayoutManager: &NSLayoutManager);

        #[method(removeLayoutManager:)]
        pub unsafe fn removeLayoutManager(&self, aLayoutManager: &NSLayoutManager);

        #[method(editedMask)]
        pub unsafe fn editedMask(&self) -> NSTextStorageEditActions;

        #[method(editedRange)]
        pub unsafe fn editedRange(&self) -> NSRange;

        #[method(changeInLength)]
        pub unsafe fn changeInLength(&self) -> NSInteger;

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<NSTextStorageDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&NSTextStorageDelegate>);

        #[method(edited:range:changeInLength:)]
        pub unsafe fn edited_range_changeInLength(
            &self,
            editedMask: NSTextStorageEditActions,
            editedRange: NSRange,
            delta: NSInteger,
        );

        #[method(processEditing)]
        pub unsafe fn processEditing(&self);

        #[method(fixesAttributesLazily)]
        pub unsafe fn fixesAttributesLazily(&self) -> bool;

        #[method(invalidateAttributesInRange:)]
        pub unsafe fn invalidateAttributesInRange(&self, range: NSRange);

        #[method(ensureAttributesAreFixedInRange:)]
        pub unsafe fn ensureAttributesAreFixedInRange(&self, range: NSRange);

        #[method_id(@__retain_semantics Other textStorageObserver)]
        pub unsafe fn textStorageObserver(&self) -> Option<Id<NSTextStorageObserving, Shared>>;

        #[method(setTextStorageObserver:)]
        pub unsafe fn setTextStorageObserver(
            &self,
            textStorageObserver: Option<&NSTextStorageObserving>,
        );
    }
);

extern_protocol!(
    pub struct NSTextStorageDelegate;

    unsafe impl NSTextStorageDelegate {
        #[optional]
        #[method(textStorage:willProcessEditing:range:changeInLength:)]
        pub unsafe fn textStorage_willProcessEditing_range_changeInLength(
            &self,
            textStorage: &NSTextStorage,
            editedMask: NSTextStorageEditActions,
            editedRange: NSRange,
            delta: NSInteger,
        );

        #[optional]
        #[method(textStorage:didProcessEditing:range:changeInLength:)]
        pub unsafe fn textStorage_didProcessEditing_range_changeInLength(
            &self,
            textStorage: &NSTextStorage,
            editedMask: NSTextStorageEditActions,
            editedRange: NSRange,
            delta: NSInteger,
        );
    }
);

extern_static!(NSTextStorageWillProcessEditingNotification: &'static NSNotificationName);

extern_static!(NSTextStorageDidProcessEditingNotification: &'static NSNotificationName);

extern_protocol!(
    pub struct NSTextStorageObserving;

    unsafe impl NSTextStorageObserving {
        #[method_id(@__retain_semantics Other textStorage)]
        pub unsafe fn textStorage(&self) -> Option<Id<NSTextStorage, Shared>>;

        #[method(setTextStorage:)]
        pub unsafe fn setTextStorage(&self, textStorage: Option<&NSTextStorage>);

        #[method(processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:)]
        pub unsafe fn processEditingForTextStorage_edited_range_changeInLength_invalidatedRange(
            &self,
            textStorage: &NSTextStorage,
            editMask: NSTextStorageEditActions,
            newCharRange: NSRange,
            delta: NSInteger,
            invalidatedCharRange: NSRange,
        );

        #[method(performEditingTransactionForTextStorage:usingBlock:)]
        pub unsafe fn performEditingTransactionForTextStorage_usingBlock(
            &self,
            textStorage: &NSTextStorage,
            transaction: &Block<(), ()>,
        );
    }
);

pub type NSTextStorageEditedOptions = NSUInteger;

extern_methods!(
    /// NSDeprecatedTextStorageDelegateInterface
    unsafe impl NSObject {
        #[method(textStorageWillProcessEditing:)]
        pub unsafe fn textStorageWillProcessEditing(&self, notification: &NSNotification);

        #[method(textStorageDidProcessEditing:)]
        pub unsafe fn textStorageDidProcessEditing(&self, notification: &NSNotification);
    }
);
