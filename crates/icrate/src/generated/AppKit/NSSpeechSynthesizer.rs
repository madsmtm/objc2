//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#[allow(unused_imports)]
use objc2::rc::{Id, Shared};
#[allow(unused_imports)]
use objc2::{extern_class, extern_methods, ClassType};

pub type NSSpeechSynthesizerVoiceName = NSString;

pub type NSVoiceAttributeKey = NSString;

extern "C" {
    static NSVoiceName: &'static NSVoiceAttributeKey;
}

extern "C" {
    static NSVoiceIdentifier: &'static NSVoiceAttributeKey;
}

extern "C" {
    static NSVoiceAge: &'static NSVoiceAttributeKey;
}

extern "C" {
    static NSVoiceGender: &'static NSVoiceAttributeKey;
}

extern "C" {
    static NSVoiceDemoText: &'static NSVoiceAttributeKey;
}

extern "C" {
    static NSVoiceLocaleIdentifier: &'static NSVoiceAttributeKey;
}

extern "C" {
    static NSVoiceSupportedCharacters: &'static NSVoiceAttributeKey;
}

extern "C" {
    static NSVoiceIndividuallySpokenCharacters: &'static NSVoiceAttributeKey;
}

pub type NSSpeechDictionaryKey = NSString;

extern "C" {
    static NSSpeechDictionaryLocaleIdentifier: &'static NSSpeechDictionaryKey;
}

extern "C" {
    static NSSpeechDictionaryModificationDate: &'static NSSpeechDictionaryKey;
}

extern "C" {
    static NSSpeechDictionaryPronunciations: &'static NSSpeechDictionaryKey;
}

extern "C" {
    static NSSpeechDictionaryAbbreviations: &'static NSSpeechDictionaryKey;
}

extern "C" {
    static NSSpeechDictionaryEntrySpelling: &'static NSSpeechDictionaryKey;
}

extern "C" {
    static NSSpeechDictionaryEntryPhonemes: &'static NSSpeechDictionaryKey;
}

pub type NSVoiceGenderName = NSString;

extern "C" {
    static NSVoiceGenderNeuter: &'static NSVoiceGenderName;
}

extern "C" {
    static NSVoiceGenderMale: &'static NSVoiceGenderName;
}

extern "C" {
    static NSVoiceGenderFemale: &'static NSVoiceGenderName;
}

extern "C" {
    static NSVoiceGenderNeutral: &'static NSVoiceGenderName;
}

pub type NSSpeechPropertyKey = NSString;

extern "C" {
    static NSSpeechStatusProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechErrorsProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechInputModeProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechCharacterModeProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechNumberModeProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechRateProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechPitchBaseProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechPitchModProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechVolumeProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechSynthesizerInfoProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechRecentSyncProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechPhonemeSymbolsProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechCurrentVoiceProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechCommandDelimiterProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechResetProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSSpeechOutputToFileURLProperty: &'static NSSpeechPropertyKey;
}

extern "C" {
    static NSVoiceLanguage: &'static NSVoiceAttributeKey;
}

pub type NSSpeechBoundary = NSUInteger;
pub const NSSpeechImmediateBoundary: NSSpeechBoundary = 0;
pub const NSSpeechWordBoundary: NSSpeechBoundary = 1;
pub const NSSpeechSentenceBoundary: NSSpeechBoundary = 2;

extern_class!(
    #[derive(Debug)]
    pub struct NSSpeechSynthesizer;

    unsafe impl ClassType for NSSpeechSynthesizer {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSSpeechSynthesizer {
        #[method_id(initWithVoice:)]
        pub unsafe fn initWithVoice(
            &self,
            voice: Option<&NSSpeechSynthesizerVoiceName>,
        ) -> Option<Id<Self, Shared>>;

        #[method(startSpeakingString:)]
        pub unsafe fn startSpeakingString(&self, string: &NSString) -> bool;

        #[method(startSpeakingString:toURL:)]
        pub unsafe fn startSpeakingString_toURL(&self, string: &NSString, url: &NSURL) -> bool;

        #[method(isSpeaking)]
        pub unsafe fn isSpeaking(&self) -> bool;

        #[method(stopSpeaking)]
        pub unsafe fn stopSpeaking(&self);

        #[method(stopSpeakingAtBoundary:)]
        pub unsafe fn stopSpeakingAtBoundary(&self, boundary: NSSpeechBoundary);

        #[method(pauseSpeakingAtBoundary:)]
        pub unsafe fn pauseSpeakingAtBoundary(&self, boundary: NSSpeechBoundary);

        #[method(continueSpeaking)]
        pub unsafe fn continueSpeaking(&self);

        #[method_id(delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<NSSpeechSynthesizerDelegate, Shared>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&NSSpeechSynthesizerDelegate>);

        #[method_id(voice)]
        pub unsafe fn voice(&self) -> Option<Id<NSSpeechSynthesizerVoiceName, Shared>>;

        #[method(setVoice:)]
        pub unsafe fn setVoice(&self, voice: Option<&NSSpeechSynthesizerVoiceName>) -> bool;

        #[method(rate)]
        pub unsafe fn rate(&self) -> c_float;

        #[method(setRate:)]
        pub unsafe fn setRate(&self, rate: c_float);

        #[method(volume)]
        pub unsafe fn volume(&self) -> c_float;

        #[method(setVolume:)]
        pub unsafe fn setVolume(&self, volume: c_float);

        #[method(usesFeedbackWindow)]
        pub unsafe fn usesFeedbackWindow(&self) -> bool;

        #[method(setUsesFeedbackWindow:)]
        pub unsafe fn setUsesFeedbackWindow(&self, usesFeedbackWindow: bool);

        #[method(addSpeechDictionary:)]
        pub unsafe fn addSpeechDictionary(
            &self,
            speechDictionary: &NSDictionary<NSSpeechDictionaryKey, Object>,
        );

        #[method_id(phonemesFromText:)]
        pub unsafe fn phonemesFromText(&self, text: &NSString) -> Id<NSString, Shared>;

        #[method_id(objectForProperty:error:)]
        pub unsafe fn objectForProperty_error(
            &self,
            property: &NSSpeechPropertyKey,
        ) -> Result<Id<Object, Shared>, Id<NSError, Shared>>;

        #[method(setObject:forProperty:error:)]
        pub unsafe fn setObject_forProperty_error(
            &self,
            object: Option<&Object>,
            property: &NSSpeechPropertyKey,
        ) -> Result<(), Id<NSError, Shared>>;

        #[method(isAnyApplicationSpeaking)]
        pub unsafe fn isAnyApplicationSpeaking() -> bool;

        #[method_id(defaultVoice)]
        pub unsafe fn defaultVoice() -> Id<NSSpeechSynthesizerVoiceName, Shared>;

        #[method_id(availableVoices)]
        pub unsafe fn availableVoices() -> Id<NSArray<NSSpeechSynthesizerVoiceName>, Shared>;

        #[method_id(attributesForVoice:)]
        pub unsafe fn attributesForVoice(
            voice: &NSSpeechSynthesizerVoiceName,
        ) -> Id<NSDictionary<NSVoiceAttributeKey, Object>, Shared>;
    }
);

pub type NSSpeechSynthesizerDelegate = NSObject;

pub type NSSpeechMode = NSString;

extern "C" {
    static NSSpeechModeText: &'static NSSpeechMode;
}

extern "C" {
    static NSSpeechModePhoneme: &'static NSSpeechMode;
}

extern "C" {
    static NSSpeechModeNormal: &'static NSSpeechMode;
}

extern "C" {
    static NSSpeechModeLiteral: &'static NSSpeechMode;
}

pub type NSSpeechStatusKey = NSString;

extern "C" {
    static NSSpeechStatusOutputBusy: &'static NSSpeechStatusKey;
}

extern "C" {
    static NSSpeechStatusOutputPaused: &'static NSSpeechStatusKey;
}

extern "C" {
    static NSSpeechStatusNumberOfCharactersLeft: &'static NSSpeechStatusKey;
}

extern "C" {
    static NSSpeechStatusPhonemeCode: &'static NSSpeechStatusKey;
}

pub type NSSpeechErrorKey = NSString;

extern "C" {
    static NSSpeechErrorCount: &'static NSSpeechErrorKey;
}

extern "C" {
    static NSSpeechErrorOldestCode: &'static NSSpeechErrorKey;
}

extern "C" {
    static NSSpeechErrorOldestCharacterOffset: &'static NSSpeechErrorKey;
}

extern "C" {
    static NSSpeechErrorNewestCode: &'static NSSpeechErrorKey;
}

extern "C" {
    static NSSpeechErrorNewestCharacterOffset: &'static NSSpeechErrorKey;
}

pub type NSSpeechSynthesizerInfoKey = NSString;

extern "C" {
    static NSSpeechSynthesizerInfoIdentifier: &'static NSSpeechSynthesizerInfoKey;
}

extern "C" {
    static NSSpeechSynthesizerInfoVersion: &'static NSSpeechSynthesizerInfoKey;
}

pub type NSSpeechPhonemeInfoKey = NSString;

extern "C" {
    static NSSpeechPhonemeInfoOpcode: &'static NSSpeechPhonemeInfoKey;
}

extern "C" {
    static NSSpeechPhonemeInfoSymbol: &'static NSSpeechPhonemeInfoKey;
}

extern "C" {
    static NSSpeechPhonemeInfoExample: &'static NSSpeechPhonemeInfoKey;
}

extern "C" {
    static NSSpeechPhonemeInfoHiliteStart: &'static NSSpeechPhonemeInfoKey;
}

extern "C" {
    static NSSpeechPhonemeInfoHiliteEnd: &'static NSSpeechPhonemeInfoKey;
}

pub type NSSpeechCommandDelimiterKey = NSString;

extern "C" {
    static NSSpeechCommandPrefix: &'static NSSpeechCommandDelimiterKey;
}

extern "C" {
    static NSSpeechCommandSuffix: &'static NSSpeechCommandDelimiterKey;
}
