//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Foundation::*;

pub type NSOpenGLGlobalOption = u32;
pub const NSOpenGLGOFormatCacheSize: NSOpenGLGlobalOption = 501;
pub const NSOpenGLGOClearFormatCache: NSOpenGLGlobalOption = 502;
pub const NSOpenGLGORetainRenderers: NSOpenGLGlobalOption = 503;
pub const NSOpenGLGOUseBuildCache: NSOpenGLGlobalOption = 506;
pub const NSOpenGLGOResetLibrary: NSOpenGLGlobalOption = 504;

pub const NSOpenGLPFAAllRenderers: i32 = 1;
pub const NSOpenGLPFATripleBuffer: i32 = 3;
pub const NSOpenGLPFADoubleBuffer: i32 = 5;
pub const NSOpenGLPFAAuxBuffers: i32 = 7;
pub const NSOpenGLPFAColorSize: i32 = 8;
pub const NSOpenGLPFAAlphaSize: i32 = 11;
pub const NSOpenGLPFADepthSize: i32 = 12;
pub const NSOpenGLPFAStencilSize: i32 = 13;
pub const NSOpenGLPFAAccumSize: i32 = 14;
pub const NSOpenGLPFAMinimumPolicy: i32 = 51;
pub const NSOpenGLPFAMaximumPolicy: i32 = 52;
pub const NSOpenGLPFASampleBuffers: i32 = 55;
pub const NSOpenGLPFASamples: i32 = 56;
pub const NSOpenGLPFAAuxDepthStencil: i32 = 57;
pub const NSOpenGLPFAColorFloat: i32 = 58;
pub const NSOpenGLPFAMultisample: i32 = 59;
pub const NSOpenGLPFASupersample: i32 = 60;
pub const NSOpenGLPFASampleAlpha: i32 = 61;
pub const NSOpenGLPFARendererID: i32 = 70;
pub const NSOpenGLPFANoRecovery: i32 = 72;
pub const NSOpenGLPFAAccelerated: i32 = 73;
pub const NSOpenGLPFAClosestPolicy: i32 = 74;
pub const NSOpenGLPFABackingStore: i32 = 76;
pub const NSOpenGLPFAScreenMask: i32 = 84;
pub const NSOpenGLPFAAllowOfflineRenderers: i32 = 96;
pub const NSOpenGLPFAAcceleratedCompute: i32 = 97;
pub const NSOpenGLPFAOpenGLProfile: i32 = 99;
pub const NSOpenGLPFAVirtualScreenCount: i32 = 128;
pub const NSOpenGLPFAStereo: i32 = 6;
pub const NSOpenGLPFAOffScreen: i32 = 53;
pub const NSOpenGLPFAFullScreen: i32 = 54;
pub const NSOpenGLPFASingleRenderer: i32 = 71;
pub const NSOpenGLPFARobust: i32 = 75;
pub const NSOpenGLPFAMPSafe: i32 = 78;
pub const NSOpenGLPFAWindow: i32 = 80;
pub const NSOpenGLPFAMultiScreen: i32 = 81;
pub const NSOpenGLPFACompliant: i32 = 83;
pub const NSOpenGLPFAPixelBuffer: i32 = 90;
pub const NSOpenGLPFARemotePixelBuffer: i32 = 91;

pub type NSOpenGLPixelFormatAttribute = u32;

pub const NSOpenGLProfileVersionLegacy: i32 = 0x1000;
pub const NSOpenGLProfileVersion3_2Core: i32 = 0x3200;
pub const NSOpenGLProfileVersion4_1Core: i32 = 0x4100;

extern_class!(
    #[derive(Debug)]
    pub struct NSOpenGLPixelFormat;

    unsafe impl ClassType for NSOpenGLPixelFormat {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSOpenGLPixelFormat {
        #[method_id(initWithCGLPixelFormatObj:)]
        pub unsafe fn initWithCGLPixelFormatObj(
            this: Option<Allocated<Self>>,
            format: CGLPixelFormatObj,
        ) -> Option<Id<NSOpenGLPixelFormat, Shared>>;

        #[method_id(initWithAttributes:)]
        pub unsafe fn initWithAttributes(
            this: Option<Allocated<Self>>,
            attribs: NonNull<NSOpenGLPixelFormatAttribute>,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(initWithData:)]
        pub unsafe fn initWithData(
            this: Option<Allocated<Self>>,
            attribs: Option<&NSData>,
        ) -> Option<Id<Object, Shared>>;

        #[method_id(attributes)]
        pub unsafe fn attributes(&self) -> Option<Id<NSData, Shared>>;

        #[method(setAttributes:)]
        pub unsafe fn setAttributes(&self, attribs: Option<&NSData>);

        #[method(getValues:forAttribute:forVirtualScreen:)]
        pub unsafe fn getValues_forAttribute_forVirtualScreen(
            &self,
            vals: NonNull<GLint>,
            attrib: NSOpenGLPixelFormatAttribute,
            screen: GLint,
        );

        #[method(numberOfVirtualScreens)]
        pub unsafe fn numberOfVirtualScreens(&self) -> GLint;

        #[method(CGLPixelFormatObj)]
        pub unsafe fn CGLPixelFormatObj(&self) -> CGLPixelFormatObj;
    }
);

extern_class!(
    #[derive(Debug)]
    pub struct NSOpenGLPixelBuffer;

    unsafe impl ClassType for NSOpenGLPixelBuffer {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSOpenGLPixelBuffer {
        #[method_id(initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:)]
        pub unsafe fn initWithTextureTarget_textureInternalFormat_textureMaxMipMapLevel_pixelsWide_pixelsHigh(
            this: Option<Allocated<Self>>,
            target: GLenum,
            format: GLenum,
            maxLevel: GLint,
            pixelsWide: GLsizei,
            pixelsHigh: GLsizei,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(initWithCGLPBufferObj:)]
        pub unsafe fn initWithCGLPBufferObj(
            this: Option<Allocated<Self>>,
            pbuffer: CGLPBufferObj,
        ) -> Option<Id<NSOpenGLPixelBuffer, Shared>>;

        #[method(CGLPBufferObj)]
        pub unsafe fn CGLPBufferObj(&self) -> CGLPBufferObj;

        #[method(pixelsWide)]
        pub unsafe fn pixelsWide(&self) -> GLsizei;

        #[method(pixelsHigh)]
        pub unsafe fn pixelsHigh(&self) -> GLsizei;

        #[method(textureTarget)]
        pub unsafe fn textureTarget(&self) -> GLenum;

        #[method(textureInternalFormat)]
        pub unsafe fn textureInternalFormat(&self) -> GLenum;

        #[method(textureMaxMipMapLevel)]
        pub unsafe fn textureMaxMipMapLevel(&self) -> GLint;
    }
);

pub type NSOpenGLContextParameter = NSInteger;
pub const NSOpenGLContextParameterSwapInterval: NSOpenGLContextParameter = 222;
pub const NSOpenGLContextParameterSurfaceOrder: NSOpenGLContextParameter = 235;
pub const NSOpenGLContextParameterSurfaceOpacity: NSOpenGLContextParameter = 236;
pub const NSOpenGLContextParameterSurfaceBackingSize: NSOpenGLContextParameter = 304;
pub const NSOpenGLContextParameterReclaimResources: NSOpenGLContextParameter = 308;
pub const NSOpenGLContextParameterCurrentRendererID: NSOpenGLContextParameter = 309;
pub const NSOpenGLContextParameterGPUVertexProcessing: NSOpenGLContextParameter = 310;
pub const NSOpenGLContextParameterGPUFragmentProcessing: NSOpenGLContextParameter = 311;
pub const NSOpenGLContextParameterHasDrawable: NSOpenGLContextParameter = 314;
pub const NSOpenGLContextParameterMPSwapsInFlight: NSOpenGLContextParameter = 315;
pub const NSOpenGLContextParameterSwapRectangle: NSOpenGLContextParameter = 200;
pub const NSOpenGLContextParameterSwapRectangleEnable: NSOpenGLContextParameter = 201;
pub const NSOpenGLContextParameterRasterizationEnable: NSOpenGLContextParameter = 221;
pub const NSOpenGLContextParameterStateValidation: NSOpenGLContextParameter = 301;
pub const NSOpenGLContextParameterSurfaceSurfaceVolatile: NSOpenGLContextParameter = 306;

extern_class!(
    #[derive(Debug)]
    pub struct NSOpenGLContext;

    unsafe impl ClassType for NSOpenGLContext {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSOpenGLContext {
        #[method_id(initWithFormat:shareContext:)]
        pub unsafe fn initWithFormat_shareContext(
            this: Option<Allocated<Self>>,
            format: &NSOpenGLPixelFormat,
            share: Option<&NSOpenGLContext>,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(initWithCGLContextObj:)]
        pub unsafe fn initWithCGLContextObj(
            this: Option<Allocated<Self>>,
            context: CGLContextObj,
        ) -> Option<Id<NSOpenGLContext, Shared>>;

        #[method_id(pixelFormat)]
        pub unsafe fn pixelFormat(&self) -> Id<NSOpenGLPixelFormat, Shared>;

        #[method_id(view)]
        pub unsafe fn view(&self) -> Option<Id<NSView, Shared>>;

        #[method(setView:)]
        pub unsafe fn setView(&self, view: Option<&NSView>);

        #[method(setFullScreen)]
        pub unsafe fn setFullScreen(&self);

        #[method(setOffScreen:width:height:rowbytes:)]
        pub unsafe fn setOffScreen_width_height_rowbytes(
            &self,
            baseaddr: NonNull<c_void>,
            width: GLsizei,
            height: GLsizei,
            rowbytes: GLint,
        );

        #[method(clearDrawable)]
        pub unsafe fn clearDrawable(&self);

        #[method(update)]
        pub unsafe fn update(&self);

        #[method(flushBuffer)]
        pub unsafe fn flushBuffer(&self);

        #[method(makeCurrentContext)]
        pub unsafe fn makeCurrentContext(&self);

        #[method(clearCurrentContext)]
        pub unsafe fn clearCurrentContext();

        #[method_id(currentContext)]
        pub unsafe fn currentContext() -> Option<Id<NSOpenGLContext, Shared>>;

        #[method(copyAttributesFromContext:withMask:)]
        pub unsafe fn copyAttributesFromContext_withMask(
            &self,
            context: &NSOpenGLContext,
            mask: GLbitfield,
        );

        #[method(setValues:forParameter:)]
        pub unsafe fn setValues_forParameter(
            &self,
            vals: NonNull<GLint>,
            param: NSOpenGLContextParameter,
        );

        #[method(getValues:forParameter:)]
        pub unsafe fn getValues_forParameter(
            &self,
            vals: NonNull<GLint>,
            param: NSOpenGLContextParameter,
        );

        #[method(currentVirtualScreen)]
        pub unsafe fn currentVirtualScreen(&self) -> GLint;

        #[method(setCurrentVirtualScreen:)]
        pub unsafe fn setCurrentVirtualScreen(&self, currentVirtualScreen: GLint);

        #[method(createTexture:fromView:internalFormat:)]
        pub unsafe fn createTexture_fromView_internalFormat(
            &self,
            target: GLenum,
            view: &NSView,
            format: GLenum,
        );

        #[method(CGLContextObj)]
        pub unsafe fn CGLContextObj(&self) -> CGLContextObj;
    }
);

extern_methods!(
    /// NSOpenGLPixelBuffer
    unsafe impl NSOpenGLContext {
        #[method(setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:)]
        pub unsafe fn setPixelBuffer_cubeMapFace_mipMapLevel_currentVirtualScreen(
            &self,
            pixelBuffer: &NSOpenGLPixelBuffer,
            face: GLenum,
            level: GLint,
            screen: GLint,
        );

        #[method_id(pixelBuffer)]
        pub unsafe fn pixelBuffer(&self) -> Option<Id<NSOpenGLPixelBuffer, Shared>>;

        #[method(pixelBufferCubeMapFace)]
        pub unsafe fn pixelBufferCubeMapFace(&self) -> GLenum;

        #[method(pixelBufferMipMapLevel)]
        pub unsafe fn pixelBufferMipMapLevel(&self) -> GLint;

        #[method(setTextureImageToPixelBuffer:colorBuffer:)]
        pub unsafe fn setTextureImageToPixelBuffer_colorBuffer(
            &self,
            pixelBuffer: &NSOpenGLPixelBuffer,
            source: GLenum,
        );
    }
);

pub static NSOpenGLCPSwapInterval: NSOpenGLContextParameter = NSOpenGLContextParameterSwapInterval;

pub static NSOpenGLCPSurfaceOrder: NSOpenGLContextParameter = NSOpenGLContextParameterSurfaceOrder;

pub static NSOpenGLCPSurfaceOpacity: NSOpenGLContextParameter =
    NSOpenGLContextParameterSurfaceOpacity;

pub static NSOpenGLCPSurfaceBackingSize: NSOpenGLContextParameter =
    NSOpenGLContextParameterSurfaceBackingSize;

pub static NSOpenGLCPReclaimResources: NSOpenGLContextParameter =
    NSOpenGLContextParameterReclaimResources;

pub static NSOpenGLCPCurrentRendererID: NSOpenGLContextParameter =
    NSOpenGLContextParameterCurrentRendererID;

pub static NSOpenGLCPGPUVertexProcessing: NSOpenGLContextParameter =
    NSOpenGLContextParameterGPUVertexProcessing;

pub static NSOpenGLCPGPUFragmentProcessing: NSOpenGLContextParameter =
    NSOpenGLContextParameterGPUFragmentProcessing;

pub static NSOpenGLCPHasDrawable: NSOpenGLContextParameter = NSOpenGLContextParameterHasDrawable;

pub static NSOpenGLCPMPSwapsInFlight: NSOpenGLContextParameter =
    NSOpenGLContextParameterMPSwapsInFlight;

pub static NSOpenGLCPSwapRectangle: NSOpenGLContextParameter =
    NSOpenGLContextParameterSwapRectangle;

pub static NSOpenGLCPSwapRectangleEnable: NSOpenGLContextParameter =
    NSOpenGLContextParameterSwapRectangleEnable;

pub static NSOpenGLCPRasterizationEnable: NSOpenGLContextParameter =
    NSOpenGLContextParameterRasterizationEnable;

pub static NSOpenGLCPStateValidation: NSOpenGLContextParameter =
    NSOpenGLContextParameterStateValidation;

pub static NSOpenGLCPSurfaceSurfaceVolatile: NSOpenGLContextParameter =
    NSOpenGLContextParameterSurfaceSurfaceVolatile;
