//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(u32)]
    pub enum NSOpenGLGlobalOption {
        NSOpenGLGOFormatCacheSize = 501,
        NSOpenGLGOClearFormatCache = 502,
        NSOpenGLGORetainRenderers = 503,
        NSOpenGLGOUseBuildCache = 506,
        NSOpenGLGOResetLibrary = 504,
    }
);

extern_fn!(
    pub unsafe fn NSOpenGLSetOption(pname: NSOpenGLGlobalOption, param: GLint);
);

extern_fn!(
    pub unsafe fn NSOpenGLGetOption(pname: NSOpenGLGlobalOption, param: NonNull<GLint>);
);

extern_fn!(
    pub unsafe fn NSOpenGLGetVersion(major: *mut GLint, minor: *mut GLint);
);

extern_enum!(
    #[underlying(c_uint)]
    pub enum {
        NSOpenGLPFAAllRenderers = 1,
        NSOpenGLPFATripleBuffer = 3,
        NSOpenGLPFADoubleBuffer = 5,
        NSOpenGLPFAAuxBuffers = 7,
        NSOpenGLPFAColorSize = 8,
        NSOpenGLPFAAlphaSize = 11,
        NSOpenGLPFADepthSize = 12,
        NSOpenGLPFAStencilSize = 13,
        NSOpenGLPFAAccumSize = 14,
        NSOpenGLPFAMinimumPolicy = 51,
        NSOpenGLPFAMaximumPolicy = 52,
        NSOpenGLPFASampleBuffers = 55,
        NSOpenGLPFASamples = 56,
        NSOpenGLPFAAuxDepthStencil = 57,
        NSOpenGLPFAColorFloat = 58,
        NSOpenGLPFAMultisample = 59,
        NSOpenGLPFASupersample = 60,
        NSOpenGLPFASampleAlpha = 61,
        NSOpenGLPFARendererID = 70,
        NSOpenGLPFANoRecovery = 72,
        NSOpenGLPFAAccelerated = 73,
        NSOpenGLPFAClosestPolicy = 74,
        NSOpenGLPFABackingStore = 76,
        NSOpenGLPFAScreenMask = 84,
        NSOpenGLPFAAllowOfflineRenderers = 96,
        NSOpenGLPFAAcceleratedCompute = 97,
        NSOpenGLPFAOpenGLProfile = 99,
        NSOpenGLPFAVirtualScreenCount = 128,
        NSOpenGLPFAStereo = 6,
        NSOpenGLPFAOffScreen = 53,
        NSOpenGLPFAFullScreen = 54,
        NSOpenGLPFASingleRenderer = 71,
        NSOpenGLPFARobust = 75,
        NSOpenGLPFAMPSafe = 78,
        NSOpenGLPFAWindow = 80,
        NSOpenGLPFAMultiScreen = 81,
        NSOpenGLPFACompliant = 83,
        NSOpenGLPFAPixelBuffer = 90,
        NSOpenGLPFARemotePixelBuffer = 91,
    }
);

pub type NSOpenGLPixelFormatAttribute = u32;

extern_enum!(
    #[underlying(c_uint)]
    pub enum {
        NSOpenGLProfileVersionLegacy = 0x1000,
        NSOpenGLProfileVersion3_2Core = 0x3200,
        NSOpenGLProfileVersion4_1Core = 0x4100,
    }
);

extern_class!(
    #[derive(Debug)]
    pub struct NSOpenGLPixelFormat;

    unsafe impl ClassType for NSOpenGLPixelFormat {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSOpenGLPixelFormat {
        #[method_id(@__retain_semantics Init initWithCGLPixelFormatObj:)]
        pub unsafe fn initWithCGLPixelFormatObj(
            this: Option<Allocated<Self>>,
            format: CGLPixelFormatObj,
        ) -> Option<Id<NSOpenGLPixelFormat, Shared>>;

        #[method_id(@__retain_semantics Init initWithAttributes:)]
        pub unsafe fn initWithAttributes(
            this: Option<Allocated<Self>>,
            attribs: NonNull<NSOpenGLPixelFormatAttribute>,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(@__retain_semantics Init initWithData:)]
        pub unsafe fn initWithData(
            this: Option<Allocated<Self>>,
            attribs: Option<&NSData>,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(@__retain_semantics Other attributes)]
        pub unsafe fn attributes(&self) -> Option<Id<NSData, Shared>>;

        #[method(setAttributes:)]
        pub unsafe fn setAttributes(&self, attribs: Option<&NSData>);

        #[method(getValues:forAttribute:forVirtualScreen:)]
        pub unsafe fn getValues_forAttribute_forVirtualScreen(
            &self,
            vals: NonNull<GLint>,
            attrib: NSOpenGLPixelFormatAttribute,
            screen: GLint,
        );

        #[method(numberOfVirtualScreens)]
        pub unsafe fn numberOfVirtualScreens(&self) -> GLint;

        #[method(CGLPixelFormatObj)]
        pub unsafe fn CGLPixelFormatObj(&self) -> CGLPixelFormatObj;
    }
);

extern_class!(
    #[derive(Debug)]
    pub struct NSOpenGLPixelBuffer;

    unsafe impl ClassType for NSOpenGLPixelBuffer {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSOpenGLPixelBuffer {
        #[method_id(@__retain_semantics Init initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:)]
        pub unsafe fn initWithTextureTarget_textureInternalFormat_textureMaxMipMapLevel_pixelsWide_pixelsHigh(
            this: Option<Allocated<Self>>,
            target: GLenum,
            format: GLenum,
            maxLevel: GLint,
            pixelsWide: GLsizei,
            pixelsHigh: GLsizei,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(@__retain_semantics Init initWithCGLPBufferObj:)]
        pub unsafe fn initWithCGLPBufferObj(
            this: Option<Allocated<Self>>,
            pbuffer: CGLPBufferObj,
        ) -> Option<Id<NSOpenGLPixelBuffer, Shared>>;

        #[method(CGLPBufferObj)]
        pub unsafe fn CGLPBufferObj(&self) -> CGLPBufferObj;

        #[method(pixelsWide)]
        pub unsafe fn pixelsWide(&self) -> GLsizei;

        #[method(pixelsHigh)]
        pub unsafe fn pixelsHigh(&self) -> GLsizei;

        #[method(textureTarget)]
        pub unsafe fn textureTarget(&self) -> GLenum;

        #[method(textureInternalFormat)]
        pub unsafe fn textureInternalFormat(&self) -> GLenum;

        #[method(textureMaxMipMapLevel)]
        pub unsafe fn textureMaxMipMapLevel(&self) -> GLint;
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum NSOpenGLContextParameter {
        NSOpenGLContextParameterSwapInterval = 222,
        NSOpenGLContextParameterSurfaceOrder = 235,
        NSOpenGLContextParameterSurfaceOpacity = 236,
        NSOpenGLContextParameterSurfaceBackingSize = 304,
        NSOpenGLContextParameterReclaimResources = 308,
        NSOpenGLContextParameterCurrentRendererID = 309,
        NSOpenGLContextParameterGPUVertexProcessing = 310,
        NSOpenGLContextParameterGPUFragmentProcessing = 311,
        NSOpenGLContextParameterHasDrawable = 314,
        NSOpenGLContextParameterMPSwapsInFlight = 315,
        NSOpenGLContextParameterSwapRectangle = 200,
        NSOpenGLContextParameterSwapRectangleEnable = 201,
        NSOpenGLContextParameterRasterizationEnable = 221,
        NSOpenGLContextParameterStateValidation = 301,
        NSOpenGLContextParameterSurfaceSurfaceVolatile = 306,
    }
);

extern_class!(
    #[derive(Debug)]
    pub struct NSOpenGLContext;

    unsafe impl ClassType for NSOpenGLContext {
        type Super = NSObject;
    }
);

extern_methods!(
    unsafe impl NSOpenGLContext {
        #[method_id(@__retain_semantics Init initWithFormat:shareContext:)]
        pub unsafe fn initWithFormat_shareContext(
            this: Option<Allocated<Self>>,
            format: &NSOpenGLPixelFormat,
            share: Option<&NSOpenGLContext>,
        ) -> Option<Id<Self, Shared>>;

        #[method_id(@__retain_semantics Init initWithCGLContextObj:)]
        pub unsafe fn initWithCGLContextObj(
            this: Option<Allocated<Self>>,
            context: CGLContextObj,
        ) -> Option<Id<NSOpenGLContext, Shared>>;

        #[method_id(@__retain_semantics Other pixelFormat)]
        pub unsafe fn pixelFormat(&self) -> Id<NSOpenGLPixelFormat, Shared>;

        #[method_id(@__retain_semantics Other view)]
        pub unsafe fn view(&self) -> Option<Id<NSView, Shared>>;

        #[method(setView:)]
        pub unsafe fn setView(&self, view: Option<&NSView>);

        #[method(setFullScreen)]
        pub unsafe fn setFullScreen(&self);

        #[method(setOffScreen:width:height:rowbytes:)]
        pub unsafe fn setOffScreen_width_height_rowbytes(
            &self,
            baseaddr: NonNull<c_void>,
            width: GLsizei,
            height: GLsizei,
            rowbytes: GLint,
        );

        #[method(clearDrawable)]
        pub unsafe fn clearDrawable(&self);

        #[method(update)]
        pub unsafe fn update(&self);

        #[method(flushBuffer)]
        pub unsafe fn flushBuffer(&self);

        #[method(makeCurrentContext)]
        pub unsafe fn makeCurrentContext(&self);

        #[method(clearCurrentContext)]
        pub unsafe fn clearCurrentContext();

        #[method_id(@__retain_semantics Other currentContext)]
        pub unsafe fn currentContext() -> Option<Id<NSOpenGLContext, Shared>>;

        #[method(copyAttributesFromContext:withMask:)]
        pub unsafe fn copyAttributesFromContext_withMask(
            &self,
            context: &NSOpenGLContext,
            mask: GLbitfield,
        );

        #[method(setValues:forParameter:)]
        pub unsafe fn setValues_forParameter(
            &self,
            vals: NonNull<GLint>,
            param: NSOpenGLContextParameter,
        );

        #[method(getValues:forParameter:)]
        pub unsafe fn getValues_forParameter(
            &self,
            vals: NonNull<GLint>,
            param: NSOpenGLContextParameter,
        );

        #[method(currentVirtualScreen)]
        pub unsafe fn currentVirtualScreen(&self) -> GLint;

        #[method(setCurrentVirtualScreen:)]
        pub unsafe fn setCurrentVirtualScreen(&self, currentVirtualScreen: GLint);

        #[method(createTexture:fromView:internalFormat:)]
        pub unsafe fn createTexture_fromView_internalFormat(
            &self,
            target: GLenum,
            view: &NSView,
            format: GLenum,
        );

        #[method(CGLContextObj)]
        pub unsafe fn CGLContextObj(&self) -> CGLContextObj;
    }
);

extern_methods!(
    /// NSOpenGLPixelBuffer
    unsafe impl NSOpenGLContext {
        #[method(setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:)]
        pub unsafe fn setPixelBuffer_cubeMapFace_mipMapLevel_currentVirtualScreen(
            &self,
            pixelBuffer: &NSOpenGLPixelBuffer,
            face: GLenum,
            level: GLint,
            screen: GLint,
        );

        #[method_id(@__retain_semantics Other pixelBuffer)]
        pub unsafe fn pixelBuffer(&self) -> Option<Id<NSOpenGLPixelBuffer, Shared>>;

        #[method(pixelBufferCubeMapFace)]
        pub unsafe fn pixelBufferCubeMapFace(&self) -> GLenum;

        #[method(pixelBufferMipMapLevel)]
        pub unsafe fn pixelBufferMipMapLevel(&self) -> GLint;

        #[method(setTextureImageToPixelBuffer:colorBuffer:)]
        pub unsafe fn setTextureImageToPixelBuffer_colorBuffer(
            &self,
            pixelBuffer: &NSOpenGLPixelBuffer,
            source: GLenum,
        );
    }
);

extern_static!(
    NSOpenGLCPSwapInterval: NSOpenGLContextParameter = NSOpenGLContextParameterSwapInterval
);

extern_static!(
    NSOpenGLCPSurfaceOrder: NSOpenGLContextParameter = NSOpenGLContextParameterSurfaceOrder
);

extern_static!(
    NSOpenGLCPSurfaceOpacity: NSOpenGLContextParameter = NSOpenGLContextParameterSurfaceOpacity
);

extern_static!(
    NSOpenGLCPSurfaceBackingSize: NSOpenGLContextParameter =
        NSOpenGLContextParameterSurfaceBackingSize
);

extern_static!(
    NSOpenGLCPReclaimResources: NSOpenGLContextParameter = NSOpenGLContextParameterReclaimResources
);

extern_static!(
    NSOpenGLCPCurrentRendererID: NSOpenGLContextParameter =
        NSOpenGLContextParameterCurrentRendererID
);

extern_static!(
    NSOpenGLCPGPUVertexProcessing: NSOpenGLContextParameter =
        NSOpenGLContextParameterGPUVertexProcessing
);

extern_static!(
    NSOpenGLCPGPUFragmentProcessing: NSOpenGLContextParameter =
        NSOpenGLContextParameterGPUFragmentProcessing
);

extern_static!(
    NSOpenGLCPHasDrawable: NSOpenGLContextParameter = NSOpenGLContextParameterHasDrawable
);

extern_static!(
    NSOpenGLCPMPSwapsInFlight: NSOpenGLContextParameter = NSOpenGLContextParameterMPSwapsInFlight
);

extern_static!(
    NSOpenGLCPSwapRectangle: NSOpenGLContextParameter = NSOpenGLContextParameterSwapRectangle
);

extern_static!(
    NSOpenGLCPSwapRectangleEnable: NSOpenGLContextParameter =
        NSOpenGLContextParameterSwapRectangleEnable
);

extern_static!(
    NSOpenGLCPRasterizationEnable: NSOpenGLContextParameter =
        NSOpenGLContextParameterRasterizationEnable
);

extern_static!(
    NSOpenGLCPStateValidation: NSOpenGLContextParameter = NSOpenGLContextParameterStateValidation
);

extern_static!(
    NSOpenGLCPSurfaceSurfaceVolatile: NSOpenGLContextParameter =
        NSOpenGLContextParameterSurfaceSurfaceVolatile
);
